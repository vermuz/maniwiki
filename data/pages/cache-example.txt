====== Cache Example ======

===== cache_example.info =====
<code>
   1 name = Cache Example
   2 description = An example outlining how to use Cache API.
   3 package = Example modules
   4 core = 7.x
   5 
   6 files[] = cache_example.test
</code>
===== cache_example.module =====
<code>
   1 <?php
   2 
   3 /**
   4  * @file
   5  * Outlines how a module can use the Cache API.
   6  *
   7  * @todo: Demonstrate cache expiration.
   8  */
   9 
  10 /**
  11  * @defgroup cache_example Example: Cache API
  12  * @ingroup examples
  13  * @{
  14  * Outlines how a module can use the Cache API.
  15  *
  16  * Cache API allows us to cache data that is heavy to calculate. As this can
  17  * significantly speed up the Drupal site, it is recommended to use cache
  18  * mechanism when it is appropriate.
  19  *
  20  * Cache in Drupal is very easy to use. This example will search entire Drupal
  21  * folder and display all files. Since this operation includes filesystem it can
  22  * take a while. This list will not change much on production
  23  * websites, so we decide to cache it.
  24  *
  25  * @see cache_get()
  26  * @see cache_set()
  27  * @see cache_clear_all()
  28  */
  29 
  30 /**
  31  * Implements hook_menu().
  32  */
  33 function cache_example_menu() {
  34   $items = array();
  35   $items['examples/cache_example'] = array(
  36     'title' => 'Cache example',
  37     'description' => 'Example of Drupal Cache API',
  38     'page callback' => 'drupal_get_form',
  39     'page arguments' => array('cache_example_page_form'),
  40     'access callback' => TRUE,
  41   );
  42 
  43   return $items;
  44 }
  45 
  46 /**
  47  * cache_example page/form callback.
  48  *
  49  * Displays a page/form which outlines how Drupal's cache works.
  50  */
  51 function cache_example_page_form($form, &$form_state) {
  52   // Log execution time.
  53   $start_time = microtime(TRUE);
  54 
  55 
  56    // Try to load the files count from cache. This function will accept two
  57    // arguments:
  58    // - cache object name (cid)
  59    // - cache bin, the (optional) cache bin (most often a database table) where
  60    //   the object is to be saved.
  61    //
  62    // cache_get() returns the cached object or FALSE if object does not exist.
  63   if ($cache = cache_get('cache_example_files_count')) {
  64     /*
  65      * Get cached data. Complex data types will be unserialized automatically.
  66      */
  67     $files_count = $cache->data;
  68   }
  69   else {
  70     // If there was no cached data available we have to search filesystem.
  71     // Recursively get all files from Drupal's folder.
  72     $files_count = count(file_scan_directory('.', '/.*/'));
  73 
  74 
  75     // Since we have recalculated, we now need to store the new data into cache.
  76     // Complex data types will be automatically serialized before being saved
  77     // into cache.
  78     // Here we use the default setting and create an unexpiring cache item.
  79     // See below for an example that creates an expiring cache item.
  80     cache_set('cache_example_files_count', $files_count);
  81   }
  82 
  83   $end_time = microtime(TRUE);
  84   $duration = $end_time - $start_time;
  85 
  86 
  87   // Format intro message.
  88   $intro_message = '<p>' . t('This example will search the entire drupal folder and display a count of the files in it.') . ' ';
  89   $intro_message .= t('This can take a while, since there are a lot of files to be searched.') . ' ';
  90   $intro_message .= t('We will search filesystem just once and save output to the cache. We will use cached data for later requests.') . '</p>';
  91   $intro_message .= '<p>' . t('<a href="@url">Reload this page</a> to see cache in action.', array('@url' => request_uri())) . ' ';
  92   $intro_message .= t('You can use the button below to remove cached data.') . '</p>';
  93 
  94   $form['file_search'] = array(
  95     '#type' => 'fieldset',
  96     '#title' => t('File search caching'),
  97   );
  98   $form['file_search']['introduction'] = array(
  99     '#markup' => $intro_message,
 100   );
 101 
 102   $color = empty($cache) ? 'red' : 'green';
 103   $retrieval = empty($cache) ? t('calculated by traversing the filesystem') : t('retrieved from cache');
 104 
 105   $form['file_search']['statistics'] = array(
 106     '#type' => 'item',
 107     '#markup' => t('%count files exist in this Drupal installation; @retrieval in @time ms. <br/>(Source: <span style="color:@color;">@source</span>)',
 108       array(
 109         '%count' => $files_count,
 110         '@retrieval' => $retrieval,
 111         '@time' => number_format($duration * 1000, 2),
 112         '@color' => $color,
 113         '@source' => empty($cache) ? t('actual file search') : t('cached'),
 114       )
 115     ),
 116   );
 117   $form['file_search']['remove_file_count'] = array(
 118     '#type' => 'submit',
 119     '#submit' => array('cache_example_form_expire_files'),
 120     '#value' => t('Explicitly remove cached file count'),
 121   );
 122 
 123   $form['expiration_demo'] = array(
 124     '#type' => 'fieldset',
 125     '#title' => t('Cache expiration settings'),
 126   );
 127   $form['expiration_demo']['explanation'] = array(
 128     '#markup' => t('A cache item can be set as CACHE_PERMANENT, meaning that it will only be removed when explicitly cleared, or it can have an expiration time (a Unix timestamp).'),
 129   );
 130   $expiring_item = cache_get('cache_example_expiring_item');
 131   $item_status = $expiring_item ?
 132       t('Cache item exists and is set to expire at %time', array('%time' => $expiring_item->data)) :
 133       t('Cache item does not exist');
 134   $form['expiration_demo']['current_status'] = array(
 135     '#type' => 'item',
 136     '#title' => t('Current status of cache item "cache_example_expiring_item"'),
 137     '#markup' => $item_status,
 138   );
 139   $form['expiration_demo']['expiration'] = array(
 140     '#type' => 'select',
 141     '#title' => t('Time before cache expiration'),
 142     '#options' => array(
 143       'never_remove' => t('CACHE_PERMANENT'),
 144       -10 => t('Immediate expiration'),
 145       10 => t('10 seconds from form submission'),
 146       60 => t('1 minute from form submission'),
 147       300 => t('5 minutes from form submission'),
 148     ),
 149     '#default_value' => -10,
 150     '#description' => t('Any cache item can be set to only expire when explicitly cleared, or to expire at a given time.')
 151   );
 152   $form['expiration_demo']['create_cache_item'] = array(
 153     '#type' => 'submit',
 154     '#value' => t('Create a cache item with this expiration'),
 155     '#submit' => array('cache_example_form_create_expiring_item'),
 156   );
 157 
 158   $form['cache_clearing'] = array(
 159     '#type' => 'fieldset',
 160     '#title' => t('Expire and remove options'),
 161     '#description' => t("We have APIs to expire cached items and also to just remove them. Unfortunately, they're all the same API, cache_clear_all"),
 162   );
 163   $form['cache_clearing']['cache_clear_type'] = array(
 164     '#type' => 'radios',
 165     '#title' => t('Type of cache clearing to do'),
 166     '#options' => array(
 167       'expire' => t('Remove items from the "cache" bin that have expired'),
 168       'remove_all' => t('Remove all items from the "cache" bin regardless of expiration (super-wildcard)'),
 169       'remove_wildcard' => t('Remove all items from the "cache" bin that match the pattern "cache_example"'),
 170     ),
 171     '#default_value' => 'expire',
 172   );
 173   // Submit button to clear cached data.
 174   $form['cache_clearing']['clear_expired'] = array(
 175     '#type' => 'submit',
 176     '#value' => t('Clear or expire cache'),
 177     '#submit' => array('cache_example_form_cache_clearing'),
 178     '#access' => user_access('administer site configuration'),
 179   );
 180   return $form;
 181 }
 182 
 183 /**
 184  * Submit handler that explicitly clears cache_example_files_count from cache.
 185  */
 186 function cache_example_form_expire_files($form, &$form_state) {
 187   // Clear cached data. This function will delete cached object from cache bin.
 188   //
 189   // The first argument is cache id to be deleted. Since we've provided it
 190   // explicitly, it will be removed whether or not it has an associated
 191   // expiration time. The second argument (required here) is the cache bin.
 192   // Using cache_clear_all() explicitly in this way
 193   // forces removal of the cached item.
 194   cache_clear_all('cache_example_files_count', 'cache');
 195 
 196   // Display message to the user.
 197   drupal_set_message(t('Cached data key "cache_example_files_count" was cleared.'), 'status');
 198 }
 199 
 200 /**
 201  * Submit handler to create a new cache item with specified expiration.
 202  */
 203 function cache_example_form_create_expiring_item($form, &$form_state) {
 204   $interval = $form_state['values']['expiration'];
 205   if ($interval == 'never_remove') {
 206     $expiration = CACHE_PERMANENT;
 207     $expiration_friendly = t('Never expires');
 208   }
 209   else {
 210     $expiration = time() + $interval;
 211     $expiration_friendly = format_date($expiration);
 212   }
 213   // Set the expiration to the actual Unix timestamp of the end of the required
 214   // interval.
 215   cache_set('cache_example_expiring_item', $expiration_friendly, 'cache', $expiration);
 216   drupal_set_message(t('cache_example_expiring_item was set to expire at %time', array('%time' => $expiration_friendly)));
 217 }
 218 
 219 /**
 220  * Submit handler to demonstrate the various uses of cache_clear_all().
 221  */
 222 function cache_example_form_cache_clearing($form, &$form_state) {
 223   switch ($form_state['values']['cache_clear_type']) {
 224     case 'expire':
 225       // Here we'll remove all cache keys in the 'cache' bin that have expired.
 226       cache_clear_all(NULL, 'cache');
 227       drupal_set_message(t('cache_clear_all(NULL, "cache") was called, removing any expired cache items.'));
 228       break;
 229     case 'remove_all':
 230       // This removes all keys in a bin using a super-wildcard. This
 231       // has nothing to do with expiration. It's just brute-force removal.
 232       cache_clear_all('*', 'cache', TRUE);
 233       drupal_set_message(t('ALL entries in the "cache" bin were removed with cache_clear_all("*", "cache", TRUE).'));
 234       break;
 235     case 'remove_wildcard':
 236       // We can also explicitly remove all cache items whose cid begins with
 237       // 'cache_example' by using a wildcard. This again is brute-force
 238       // removal, not expiration.
 239       cache_clear_all('cache_example', 'cache', TRUE);
 240       drupal_set_message(t('Cache entries whose cid began with "cache_example" in the "cache" bin were removed with cache_clear_all("cache_example", "cache", TRUE).'));
 241       break;
 242   }
 243 }
 244 
 245 /**
 246  * @} End of "defgroup cache_example".
 247  */
</code>
===== cache_example.test =====
<code>
   1 <?php
   2 /**
   3  * @file
   4  * Test case for testing the cache example module.
   5  */
   6 class CacheExampleTestCase extends DrupalWebTestCase {
   7 
   8   public static function getInfo() {
   9     return array(
  10       'name' => 'Cache example functionality',
  11       'description' => 'Test the Cache Example module.',
  12       'group' => 'Examples',
  13     );
  14   }
  15 
  16   /**
  17    * Enable module.
  18    */
  19   function setUp() {
  20     parent::setUp('cache_example');
  21   }
  22 
  23   /**
  24    * Load cache example page and test if displaying uncached version. Reload once again and test
  25    * if displaying cached version. Find reload link and click on it. Clear cache at the end and
  26    * test if displaying uncached version again.
  27    */
  28   function testCacheExampleBasic() {
  29     // We need administrative privileges to clear the cache.
  30     $admin_user = $this->drupalCreateUser(array('administer site configuration'));
  31     $this->drupalLogin($admin_user);
  32 
  33     // Get uncached output of cache example page and assert some things to be sure.
  34     $this->drupalGet('examples/cache_example');
  35     $this->assertText('Source: actual file search');
  36     // Reload the page; the number should be cached.
  37     $this->drupalGet('examples/cache_example');
  38     $this->assertText('Source: cached');
  39 
  40     // Now push the button to remove the count.
  41     $this->drupalPost('examples/cache_example', array(), t('Explicitly remove cached file count'));
  42     $this->assertText('Source: actual file search');
  43 
  44     // Create a cached item. First make sure it doesn't already exist.
  45     $this->assertText('Cache item does not exist');
  46     $this->drupalPost('examples/cache_example', array('expiration' => -10), t('Create a cache item with this expiration'));
  47     // We should now have an already-expired item
  48     $this->assertText('Cache item exists and is set to expire');
  49     // Now do the expiration operation
  50     $this->drupalPost('examples/cache_example', array('cache_clear_type' => 'expire'), t('Clear or expire cache'));
  51     // And verify that it was removed.
  52     $this->assertText('Cache item does not exist');
  53 
  54     // Create a cached item. This time we'll make it not expire.
  55     $this->drupalPost('examples/cache_example', array('expiration' => 'never_remove'), t('Create a cache item with this expiration'));
  56     // We should now have an never-remove item
  57     $this->assertText('Cache item exists and is set to expire at Never expires');
  58     // Now do the expiration operation
  59     $this->drupalPost('examples/cache_example', array('cache_clear_type' => 'expire'), t('Clear or expire cache'));
  60     // And verify that it was not removed.
  61     $this->assertText('Cache item exists and is set to expire at Never expires');
  62     // Now do full removal
  63     $this->drupalPost('examples/cache_example', array('cache_clear_type' => 'remove_wildcard'), t('Clear or expire cache'));
  64     // And verify that it was removed.
  65     $this->assertText('Cache item does not exist');
  66   }
  67 
  68 }
</code>