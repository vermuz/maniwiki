**Sets
**

Take collections of distinct items and perform operations on them

Math:   
        * Collection of distinct objects
        * Considered an object
 
Python: 
  * Valueless dictionaries (Keys only)
  * Unordered collection of unique, immutable element.
  * Good for isolating uniques
  * Not indexed
  * Python creates hash values to keep track of them
  * Set operations (union, intersection, difference)
  * Membership Testing (in, issubset, issuperset)

<code>
# Passing a string
myset = set('python')
# Passing a List
myset2 = set([0,1,2,3,4])
</code>


<code>
>>> s1 = set([0,2,4,6])
>>> type(s1)
<class 'set'>
>>> s2 = set('mani')
>>> s1
{0, 2, 4, 6}
>>> s2
{'a', 'i', 'm', 'n'}
</code>

**Update is Union**

<code>
>>> s3 = set([10, 12, 14, 16])
>>> s1.update(s3)
>>> s1
{0, 2, 4, 6, 10, 12, 14, 16}
</code>

**Set to create a copy
**
<code>
>>> newset = set(s1)
>>> newset
{0, 2, 4, 6, 10, 12, 14, 16}
</code>

**I want to know the Memory address of an object
**

<code>
>>> id(s1)
3042165228
>>> id(newset)
3051773708

OUCH !!!

>>> sx = s1
>>> id(s1)
3042165228
>>> id(sx)
3042165228
</code>

**Pop**

<code>
>>> sx
{0, 2, 4, 6, 10, 12, 14, 16}
>>> sx = sx.pop()
>>> sx
0
>>> s1
{2, 4, 6, 10, 12, 14, 16}
>>> s1.pop()
2
>>> s1
{4, 6, 10, 12, 14, 16}
</code>

**Remove
**
<code>
>>> s1
{4, 6, 10, 12, 14, 16}
>>> s1.remove(10)
>>> s1
{4, 6, 12, 14, 16}
</code>

**Membership
**
<code>
>>> s1
{4, 6, 12, 14, 16}
>>> 8 in s1
False
>>> 6 in s1
True
>>> 12 not in s1
False
>>> 13 not in s1
True

//************************
>>> s1 = set([0,2,4,6])
>>> s2 = set([10,12,14,16])
>>> s1.update(s2)
>>> s1
{0, 2, 4, 6, 10, 12, 14, 16}
>>> s1.issubset(s2)
False
>>> s2.issubset(s1)
True
</code>

**Clear a set
**
<code>
>>> s1.clear()
>>> s1
set()
</code>

**Create an empty set and add values to it
**
<code>
>>> s1 = set()
>>> s1.add(0)
>>> s1.add(1)
>>> s1
{0, 1}
>>> s2 = set([2,3,4,5])
>>> s1.update(s2)
>>> s1
{0, 1, 2, 3, 4, 5}
</code>

**Make a list- then make a set of that list
**

<code>
# CREATE A LIST
lang = ['lisp', 'python', 'abc', 'c', 'python', 'ruby', 'perl', 'ruby']
# CREATE A SET OUT OF IT
>>> l1 = set(lang)
# DUPES ARE GONE!
>>> l1
{'c', 'abc', 'lisp', 'perl', 'python', 'ruby'}
</code>

**Union and Intersection
**
<code>
>>> l2 = set(morelang)
>>> l2
{'haskell', 'perl', 'erlang', 'sql'}
>>> l1
{'c', 'abc', 'lisp', 'perl', 'python', 'ruby'}
>>> l1 - l2
{'lisp', 'python', 'c', 'abc', 'ruby'}
>>> l1.intersection(l2)
{'perl'}
>>> u = l1.union(l2)
>>> u
{'python', 'c', 'abc', 'sql', 'lisp', 'erlang', 'ruby', 'haskell', 'perl'}
</code>

**For through a Set
**
<code>
>>> l1
{'c', 'abc', 'lisp', 'perl', 'python', 'ruby'}
>>> for i in l1:
	print(i)

c
abc
lisp
perl
python
ruby
</code>
