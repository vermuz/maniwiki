
<h1 class="sectionedit1" id="table_drag_example">Table Drag Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Table Drag Example" [1-34] -->
<h2 class="sectionedit2" id="tabledrag_exampleinfo">tabledrag_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Tabledrag Example
   2 description = Demonstrates how to create tabledrag forms.
   3 package = Example modules
   4 core = 7.x</pre>

</div>
<!-- EDIT2 SECTION "tabledrag_example.info" [35-224] -->
<h2 class="sectionedit3" id="tabledrag_exampleinstall">tabledrag_example.install</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Install and uninstall functions for the tabledrag example module.
   5  *
   6  * This file contains the functions required to perform install and
   7  * uninstall operations.
   8  */
   9 
  10 /**
  11  * Implements hook_schema().
  12  *
  13  * This defines the database table which will hold the example item info.
  14  *
  15  * @ingroup tabledrag_example
  16  */
  17 function tabledrag_example_schema() {
  18   $schema[&#039;tabledrag_example&#039;] = array(
  19     &#039;description&#039; =&gt; &#039;Stores some entries for our tabledrag fun.&#039;,
  20     &#039;fields&#039; =&gt; array(
  21       &#039;id&#039; =&gt; array(
  22         &#039;description&#039; =&gt; &#039;The primary identifier for each item&#039;,
  23         &#039;type&#039; =&gt; &#039;serial&#039;,
  24         &#039;unsigned&#039; =&gt; TRUE,
  25         &#039;not null&#039; =&gt; TRUE,
  26       ),
  27       &#039;name&#039; =&gt; array(
  28         &#039;description&#039; =&gt; &#039;A name for this item&#039;,
  29         &#039;type&#039; =&gt; &#039;varchar&#039;,
  30         &#039;length&#039; =&gt; 32,
  31         &#039;not null&#039; =&gt; TRUE,
  32         &#039;default&#039; =&gt; &#039;&#039;,
  33       ),
  34       &#039;description&#039; =&gt; array(
  35         &#039;description&#039; =&gt; &#039;A description for this item&#039;,
  36         &#039;type&#039; =&gt; &#039;varchar&#039;,
  37         &#039;length&#039; =&gt; 255,
  38         &#039;not null&#039; =&gt; TRUE,
  39         &#039;default&#039; =&gt; &#039;&#039;,
  40       ),
  41       &#039;itemgroup&#039; =&gt; array(
  42         &#039;description&#039; =&gt; &#039;The group this item belongs to&#039;,
  43         &#039;type&#039; =&gt; &#039;varchar&#039;,
  44         &#039;length&#039; =&gt; 32,
  45         &#039;not null&#039; =&gt; TRUE,
  46         &#039;default&#039; =&gt; &#039;&#039;,
  47       ),
  48       &#039;weight&#039; =&gt; array(
  49         &#039;description&#039; =&gt; &#039;The sortable weight for this item&#039;,
  50         &#039;type&#039; =&gt; &#039;int&#039;,
  51         &#039;length&#039; =&gt; 11,
  52         &#039;not null&#039; =&gt; TRUE,
  53         &#039;default&#039; =&gt; 0,
  54       ),
  55       &#039;pid&#039; =&gt; array(
  56         &#039;description&#039; =&gt; &#039;The primary id of the parent for this item&#039;,
  57         &#039;type&#039; =&gt; &#039;int&#039;,
  58         &#039;length&#039; =&gt; 11,
  59         &#039;unsigned&#039; =&gt; TRUE,
  60         &#039;not null&#039; =&gt; TRUE,
  61         &#039;default&#039; =&gt; 0,
  62       ),
  63       &#039;depth&#039; =&gt; array(
  64         &#039;description&#039; =&gt; &#039;The depth of this item within the tree&#039;,
  65         &#039;type&#039; =&gt; &#039;int&#039;,
  66         &#039;size&#039; =&gt; &#039;small&#039;,
  67         &#039;unsigned&#039; =&gt; TRUE,
  68         &#039;not null&#039; =&gt; TRUE,
  69         &#039;default&#039; =&gt; 0,
  70       ),
  71     ),
  72     &#039;primary key&#039; =&gt; array(&#039;id&#039;),
  73   );
  74   return $schema;
  75 }
  76 
  77 /**
  78  * Implements hook_install().
  79  *
  80  * This datafills the example item info which will be used in the example.
  81  *
  82  * @ingroup tabledrag_example
  83  */
  84 function tabledrag_example_install() {
  85   // Ensure translations don&#039;t break at install time.
  86   $t = get_t();
  87   // Insert some values into the database.
  88   $rows = array(
  89     array(
  90       &#039;name&#039; =&gt; $t(&#039;Item One&#039;),
  91       &#039;description&#039; =&gt; $t(&#039;The first item&#039;),
  92       &#039;itemgroup&#039; =&gt; $t(&#039;Group1&#039;),
  93     ),
  94     array(
  95       &#039;name&#039; =&gt; $t(&#039;Item Two&#039;),
  96       &#039;description&#039; =&gt; $t(&#039;The second item&#039;),
  97       &#039;itemgroup&#039; =&gt; $t(&#039;Group1&#039;),
  98     ),
  99     array(
 100       &#039;name&#039; =&gt; $t(&#039;Item Three&#039;),
 101       &#039;description&#039; =&gt; $t(&#039;The third item&#039;),
 102       &#039;itemgroup&#039; =&gt; $t(&#039;Group1&#039;),
 103     ),
 104     array(
 105       &#039;name&#039; =&gt; $t(&#039;Item Four&#039;),
 106       &#039;description&#039; =&gt; $t(&#039;The fourth item&#039;),
 107       &#039;itemgroup&#039; =&gt; $t(&#039;Group2&#039;),
 108     ),
 109     array(
 110       &#039;name&#039; =&gt; $t(&#039;Item Five&#039;),
 111       &#039;description&#039; =&gt; $t(&#039;The fifth item&#039;),
 112       &#039;itemgroup&#039; =&gt; $t(&#039;Group2&#039;),
 113     ),
 114     array(
 115       &#039;name&#039; =&gt; $t(&#039;Item Six&#039;),
 116       &#039;description&#039; =&gt; $t(&#039;The sixth item&#039;),
 117       &#039;itemgroup&#039; =&gt; $t(&#039;Group2&#039;),
 118     ),
 119     array(
 120       &#039;name&#039; =&gt; $t(&#039;Item Seven&#039;),
 121       &#039;description&#039; =&gt; $t(&#039;The seventh item&#039;),
 122       &#039;itemgroup&#039; =&gt; $t(&#039;Group3&#039;),
 123     ),
 124     array(
 125       &#039;name&#039; =&gt; $t(&#039;A Root Node&#039;),
 126       &#039;description&#039; =&gt; $t(&#039;This item cannot be nested under a parent item&#039;),
 127       &#039;itemgroup&#039; =&gt; $t(&#039;Group3&#039;),
 128     ),
 129     array(
 130       &#039;name&#039; =&gt; $t(&#039;A Leaf Item&#039;),
 131       &#039;description&#039; =&gt; $t(&#039;This item cannot have child items&#039;),
 132       &#039;itemgroup&#039; =&gt; $t(&#039;Group3&#039;),
 133     ),
 134   );
 135   if (db_table_exists(&#039;tabledrag_example&#039;)) {
 136     foreach ($rows as $row) {
 137       db_insert(&#039;tabledrag_example&#039;)-&gt;fields($row)-&gt;execute();
 138     }
 139   }
 140 }
 141 
 142 /**
 143  * Implements hook_uninstall().
 144  *
 145  * This removes the example data when the module is uninstalled.
 146  *
 147  * @ingroup tabledrag_example
 148  */
 149 function tabledrag_example_uninstall() {
 150   db_drop_table(&#039;tabledrag_example&#039;);
 151 }</pre>

</div>
<!-- EDIT3 SECTION "tabledrag_example.install" [225-4967] -->
<h2 class="sectionedit4" id="tabledrag_examplemodule">tabledrag_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * An example of how to build a sortable form using tabledrag.
   5  */
   6 
   7 /**
   8  * @defgroup tabledrag_example Example: Tabledrag
   9  * @ingroup examples
  10  * @{
  11  * Example of draggable table rows.
  12  */
  13 
  14 /**
  15  * Implements hook_help().
  16  *
  17  * Show a bit of information about this module on the example page.
  18  */
  19 function tabledrag_example_help($path, $arg) {
  20   switch ($path) {
  21     case &#039;examples/tabledrag_example&#039;:
  22       return &#039;&lt;p&gt;&#039; . t(&#039;The form here is a themed as a table that is sortable using tabledrag handles.&#039;) . &#039;&lt;/p&gt;&#039;;
  23   }
  24 }
  25 
  26 /**
  27  * Implements hook_menu().
  28  *
  29  * We&#039;ll let drupal_get_form() generate the form page for us, for both of
  30  * these menu items.
  31  *
  32  * @see drupal_get_form()
  33  */
  34 function tabledrag_example_menu() {
  35   // Basic example with single-depth sorting.
  36   $items[&#039;examples/tabledrag_example_simple&#039;] = array(
  37     &#039;title&#039; =&gt; &#039;TableDrag example (simple)&#039;,
  38     &#039;description&#039; =&gt; &#039;Show a page with a sortable tabledrag form&#039;,
  39     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  40     &#039;page arguments&#039; =&gt; array(&#039;tabledrag_example_simple_form&#039;),
  41     &#039;access callback&#039; =&gt; TRUE,
  42     &#039;file&#039; =&gt; &#039;tabledrag_example_simple_form.inc&#039;,
  43   );
  44   // Basic parent/child example.
  45   $items[&#039;examples/tabledrag_example_parent&#039;] = array(
  46     &#039;title&#039; =&gt; &#039;TableDrag example (parent/child)&#039;,
  47     &#039;description&#039; =&gt; &#039;Show a page with a sortable parent/child tabledrag form&#039;,
  48     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  49     &#039;page arguments&#039; =&gt; array(&#039;tabledrag_example_parent_form&#039;),
  50     &#039;access callback&#039; =&gt; TRUE,
  51     &#039;file&#039; =&gt; &#039;tabledrag_example_parent_form.inc&#039;,
  52   );
  53   return $items;
  54 }
  55 
  56 /**
  57  * Implements hook_theme().
  58  *
  59  * We need run our forms through custom theme functions in order to build the
  60  * table structure which is required by tabledrag.js.  Before we can use our
  61  * custom theme functions, we need to implement hook_theme in order to register
  62  * them with Drupal.
  63  *
  64  * We are defining our theme hooks with the same name as the form generation
  65  * function so that Drupal automatically calls our theming function when the
  66  * form is displayed.
  67  */
  68 function tabledrag_example_theme() {
  69   return array(
  70     // Theme function for the &#039;simple&#039; example.
  71     &#039;tabledrag_example_simple_form&#039; =&gt; array(
  72       &#039;render element&#039; =&gt; &#039;form&#039;,
  73       &#039;file&#039; =&gt; &#039;tabledrag_example_simple_form.inc&#039;,
  74     ),
  75     // Theme function for the &#039;parent/child&#039; example.
  76     &#039;tabledrag_example_parent_form&#039; =&gt; array(
  77       &#039;render element&#039; =&gt; &#039;form&#039;,
  78       &#039;file&#039; =&gt; &#039;tabledrag_example_parent_form.inc&#039;,
  79     ),
  80   );
  81 }
  82 /**
  83  * @} End of &quot;defgroup tabledrag_example&quot;.
  84  */</pre>

</div>
<!-- EDIT4 SECTION "tabledrag_example.module" [4968-7984] -->
<h2 class="sectionedit5" id="tabledrag_example_parent_forminc">tabledrag_example_parent_form.inc</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Example demonstrating a parent/child tabledrag form
   5  */
   6 
   7 /**
   8  * Build the parent-child example form.
   9  *
  10  * @return
  11  *   A form array set for theming by theme_tabledrag_example_parent_form()
  12  *
  13  * @ingroup tabledrag_example
  14  */
  15 function tabledrag_example_parent_form($form_state) {
  16   // Identify that the elements in &#039;example_items&#039; are a collection, to
  17   // prevent Form API from flattening the array when submitted.
  18   $form[&#039;example_items&#039;][&#039;#tree&#039;] = TRUE;
  19 
  20   // Tabledrag will take care of updating the parent_id relationship on each
  21   // row of our table when we drag items around, but we need to build out the
  22   // initial tree structure ourselves.  This means ordering our items such
  23   // that children items come directly after their parent items, and all items
  24   // are sorted by weight relative to their siblings.
  25   // To keep this from cluttering the actual tabledrag code, we have moved
  26   // this to a dedicated function.
  27 
  28   // Fetch the example data from the database, ordered by parent/child/weight.
  29   $result = tabledrag_example_parent_get_data();
  30 
  31   // Iterate through each database result.
  32   foreach ($result as $item) {
  33 
  34     // Create a form entry for this item.
  35     //
  36     // Each entry will be an array using the the unique id for that item as
  37     // the array key, and an array of table row data as the value.
  38     $form[&#039;example_items&#039;][$item-&gt;id] = array(
  39 
  40       // We&#039;ll use a form element of type &#039;#markup&#039; to display the item name.
  41       &#039;name&#039; =&gt; array(
  42         &#039;#markup&#039; =&gt; $item-&gt;name,
  43       ),
  44 
  45       // We&#039;ll use a form element of type &#039;#textfield&#039; to display the item
  46       // description, to demonstrate that form elements can be included in the
  47       // table. We limit the input to 255 characters, which is the limit we
  48       // set on the database field.
  49       &#039;description&#039; =&gt; array(
  50         &#039;#type&#039; =&gt; &#039;textfield&#039;,
  51         &#039;#default_value&#039; =&gt; $item-&gt;description,
  52         &#039;#size&#039; =&gt; 20,
  53         &#039;#maxlength&#039; =&gt; 255,
  54       ),
  55 
  56       // For parent/child relationships, we also need to add form items to
  57       // store the current item&#039;s unique id and parent item&#039;s unique id.
  58       //
  59       // We would normally use a hidden element for this, but for this example
  60       // we&#039;ll use a disabled textfield element called &#039;id&#039; so that we can
  61       // display the current item&#039;s id in the table.
  62       //
  63       // Because tabledrag modifies the #value of this element, we use
  64       // &#039;#default_value&#039; instead of &#039;#value&#039; when defining a hidden element.
  65       // Also, because tabledrag modifies &#039;#value&#039;, we cannot use a markup
  66       // element, which does not support the &#039;#value&#039; property. (Markup
  67       // elements use the &#039;#markup&#039; property instead.)
  68       &#039;id&#039; =&gt; array(
  69         // &#039;#type&#039; =&gt; &#039;hidden&#039;,
  70         // &#039;#default_value&#039; =&gt; $item-&gt;id,
  71         &#039;#type&#039; =&gt; &#039;textfield&#039;,
  72         &#039;#size&#039; =&gt; 3,
  73         &#039;#default_value&#039; =&gt; $item-&gt;id,
  74         &#039;#disabled&#039; =&gt; TRUE,
  75       ),
  76 
  77       // The same information holds true for the parent id field as for the
  78       // item id field, described above.
  79       &#039;pid&#039; =&gt; array(
  80         // &#039;#type&#039; =&gt; &#039;hidden&#039;,
  81         // &#039;#default_value&#039; =&gt; $item-&gt;pid,
  82         &#039;#type&#039; =&gt; &#039;textfield&#039;,
  83         &#039;#size&#039; =&gt; 3,
  84         &#039;#default_value&#039; =&gt; $item-&gt;pid,
  85       ),
  86 
  87       // The &#039;weight&#039; field will be manipulated as we move the items around in
  88       // the table using the tabledrag activity.  We use the &#039;weight&#039; element
  89       // defined in Drupal&#039;s Form API.
  90       &#039;weight&#039; =&gt; array(
  91         &#039;#type&#039; =&gt; &#039;weight&#039;,
  92         &#039;#title&#039; =&gt; t(&#039;Weight&#039;),
  93         &#039;#default_value&#039; =&gt; $item-&gt;weight,
  94         &#039;#delta&#039; =&gt; 10,
  95         &#039;#title-display&#039; =&gt; &#039;invisible&#039;,
  96       ),
  97 
  98       // We&#039;ll use a hidden form element to pass the current &#039;depth&#039; of each
  99       // item within our parent/child tree structure to the theme function.
 100       // This will be used to calculate the initial amount of indentation to
 101       // add before displaying any child item rows.
 102       &#039;depth&#039; =&gt; array(
 103         &#039;#type&#039; =&gt; &#039;hidden&#039;,
 104         &#039;#value&#039; =&gt; $item-&gt;depth,
 105       ),
 106     );
 107   }
 108 
 109   // Now we add our submit button, for submitting the form results.
 110   //
 111   // The &#039;actions&#039; wrapper used here isn&#039;t strictly necessary for tabledrag,
 112   // but is included as a Form API recommended practice.
 113   $form[&#039;actions&#039;] = array(&#039;#type&#039; =&gt; &#039;actions&#039;);
 114   $form[&#039;actions&#039;][&#039;submit&#039;] = array(&#039;#type&#039; =&gt; &#039;submit&#039;, &#039;#value&#039; =&gt; t(&#039;Save Changes&#039;));
 115   return $form;
 116 }
 117 
 118 /**
 119  * Theme callback for the tabledrag_example_parent_form form.
 120  *
 121  * The theme callback will format the $form data structure into a table and
 122  * add our tabledrag functionality.  (Note that drupal_add_tabledrag should be
 123  * called from the theme layer, and not from a form declaration.  This helps
 124  * keep template files clean and readable, and prevents tabledrag.js from
 125  * being added twice accidently.
 126  *
 127  * @ingroup tabledrag_example
 128  */
 129 function theme_tabledrag_example_parent_form($variables) {
 130   $form = $variables[&#039;form&#039;];
 131 
 132   // Initialize the variable which will store our table rows.
 133   $rows = array();
 134 
 135   // Iterate over each element in our $form[&#039;example_items&#039;] array.
 136   foreach (element_children($form[&#039;example_items&#039;]) as $id) {
 137 
 138     // Before we add our &#039;weight&#039; column to the row, we need to give the
 139     // element a custom class so that it can be identified in the
 140     // drupal_add_tabledrag call.
 141     //
 142     // This could also have been done during the form declaration by adding
 143     // @code
 144     //   &#039;#attributes&#039; =&gt; array(&#039;class&#039; =&gt; &#039;example-item-weight&#039;),
 145     // @endcode
 146     // directly to the &#039;weight&#039; element in tabledrag_example_simple_form().
 147     $form[&#039;example_items&#039;][$id][&#039;weight&#039;][&#039;#attributes&#039;][&#039;class&#039;] = array(&#039;example-item-weight&#039;);
 148 
 149     // In the parent/child example, we must also set this same custom class on
 150     // our id and parent_id columns (which could also have been done within
 151     // the form declaration, as above).
 152     $form[&#039;example_items&#039;][$id][&#039;id&#039;][&#039;#attributes&#039;][&#039;class&#039;] = array(&#039;example-item-id&#039;);
 153     $form[&#039;example_items&#039;][$id][&#039;pid&#039;][&#039;#attributes&#039;][&#039;class&#039;] = array(&#039;example-item-pid&#039;);
 154 
 155     // To support the tabledrag behaviour, we need to assign each row of the
 156     // table a class attribute of &#039;draggable&#039;. This will add the &#039;draggable&#039;
 157     // class to the &lt;tr&gt; element for that row when the final table is
 158     // rendered.
 159     $class = array(&#039;draggable&#039;);
 160 
 161     // We can add the &#039;tabledrag-root&#039; class to a row in order to indicate
 162     // that the row may not be nested under a parent row.  In our sample data
 163     // for this example, the description for the item with id &#039;8&#039; flags it as
 164     // a &#039;root&#039; item which should not be nested.
 165     if ($id == &#039;8&#039;) {
 166       $class[] = &#039;tabledrag-root&#039;;
 167     }
 168 
 169     // We can add the &#039;tabledrag-leaf&#039; class to a row in order to indicate
 170     // that the row may not contain child rows.  In our sample data for this
 171     // example, the description for the item with id &#039;9&#039; flags it as a &#039;leaf&#039;
 172     // item which can not contain child items.
 173     if ($id == &#039;9&#039;) {
 174       $class[] = &#039;tabledrag-leaf&#039;;
 175     }
 176 
 177     // If this is a child element, we need to add some indentation to the row,
 178     // so that it appears nested under its parent.  Our $depth parameter was
 179     // calculated while building the tree in tabledrag_example_parent_get_data
 180     $indent = theme(&#039;indentation&#039;, array(&#039;size&#039; =&gt; $form[&#039;example_items&#039;][$id][&#039;depth&#039;][&#039;#value&#039;]));
 181     unset($form[&#039;example_items&#039;][$id][&#039;depth&#039;]);
 182 
 183     // We are now ready to add each element of our $form data to the $rows
 184     // array, so that they end up as individual table cells when rendered
 185     // in the final table.  We run each element through the drupal_render()
 186     // function to generate the final html markup for that element.
 187     $rows[] = array(
 188       &#039;data&#039; =&gt; array(
 189         // Add our &#039;name&#039; column, being sure to include our indentation.
 190         $indent . drupal_render($form[&#039;example_items&#039;][$id][&#039;name&#039;]),
 191         // Add our &#039;description&#039; column.
 192         drupal_render($form[&#039;example_items&#039;][$id][&#039;description&#039;]),
 193         // Add our &#039;weight&#039; column.
 194         drupal_render($form[&#039;example_items&#039;][$id][&#039;weight&#039;]),
 195         // Add our hidden &#039;id&#039; column.
 196         drupal_render($form[&#039;example_items&#039;][$id][&#039;id&#039;]),
 197         // Add our hidden &#039;parent id&#039; column.
 198         drupal_render($form[&#039;example_items&#039;][$id][&#039;pid&#039;]),
 199       ),
 200       // To support the tabledrag behaviour, we need to assign each row of the
 201       // table a class attribute of &#039;draggable&#039;. This will add the &#039;draggable&#039;
 202       // class to the &lt;tr&gt; element for that row when the final table is
 203       // rendered.
 204       &#039;class&#039; =&gt; $class,
 205     );
 206   }
 207 
 208   // We now define the table header values.  Ensure that the &#039;header&#039; count
 209   // matches the final column count for your table.
 210   //
 211   // Normally, we would hide the headers on our hidden columns, but we are
 212   // leaving them visible in this example.
 213   // $header = array(t(&#039;Name&#039;), t(&#039;Description&#039;), &#039;&#039;, &#039;&#039;, &#039;&#039;);
 214   $header = array(t(&#039;Name&#039;), t(&#039;Description&#039;), t(&#039;Weight&#039;), t(&#039;ID&#039;), t(&#039;PID&#039;));
 215 
 216   // We also need to pass the drupal_add_tabledrag() function an id which will
 217   // be used to identify the &lt;table&gt; element containing our tabledrag form.
 218   // Because an element&#039;s &#039;id&#039; should be unique on a page, make sure the value
 219   // you select is NOT the same as the form ID used in your form declaration.
 220   $table_id = &#039;example-items-table&#039;;
 221 
 222   // We can render our tabledrag table for output.
 223   $output = theme(&#039;table&#039;, array(
 224     &#039;header&#039; =&gt; $header,
 225     &#039;rows&#039; =&gt; $rows,
 226     &#039;attributes&#039; =&gt; array(&#039;id&#039; =&gt; $table_id),
 227   ));
 228 
 229   // And then render any remaining form elements (such as our submit button).
 230   $output .= drupal_render_children($form);
 231 
 232   // We now call the drupal_add_tabledrag() function in order to add the
 233   // tabledrag.js goodness onto our page.
 234   //
 235   // For our parent/child tree table, we need to pass it:
 236   // - the $table_id of our &lt;table&gt; element (example-items-table),
 237   // - the $action to be performed on our form items (&#039;match&#039;),
 238   // - a string describing where $action should be applied (&#039;parent&#039;),
 239   // - the $group value (pid column) class name (&#039;example-item-pid&#039;),
 240   // - the $subgroup value (pid column) class name (&#039;example-item-pid&#039;),
 241   // - the $source value (id column) class name (&#039;example-item-id&#039;),
 242   // - an optional $hidden flag identifying if the columns should be hidden,
 243   // - an optional $limit parameter to control the max parenting depth.
 244   drupal_add_tabledrag($table_id, &#039;match&#039;, &#039;parent&#039;, &#039;example-item-pid&#039;, &#039;example-item-pid&#039;, &#039;example-item-id&#039;, FALSE);
 245 
 246   // Because we also want to sort in addition to providing parenting, we call
 247   // the drupal_add_tabledrag function again, instructing it to update the
 248   // weight field as items at the same level are re-ordered.
 249   drupal_add_tabledrag($table_id, &#039;order&#039;, &#039;sibling&#039;, &#039;example-item-weight&#039;, NULL, NULL, FALSE);
 250 
 251   return $output;
 252 }
 253 
 254 /**
 255  * Submit callback for the tabledrag_example_parent_form form.
 256  *
 257  * Updates the &#039;weight&#039; column for each element in our table, taking into
 258  * account that item&#039;s new order after the drag and drop actions have been
 259  * performed.
 260  *
 261  * @ingroup tabledrag_example
 262  */
 263 function tabledrag_example_parent_form_submit($form, &amp;$form_state) {
 264   // Because the form elements were keyed with the item ids from the database,
 265   // we can simply iterate through the submitted values.
 266   foreach ($form_state[&#039;values&#039;][&#039;example_items&#039;] as $id =&gt; $item) {
 267     db_query(
 268       &quot;UPDATE {tabledrag_example} SET weight = :weight, pid = :pid WHERE id = :id&quot;,
 269       array(&#039;:weight&#039; =&gt; $item[&#039;weight&#039;], &#039;:pid&#039; =&gt; $item[&#039;pid&#039;], &#039;:id&#039; =&gt; $id)
 270     );
 271   }
 272 }
 273 
 274 /**
 275  * Retrives the tree structure from database, and sorts by parent/child/weight.
 276  *
 277  * The sorting should result in children items immediately following their
 278  * parent items, with items at the same level of the hierarchy sorted by
 279  * weight.
 280  *
 281  * The approach used here may be considered too database-intensive.
 282  * Optimization of the approach is left as an exercise for the reader. :)
 283  *
 284  * @ingroup tabledrag_example
 285  */
 286 function tabledrag_example_parent_get_data() {
 287   // Get all &#039;root node&#039; items (items with no parents), sorted by weight.
 288   $rootnodes = db_query(&#039;SELECT id, name, description, weight, pid
 289                        FROM {tabledrag_example}
 290                        WHERE (pid = 0)
 291                        ORDER BY weight ASC&#039;);
 292   // Initialize a variable to store our ordered tree structure.
 293   $itemtree = array();
 294   // Depth will be incremented in our _get_tree() function for the first
 295   // parent item, so we start it at -1.
 296   $depth = -1;
 297   // Loop through the root nodes, and add their trees to the array.
 298   foreach ($rootnodes as $parent) {
 299     tabledrag_example_get_tree($parent, $itemtree, $depth);
 300   }
 301   return $itemtree;
 302 }
 303 
 304 /**
 305  * Recursively adds to the $itemtree array, ordered by parent/child/weight.
 306  *
 307  * @ingroup tabledrag_example
 308  */
 309 function tabledrag_example_get_tree($parentitem, &amp;$itemtree = array(), &amp;$depth = 0) {
 310   // Increase our $depth value by one.
 311   $depth++;
 312   // Set the current tree &#039;depth&#039; for this item, used to calculate indentation.
 313   $parentitem-&gt;depth = $depth;
 314   // Add the parent item to the tree.
 315   $itemtree[$parentitem-&gt;id] = $parentitem;
 316   // Retrieve each of the children belonging to this parent.
 317   $children = db_query(&#039;SELECT id, name, description, weight, pid
 318                       FROM {tabledrag_example}
 319                       WHERE (pid = :pid)
 320                       ORDER BY weight ASC&#039;,
 321                       array(&#039;:pid&#039; =&gt; $parentitem-&gt;id));
 322   foreach ($children as $child) {
 323     // Make sure this child does not already exist in the tree, to avoid loops.
 324     if (!in_array($child-&gt;id, array_keys($itemtree))) {
 325       // Add this child&#039;s tree to the $itemtree array.
 326       tabledrag_example_get_tree($child, $itemtree, $depth);
 327     }
 328   }
 329   // Finished processing this tree branch.  Decrease our $depth value by one
 330   // to represent moving to the next branch.
 331   $depth--;
 332   // Return.
 333   return;
 334 }</pre>

</div>
<!-- EDIT5 SECTION "tabledrag_example_parent_form.inc" [7985-23662] -->
<h2 class="sectionedit6" id="tabledrag_example_simple_forminc">tabledrag_example_simple_form.inc</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Example demonstrating a simple (i.e. &#039;sort&#039; only) tabledrag form
   5  */
   6 
   7 /**
   8  * Build the tabledrag_simple_example_form form.
   9  *
  10  * @return
  11  *   A form array set for theming by theme_tabledrag_example_simple_form()
  12  *
  13  * @ingroup tabledrag_example
  14  */
  15 function tabledrag_example_simple_form($form_state) {
  16   // Identify that the elements in &#039;example_items&#039; are a collection, to
  17   // prevent Form API from flattening the array when submitted.
  18   $form[&#039;example_items&#039;][&#039;#tree&#039;] = TRUE;
  19 
  20   // Fetch the example data from the database, ordered by weight ascending.
  21   //
  22   // This query excludes the last two tabledrag_example database rows, as
  23   // they are intended only for the &#039;parent/child&#039; tabledrag examples.
  24   $result = db_query(&#039;SELECT id, name, description, weight FROM {tabledrag_example} WHERE id &lt; 8 ORDER BY weight ASC&#039;);
  25 
  26   // Iterate through each database result.
  27   foreach ($result as $item) {
  28 
  29     // Create a form entry for this item.
  30     //
  31     // Each entry will be an array using the the unique id for that item as
  32     // the array key, and an array of table row data as the value.
  33     $form[&#039;example_items&#039;][$item-&gt;id] = array(
  34 
  35       // We&#039;ll use a form element of type &#039;#markup&#039; to display the item name.
  36       &#039;name&#039; =&gt; array(
  37         &#039;#markup&#039; =&gt; check_plain($item-&gt;name),
  38       ),
  39 
  40       // We&#039;ll use a form element of type &#039;#textfield&#039; to display the item
  41       // description, which will allow the value to be changed via the form.
  42       // We limit the input to 255 characters, which is the limit we set on
  43       // the database field.
  44       &#039;description&#039; =&gt; array(
  45         &#039;#type&#039; =&gt; &#039;textfield&#039;,
  46         &#039;#default_value&#039; =&gt; check_plain($item-&gt;description),
  47         &#039;#size&#039; =&gt; 20,
  48         &#039;#maxlength&#039; =&gt; 255,
  49       ),
  50 
  51       // The &#039;weight&#039; field will be manipulated as we move the items around in
  52       // the table using the tabledrag activity.  We use the &#039;weight&#039; element
  53       // defined in Drupal&#039;s Form API.
  54       &#039;weight&#039; =&gt; array(
  55         &#039;#type&#039; =&gt; &#039;weight&#039;,
  56         &#039;#title&#039; =&gt; t(&#039;Weight&#039;),
  57         &#039;#default_value&#039; =&gt; $item-&gt;weight,
  58         &#039;#delta&#039; =&gt; 10,
  59         &#039;#title-display&#039; =&gt; &#039;invisible&#039;,
  60       ),
  61     );
  62   }
  63 
  64   // Now we add our submit button, for submitting the form results.
  65   //
  66   // The &#039;actions&#039; wrapper used here isn&#039;t strictly necessary for tabledrag,
  67   // but is included as a Form API recommended practice.
  68   $form[&#039;actions&#039;] = array(&#039;#type&#039; =&gt; &#039;actions&#039;);
  69   $form[&#039;actions&#039;][&#039;submit&#039;] = array(&#039;#type&#039; =&gt; &#039;submit&#039;, &#039;#value&#039; =&gt; t(&#039;Save Changes&#039;));
  70   return $form;
  71 }
  72 
  73 /**
  74  * Theme callback for the tabledrag_example_simple_form form.
  75  *
  76  * The theme callback will format the $form data structure into a table and
  77  * add our tabledrag functionality.  (Note that drupal_add_tabledrag should be
  78  * called from the theme layer, and not from a form declaration.  This helps
  79  * keep template files clean and readable, and prevents tabledrag.js from
  80  * being added twice accidently.
  81  *
  82  * @return
  83  *   The rendered tabledrag form
  84  *
  85  * @ingroup tabledrag_example
  86  */
  87 function theme_tabledrag_example_simple_form($variables) {
  88   $form = $variables[&#039;form&#039;];
  89 
  90   // Initialize the variable which will store our table rows.
  91   $rows = array();
  92 
  93   // Iterate over each element in our $form[&#039;example_items&#039;] array.
  94   foreach (element_children($form[&#039;example_items&#039;]) as $id) {
  95 
  96     // Before we add our &#039;weight&#039; column to the row, we need to give the
  97     // element a custom class so that it can be identified in the
  98     // drupal_add_tabledrag call.
  99     //
 100     // This could also have been done during the form declaration by adding
 101     // &#039;#attributes&#039; =&gt; array(&#039;class&#039; =&gt; &#039;example-item-weight&#039;),
 102     // directy to the &#039;weight&#039; element in tabledrag_example_simple_form().
 103     $form[&#039;example_items&#039;][$id][&#039;weight&#039;][&#039;#attributes&#039;][&#039;class&#039;] = array(&#039;example-item-weight&#039;);
 104 
 105     // We are now ready to add each element of our $form data to the $rows
 106     // array, so that they end up as individual table cells when rendered
 107     // in the final table.  We run each element through the drupal_render()
 108     // function to generate the final html markup for that element.
 109     $rows[] = array(
 110       &#039;data&#039; =&gt; array(
 111         // Add our &#039;name&#039; column.
 112         drupal_render($form[&#039;example_items&#039;][$id][&#039;name&#039;]),
 113         // Add our &#039;description&#039; column.
 114         drupal_render($form[&#039;example_items&#039;][$id][&#039;description&#039;]),
 115         // Add our &#039;weight&#039; column.
 116         drupal_render($form[&#039;example_items&#039;][$id][&#039;weight&#039;]),
 117       ),
 118       // To support the tabledrag behaviour, we need to assign each row of the
 119       // table a class attribute of &#039;draggable&#039;. This will add the &#039;draggable&#039;
 120       // class to the &lt;tr&gt; element for that row when the final table is
 121       // rendered.
 122       &#039;class&#039; =&gt; array(&#039;draggable&#039;),
 123     );
 124   }
 125 
 126   // We now define the table header values.  Ensure that the &#039;header&#039; count
 127   // matches the final column count for your table.
 128   $header = array(t(&#039;Name&#039;), t(&#039;Description&#039;), t(&#039;Weight&#039;));
 129 
 130   // We also need to pass the drupal_add_tabledrag() function an id which will
 131   // be used to identify the &lt;table&gt; element containing our tabledrag form.
 132   // Because an element&#039;s &#039;id&#039; should be unique on a page, make sure the value
 133   // you select is NOT the same as the form ID used in your form declaration.
 134   $table_id = &#039;example-items-table&#039;;
 135 
 136   // We can render our tabledrag table for output.
 137   $output = theme(&#039;table&#039;, array(
 138     &#039;header&#039; =&gt; $header,
 139     &#039;rows&#039; =&gt; $rows,
 140     &#039;attributes&#039; =&gt; array(&#039;id&#039; =&gt; $table_id),
 141   ));
 142 
 143   // And then render any remaining form elements (such as our submit button).
 144   $output .= drupal_render_children($form);
 145 
 146   // We now call the drupal_add_tabledrag() function in order to add the
 147   // tabledrag.js goodness onto our page.
 148   //
 149   // For a basic sortable table, we need to pass it:
 150   // - the $table_id of our &lt;table&gt; element,
 151   // - the $action to be performed on our form items (&#039;order&#039;),
 152   // - a string describing where $action should be applied (&#039;siblings&#039;),
 153   // - and the class of the element containing our &#039;weight&#039; element.
 154   drupal_add_tabledrag($table_id, &#039;order&#039;, &#039;sibling&#039;, &#039;example-item-weight&#039;);
 155 
 156   return $output;
 157 }
 158 
 159 /**
 160  * Submit callback for the tabledrag_example_simple_form form.
 161  *
 162  * Updates the &#039;weight&#039; column for each element in our table, taking into
 163  * account that item&#039;s new order after the drag and drop actions have been
 164  * performed.
 165  *
 166  * @ingroup tabledrag_example
 167  */
 168 function tabledrag_example_simple_form_submit($form, &amp;$form_state) {
 169   // Because the form elements were keyed with the item ids from the database,
 170   // we can simply iterate through the submitted values.
 171   foreach ($form_state[&#039;values&#039;][&#039;example_items&#039;] as $id =&gt; $item) {
 172     db_query(
 173       &quot;UPDATE {tabledrag_example} SET weight = :weight WHERE id = :id&quot;,
 174       array(&#039;:weight&#039; =&gt; $item[&#039;weight&#039;], &#039;:id&#039; =&gt; $id)
 175     );
 176   }
 177 }</pre>

</div>
<!-- EDIT6 SECTION "tabledrag_example_simple_form.inc" [23663-] -->