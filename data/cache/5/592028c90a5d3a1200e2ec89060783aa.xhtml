
<h1 class="sectionedit1" id="page_example">Page Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Page Example" [1-28] -->
<h2 class="sectionedit2" id="page_exampleinfo">page_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Page example
   2 description = An example module showing how to define a page to be displayed to the user at a given URL.
   3 package = Example modules
   4 core = 7.x
   5 files[] = page_example.test</pre>

</div>
<!-- EDIT2 SECTION "page_example.info" [29-288] -->
<h2 class="sectionedit3" id="page_examplemodule">page_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Module file for page_example_module.
   6  */
   7 
   8 /**
   9  * @defgroup page_example Example: Page
  10  * @ingroup examples
  11  * @{
  12  * This example demonstrates how a module can display a page at a given URL.
  13  *
  14  * It&#039;s important to understand how the menu system works in order to
  15  * implement your own pages. See the Menu Example module for some insight.
  16  *
  17  * @see menu_example
  18  */
  19 
  20 /**
  21  * Implements hook_help().
  22  *
  23  * Through hook_help(), a module can make documentation available to the user
  24  * for the module as a whole or for specific paths. Where the help appears
  25  * depends on the $path specified.
  26  *
  27  * In the first example below, the help text will appear on the simple page
  28  * defined in hook_menu below in the region designated for help text.
  29  *
  30  * In the second example, the text will be available through the module page as
  31  * a link beside the module or on the admin help page (admin/help) in the list
  32  * of help topics using the name of the module. To specify help in the admin
  33  * section use the module name in the path as in the second case below.
  34  *
  35  * @see hook_help()
  36  */
  37 function page_example_help($path, $arg) {
  38   switch ($path) {
  39     case &#039;examples/page_example/simple&#039;:
  40       // Help text for the simple page registered for this path.
  41       return t(&#039;This is help text for the simple page.&#039;);
  42 
  43     case &#039;admin/help#page_example&#039;:
  44       // Help text for the admin section, using the module name in the path.
  45       return t(&#039;This is help text created in the page example\&#039;s second case.&#039;);
  46   }
  47 }
  48 
  49 /**
  50  * Implements hook_permission().
  51  *
  52  * Since the access to our new custom pages will be granted based on
  53  * special permissions, we need to define what those permissions are here.
  54  * This ensures that they are available to enable on the user role
  55  * administration pages.
  56  */
  57 function page_example_permission() {
  58   return array(
  59     &#039;access simple page&#039; =&gt; array(
  60       &#039;title&#039; =&gt; t(&#039;Access simple page&#039;),
  61       &#039;description&#039; =&gt; t(&#039;Allow users to access simple page&#039;),
  62     ),
  63     &#039;access arguments page&#039; =&gt; array(
  64       &#039;title&#039; =&gt; t(&#039;Access page with arguments&#039;),
  65       &#039;description&#039; =&gt; t(&#039;Allow users to access page with arguments&#039;),
  66     ),
  67   );
  68 }
  69 
  70 /**
  71  * Implements hook_menu().
  72  *
  73  * Because hook_menu() registers URL paths for items defined by the function, it
  74  * is necessary for modules that create pages. Each item can also specify a
  75  * callback function for a given URL. The menu items returned here provide this
  76  * information to the menu system.
  77  *
  78  * We will define some menus, and their paths will be interpreted as follows:
  79  *
  80  * If the user accesses http://example.com/?q=examples/page_example/simple,
  81  * the menu system will first look for a menu item with that path. In this case
  82  * it will find a match, and execute page_example_simple().
  83  *
  84  * If the user accesses http://example.com/?q=examples/page_example/arguments,
  85  * the menu system will find no explicit match, and will fall back to the
  86  * closest match, &#039;examples/page_example&#039;, executing page_example_description().
  87  *
  88  * If the user accesses
  89  * http://example.com/?q=examples/page_example/arguments/1/2, the menu
  90  * system will first look for examples/page_example/arguments/1/2. Not finding
  91  * a match, it will look for examples/page_example/arguments/1/%. Again not
  92  * finding a match, it will look for examples/page_example/arguments/%/2.
  93  * Yet again not finding a match, it will look for
  94  * examples/page_example/arguments/%/%. This time it finds a match, and so will
  95  * execute page_example_arguments(1, 2). Since the parameters are passed to
  96  * the function after the match, the function can do additional checking or
  97  * make use of them before executing the callback function.
  98  *
  99  * @see hook_menu()
 100  * @see menu_example
 101  */
 102 function page_example_menu() {
 103 
 104   // This is the minimum information you can provide for a menu item. This menu
 105   // item will be created in the default menu, usually Navigation.
 106   $items[&#039;examples/page_example&#039;] = array(
 107     &#039;title&#039; =&gt; &#039;Page Example&#039;,
 108     &#039;page callback&#039; =&gt; &#039;page_example_description&#039;,
 109     &#039;access callback&#039; =&gt; TRUE,
 110     &#039;expanded&#039; =&gt; TRUE,
 111   );
 112 
 113   $items[&#039;examples/page_example/simple&#039;] = array(
 114     &#039;title&#039; =&gt; &#039;Simple - no arguments&#039;,
 115     &#039;page callback&#039; =&gt; &#039;page_example_simple&#039;,
 116     &#039;access arguments&#039; =&gt; array(&#039;access simple page&#039;),
 117   );
 118 
 119   // By using the MENU_CALLBACK type, we can register the callback for this
 120   // path without the item appearing in the menu; the admin cannot enable the
 121   // item in the menu, either.
 122   //
 123   // Notice that &#039;page arguments&#039; is an array of numbers. These will be
 124   // replaced with the corresponding parts of the menu path. In this case a 0
 125   // would be replaced by &#039;example&#039;, a 1 by &#039;page_example&#039;, and a 2 by
 126   // &#039;arguments.&#039; 3 and 4 will be replaced by whatever the user provides.
 127   // These will be passed as arguments to the page_example_arguments() function.
 128   $items[&#039;examples/page_example/arguments/%/%&#039;] = array(
 129     &#039;page callback&#039; =&gt; &#039;page_example_arguments&#039;,
 130     &#039;page arguments&#039; =&gt; array(3, 4),
 131     &#039;access arguments&#039; =&gt; array(&#039;access arguments page&#039;),
 132     &#039;type&#039; =&gt; MENU_CALLBACK,
 133   );
 134 
 135   return $items;
 136 }
 137 
 138 /**
 139  * Constructs a descriptive page.
 140  *
 141  * Our menu maps this function to the path &#039;examples/page_example&#039;.
 142  *
 143  */
 144 function page_example_description() {
 145   return array(&#039;#markup&#039; =&gt; t(&#039;&lt;p&gt;The page_example provides two pages, &quot;simple&quot; and &quot;arguments&quot;.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;@simple_link&quot;&gt;simple page&lt;/a&gt; just returns a renderable array for display.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;@arguments_link&quot;&gt;arguments page&lt;/a&gt; takes two arguments and displays them, as in @arguments_link&lt;/p&gt;&#039;, array(&#039;@simple_link&#039; =&gt; url(&#039;examples/page_example/simple&#039;, array(&#039;absolute&#039; =&gt; TRUE)), &#039;@arguments_link&#039; =&gt; url(&#039;examples/page_example/arguments/23/56&#039;, array(&#039;absolute&#039; =&gt; TRUE)))));
 146 }
 147 
 148 /**
 149  * Constructs a simple page.
 150  *
 151  * The simple page callback, mapped to the path &#039;examples/page_example/simple&#039;.
 152  *
 153  * Page callbacks return a renderable array with the content area of the page.
 154  * The theme system will later render and surround the content in the
 155  * appropriate blocks, navigation, and styling.
 156  *
 157  * If you do not want to use the theme system (for example for outputting an
 158  * image or XML), you should print the content yourself and not return anything.
 159  */
 160 function page_example_simple() {
 161   return array(&#039;#markup&#039; =&gt; &#039;&lt;p&gt;&#039; . t(&#039;Simple page: The quick brown fox jumps over the lazy dog.&#039;) . &#039;&lt;/p&gt;&#039;);
 162 }
 163 
 164 /**
 165  * A more complex page callback that takes arguments.
 166  *
 167  * This callback is mapped to the path &#039;examples/page_example/arguments/%/%&#039;.
 168  *
 169  * The % arguments are passed in from the page URL. In our hook_menu
 170  * implementation we instructed the menu system to extract the last two
 171  * parameters of the path and pass them to this function as arguments.
 172  *
 173  * This function also demonstrates a more complex render array in the returned
 174  * values. Instead of just rendering the HTML with a theme(&#039;item_list&#039;), the
 175  * list is left unrendered, and a #theme attached to it so that it can be
 176  * rendered as late as possible, giving more parts of the system a chance to
 177  * change it if necessary.
 178  *
 179  * Consult @link http://drupal.org/node/930760 Render Arrays documentation
 180  * @endlink for details.
 181  */
 182 function page_example_arguments($first, $second) {
 183   // Make sure you don&#039;t trust the URL to be safe! Always check for exploits.
 184   if (!is_numeric($first) || !is_numeric($second)) {
 185     // We will just show a standard &quot;access denied&quot; page in this case.
 186     drupal_access_denied();
 187     return;  // We actually don&#039;t get here.
 188   }
 189 
 190   $list[] = t(&quot;First number was @number.&quot;, array(&#039;@number&#039; =&gt; $first));
 191   $list[] = t(&quot;Second number was @number.&quot;, array(&#039;@number&#039; =&gt; $second));
 192   $list[] = t(&#039;The total was @number.&#039;, array(&#039;@number&#039; =&gt; $first + $second));
 193 
 194   $render_array[&#039;page_example_arguments&#039;] = array(
 195     &#039;#theme&#039; =&gt; &#039;item_list&#039;,  // The theme function to apply to the #items
 196     &#039;#items&#039; =&gt; $list,  // The list itself.
 197     &#039;#title&#039; =&gt; t(&#039;Argument Information&#039;),
 198   );
 199   return $render_array;
 200 }
 201 /**
 202  * @} End of &quot;defgroup page_example&quot;.
 203  */</pre>

</div>
<!-- EDIT3 SECTION "page_example.module" [289-9401] -->
<h2 class="sectionedit4" id="page_exampletest">page_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Test case for Testing the page example module.
   6  *
   7  * This file contains the test cases to check if module is performing as
   8  * expected.
   9  *
  10  */
  11 class PageExampleTestCase extends DrupalWebTestCase {
  12   protected $web_user;
  13 
  14   public static function getInfo() {
  15     return array(
  16       &#039;name&#039; =&gt; &#039;Page example functionality&#039;,
  17       &#039;description&#039; =&gt; &#039;Creates page and render the content based on the arguments passed in the URL.&#039;,
  18       &#039;group&#039; =&gt; &#039;Examples&#039;,
  19     );
  20   }
  21 
  22   /**
  23    * Enable modules and create user with specific permissions.
  24    */
  25   function setUp() {
  26     parent::setUp(&#039;page_example&#039;);
  27   }
  28 
  29   /**
  30    * Generates a random string of ASCII numeric characters (values 48 to 57).
  31    *
  32    * @param $length
  33    *   Length of random string to generate .
  34    * @return
  35    *   Randomly generated string.
  36    */
  37   private static function randomNumber($length = 8) {
  38     $str = &#039;&#039;;
  39     for ($i = 0; $i &lt; $length; $i++) {
  40       $str .= chr(mt_rand(48, 57));
  41     }
  42     return $str;
  43   }
  44 
  45   /**
  46    * Verify that current user has no access to page.
  47    *
  48    * @param $url
  49    *   URL to verify.
  50    */
  51   function pageExampleVerifyNoAccess($url) {
  52     // Test that page returns 403 Access Denied
  53     $this-&gt;drupalGet($url);
  54     $this-&gt;assertResponse(403);
  55   }
  56 
  57   /**
  58    * Login user, create an example node, and test blog functionality through the admin and user interfaces.
  59    */
  60   function testPageExampleBasic() {
  61 
  62     // Verify that anonymous user can&#039;t access the pages created by
  63     // page_example module
  64     $this-&gt;pageExampleVerifyNoAccess(&#039;examples/page_example/simple&#039;);
  65     $this-&gt;pageExampleVerifyNoAccess(&#039;examples/page_example/arguments/1/2&#039;);
  66 
  67     // Create a regular user and login.
  68     $this-&gt;web_user = $this-&gt;drupalCreateUser();
  69     $this-&gt;drupalLogin($this-&gt;web_user);
  70 
  71     // Verify that regular user can&#039;t access the pages created by
  72     // page_example module
  73     $this-&gt;pageExampleVerifyNoAccess(&#039;examples/page_example/simple&#039;);
  74     $this-&gt;pageExampleVerifyNoAccess(&#039;examples/page_example/arguments/1/2&#039;);
  75 
  76     // Create a user with permissions to access &#039;simple&#039; page and login.
  77     $this-&gt;web_user = $this-&gt;drupalCreateUser(array(&#039;access simple page&#039;));
  78     $this-&gt;drupalLogin($this-&gt;web_user);
  79 
  80     // Verify that user can access simple content
  81     $this-&gt;drupalGet(&#039;examples/page_example/simple&#039;);
  82     $this-&gt;assertResponse(200, &#039;simple content successfully accessed.&#039;);
  83     $this-&gt;assertText(t(&#039;The quick brown fox jumps over the lazy dog.&#039;), &#039;Simple content successfully verified.&#039;);
  84 
  85     // Check if user can&#039;t access arguments page
  86     $this-&gt;pageExampleVerifyNoAccess(&#039;examples/page_example/arguments/1/2&#039;);
  87 
  88 
  89 
  90     // Create a user with permissions to access &#039;simple&#039; page and login.
  91     $this-&gt;web_user = $this-&gt;drupalCreateUser(array(&#039;access arguments page&#039;));
  92     $this-&gt;drupalLogin($this-&gt;web_user);
  93 
  94     // Verify that user can access simple content
  95     $first = $this-&gt;randomNumber(3);
  96     $second = $this-&gt;randomNumber(3);
  97     $this-&gt;drupalGet(&#039;examples/page_example/arguments/&#039; . $first . &#039;/&#039; . $second);
  98     $this-&gt;assertResponse(200, &#039;arguments content successfully accessed.&#039;);
  99     // Verify argument usage
 100     $this-&gt;assertRaw(t(&quot;First number was @number.&quot;, array(&#039;@number&#039; =&gt; $first)), &#039;arguments first argument successfully verified.&#039;);
 101     $this-&gt;assertRaw(t(&quot;Second number was @number.&quot;, array(&#039;@number&#039; =&gt; $second)), &#039;arguments second argument successfully verified.&#039;);
 102     $this-&gt;assertRaw(t(&#039;The total was @number.&#039;, array(&#039;@number&#039; =&gt; $first + $second)), &#039;arguments content successfully verified.&#039;);
 103 
 104     // Verify incomplete argument call to arguments content
 105     $this-&gt;drupalGet(&#039;examples/page_example/arguments/&#039; . $first . &#039;/&#039;);
 106     $this-&gt;assertText(&quot;provides two pages&quot;);
 107 
 108     // Verify invalid argument call to arguments content
 109     $this-&gt;drupalGet(&#039;examples/page_example/arguments/&#039; . $first . &#039;/&#039; . $this-&gt;randomString());
 110     $this-&gt;assertResponse(403, &#039;Invalid argument for arguments content successfully verified&#039;);
 111 
 112     // Verify invalid argument call to arguments content
 113     $this-&gt;drupalGet(&#039;examples/page_example/arguments/&#039; . $this-&gt;randomString() . &#039;/&#039; . $second);
 114     $this-&gt;assertResponse(403, &#039;Invalid argument for arguments content successfully verified&#039;);
 115 
 116     // Check if user can&#039;t access simple page
 117     $this-&gt;pageExampleVerifyNoAccess(&#039;examples/page_example/simple&#039;);
 118   }
 119 }</pre>

</div>
<!-- EDIT4 SECTION "page_example.test" [9402-] -->