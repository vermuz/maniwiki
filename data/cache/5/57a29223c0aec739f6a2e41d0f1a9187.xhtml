
<h1 class="sectionedit1" id="field_example">Field Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Field Example" [1-29] -->
<h2 class="sectionedit2" id="field_examplecss">field_example.css</h2>
<div class="level2">
<pre class="code">   1 /**
   2  * @file
   3  * CSS for Field Example.
   4  */
   5 div.form-item table .form-type-textfield, 
   6 div.form-item table .form-type-textfield * {
   7   display: inline-block;
   8 }</pre>

</div>
<!-- EDIT2 SECTION "field_example.css" [30-273] -->
<h2 class="sectionedit3" id="field_exampleinfo">field_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Field Example
   2 description = An implementation of a field to show the Field API
   3 package = Example modules
   4 core = 7.x
   5 files[] = field_example.test</pre>

</div>
<!-- EDIT3 SECTION "field_example.info" [274-496] -->
<h2 class="sectionedit4" id="field_exampleinstall">field_example.install</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Install, update, and uninstall functions for the field_example module.
   5  */
   6 
   7 /**
   8  * Implements hook_field_schema().
   9  *
  10  * Defines the database schema of the field, using the format used by the
  11  * Schema API.
  12  *
  13  * The data we will store here is just one 7-character element, even
  14  * though the widget presents the three portions separately.
  15  *
  16  * All implementations of hook_field_schema() must be in the module&#039;s
  17  * .install file.
  18  *
  19  * @see http://drupal.org/node/146939
  20  * @see schemaapi
  21  * @see hook_field_schema()
  22  * @ingroup field_example
  23  */
  24 function field_example_field_schema($field) {
  25   $columns = array(
  26     &#039;rgb&#039; =&gt; array(&#039;type&#039; =&gt; &#039;varchar&#039;, &#039;length&#039; =&gt; 7, &#039;not null&#039; =&gt; FALSE),
  27   );
  28   $indexes = array(
  29     &#039;rgb&#039; =&gt; array(&#039;rgb&#039;),
  30   );
  31   return array(
  32     &#039;columns&#039; =&gt; $columns,
  33     &#039;indexes&#039; =&gt; $indexes,
  34   );
  35 }</pre>

</div>
<!-- EDIT4 SECTION "field_example.install" [497-1567] -->
<h2 class="sectionedit5" id="field_examplejs">field_example.js</h2>
<div class="level2">
<pre class="code">   1 /**
   2  * @file
   3  * Javascript for Field Example.
   4  */
   5 
   6 /**
   7  * Provides a farbtastic colorpicker for the fancier widget.
   8  */
   9 (function ($) {
  10   Drupal.behaviors.field_example_colorpicker = {
  11     attach: function(context) {
  12       $(&quot;.edit-field-example-colorpicker&quot;).live(&quot;focus&quot;, function(event) {
  13         var edit_field = this;
  14         var picker = $(this).closest(&#039;div&#039;).parent().find(&quot;.field-example-colorpicker&quot;);
  15         
  16         // Hide all color pickers except this one.
  17         $(&quot;.field-example-colorpicker&quot;).hide();
  18         $(picker).show();
  19         $.farbtastic(picker, function(color) {
  20           edit_field.value = color;
  21         }).setColor(edit_field.value);
  22       });
  23     }
  24   }
  25 })(jQuery);</pre>

</div>
<!-- EDIT5 SECTION "field_example.js" [1568-2436] -->
<h2 class="sectionedit6" id="field_examplemodule">field_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * An example field using the Field Types API.
   5  */
   6 
   7 /**
   8  * @defgroup field_example Example: Field Types API
   9  * @ingroup examples
  10  * @{
  11  * Examples using Field Types API.
  12  *
  13  * This is updated from Barry Jaspan&#039;s presentation at Drupalcon Paris,
  14  * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
  15  *
  16  * Providing a field requires:
  17  * - Defining a field:
  18  *   - hook_field_info()
  19  *   - hook_field_schema()
  20  *   - hook_field_validate()
  21  *   - hook_field_is_empty()
  22  *
  23  * - Defining a formatter for the field (the portion that outputs the field for
  24  *   display):
  25  *   - hook_field_formatter_info()
  26  *   - hook_field_formatter_view()
  27  *
  28  * - Defining a widget for the edit form:
  29  *   - hook_field_widget_info()
  30  *   - hook_field_widget_form()
  31  *
  32  * Our module defines the field in field_example_field_info(),
  33  * field_example_field_validate() and field_example_field_is_empty().
  34  * field_example_field_schema() is implemented in field_example.install.
  35  *
  36  * Our module sets up a formatter in field_example_field_formatter_info() and
  37  * field_example_field_formatter_view(). These are the API hooks that present
  38  * formatted and themed output to the user.
  39 
  40  * And finally, our module defines the widet in
  41  * field_example_field_widget_info() and field_example_field_widget_form().
  42  * The widget is the form element used to receive input from the user
  43  * when the field is being populated.
  44  *
  45  * @see field_types
  46  * @see field
  47  */
  48 
  49 /***************************************************************
  50  * Field Type API hooks
  51  ***************************************************************/
  52 
  53 /**
  54  * Implements hook_field_info().
  55  *
  56  * Provides the description of the field.
  57  */
  58 function field_example_field_info() {
  59   return array(
  60     // We name our field as the associative name of the array.
  61     &#039;field_example_rgb&#039; =&gt; array(
  62       &#039;label&#039; =&gt; t(&#039;Example Color RGB&#039;),
  63       &#039;description&#039; =&gt; t(&#039;Demonstrates a field composed of an RGB color.&#039;),
  64       &#039;default_widget&#039; =&gt; &#039;field_example_3text&#039;,
  65       &#039;default_formatter&#039; =&gt; &#039;field_example_simple_text&#039;,
  66     ),
  67   );
  68 }
  69 
  70 /**
  71  * Implements hook_field_validate().
  72  *
  73  * This hook gives us a chance to validate content that&#039;s in our
  74  * field. We&#039;re really only interested in the $items parameter, since
  75  * it holds arrays representing content in the field we&#039;ve defined.
  76  * We want to verify that the items only contain RGB hex values like
  77  * this: #RRGGBB. If the item validates, we do nothing. If it doesn&#039;t
  78  * validate, we add our own error notification to the $errors parameter.
  79  *
  80  * @see field_example_field_widget_error()
  81  */
  82 function field_example_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors) {
  83   foreach ($items as $delta =&gt; $item) {
  84     if (!empty($item[&#039;rgb&#039;])) {
  85       if (! preg_match(&#039;@^#[0-9a-f]{6}$@&#039;, $item[&#039;rgb&#039;])) {
  86         $errors[$field[&#039;field_name&#039;]][$langcode][$delta][] = array(
  87           &#039;error&#039; =&gt; &#039;field_example_invalid&#039;,
  88           &#039;message&#039; =&gt; t(&#039;Color must be in the HTML format #abcdef.&#039;),
  89         );
  90       }
  91     }
  92   }
  93 }
  94 
  95 
  96 /**
  97  * Implements hook_field_is_empty().
  98  *
  99  * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 100  * Return TRUE if it does not contain data, FALSE if it does. This lets
 101  * the form API flag an error when required fields are empty.
 102  */
 103 function field_example_field_is_empty($item, $field) {
 104   return empty($item[&#039;rgb&#039;]);
 105 }
 106 
 107 /**
 108  * Implements hook_field_formatter_info().
 109  *
 110  * We need to tell Drupal that we have two different types of formatters
 111  * for this field. One will change the text color, and the other will
 112  * change the background color.
 113  *
 114  * @see field_example_field_formatter_view()
 115  */
 116 function field_example_field_formatter_info() {
 117   return array(
 118     // This formatter just displays the hex value in the color indicated.
 119     &#039;field_example_simple_text&#039; =&gt; array(
 120       &#039;label&#039; =&gt; t(&#039;Simple text-based formatter&#039;),
 121       &#039;field types&#039; =&gt; array(&#039;field_example_rgb&#039;),
 122     ),
 123     // This formatter changes the background color of the content region.
 124     &#039;field_example_color_background&#039; =&gt; array(
 125       &#039;label&#039; =&gt; t(&#039;Change the background of the output text&#039;),
 126       &#039;field types&#039; =&gt; array(&#039;field_example_rgb&#039;),
 127     ),
 128   );
 129 }
 130 
 131 /**
 132  * Implements hook_field_formatter_view().
 133  *
 134  * Two formatters are implemented.
 135  * - field_example_simple_text just outputs markup indicating the color that
 136  *   was entered and uses an inline style to set the text color to that value.
 137  * - field_example_color_background does the same but also changes the
 138  *   background color of div.region-content.
 139  *
 140  * @see field_example_field_formatter_info()
 141  */
 142 function field_example_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
 143   $element = array();
 144 
 145   switch ($display[&#039;type&#039;]) {
 146     // This formatter simply outputs the field as text and with a color.
 147     case &#039;field_example_simple_text&#039;:
 148       foreach ($items as $delta =&gt; $item) {
 149         $element[$delta] = array(
 150           // We create a render array to produce the desired markup,
 151           // &quot;&lt;p style=&quot;color: #hexcolor&quot;&gt;The color code ... #hexcolor&lt;/p&gt;&quot;.
 152           // See theme_html_tag().
 153           &#039;#type&#039; =&gt; &#039;html_tag&#039;,
 154           &#039;#tag&#039; =&gt; &#039;p&#039;,
 155           &#039;#attributes&#039; =&gt; array(
 156             &#039;style&#039; =&gt; &#039;color: &#039; . $item[&#039;rgb&#039;],
 157           ),
 158           &#039;#value&#039; =&gt; t(&#039;The color code in this field is @code&#039;, array(&#039;@code&#039; =&gt; $item[&#039;rgb&#039;])),
 159         );
 160       }
 161       break;
 162 
 163     // This formatter adds css to the page changing the &#039;.region-content&#039; area&#039;s
 164     // background color. If there are many fields, the last one will win.
 165     case &#039;field_example_color_background&#039;:
 166       foreach ($items as $delta =&gt; $item) {
 167         $element[$delta] = array(
 168           &#039;#type&#039; =&gt; &#039;html_tag&#039;,
 169           &#039;#tag&#039; =&gt; &#039;p&#039;,
 170           &#039;#value&#039; =&gt; t(&#039;The content area color has been changed to @code&#039;, array(&#039;@code&#039; =&gt; $item[&#039;rgb&#039;])),
 171           &#039;#attached&#039; =&gt; array(
 172             &#039;css&#039; =&gt; array(
 173               array(
 174                 &#039;data&#039; =&gt; &#039;div.region-content { background-color:&#039; . $item[&#039;rgb&#039;] . &#039;;}&#039;,
 175                 &#039;type&#039; =&gt; &#039;inline&#039;,
 176               ),
 177             ),
 178           ),
 179         );
 180       }
 181       break;
 182   }
 183 
 184   return $element;
 185 }
 186 
 187 /**
 188  * Implements hook_field_widget_info().
 189  *
 190  * Three widgets are provided.
 191  * - A simple text-only widget where the user enters the &#039;#ffffff&#039;.
 192  * - A 3-textfield widget that gathers the red, green, and blue values
 193  *   separately.
 194  * - A farbtastic colorpicker widget that chooses the value graphically.
 195  *
 196  * These widget types will eventually show up in hook_field_widget_form,
 197  * where we will have to flesh them out.
 198  *
 199  * @see field_example_field_widget_form()
 200  */
 201 function field_example_field_widget_info() {
 202   return array(
 203     &#039;field_example_text&#039; =&gt; array(
 204       &#039;label&#039; =&gt; t(&#039;RGB value as #ffffff&#039;),
 205       &#039;field types&#039; =&gt; array(&#039;field_example_rgb&#039;),
 206     ),
 207     &#039;field_example_3text&#039; =&gt; array(
 208        &#039;label&#039; =&gt; t(&#039;RGB text field&#039;),
 209        &#039;field types&#039; =&gt; array(&#039;field_example_rgb&#039;),
 210     ),
 211     &#039;field_example_colorpicker&#039; =&gt; array(
 212       &#039;label&#039; =&gt; t(&#039;Color Picker&#039;),
 213       &#039;field types&#039; =&gt; array(&#039;field_example_rgb&#039;),
 214     ),
 215   );
 216 }
 217 
 218 /**
 219  * Implements hook_field_widget_form().
 220  *
 221  * hook_widget_form() is where Drupal tells us to create form elements for
 222  * our field&#039;s widget.
 223  *
 224  * We provide one of three different forms, depending on the widget type of
 225  * the Form API item provided.
 226  *
 227  * The &#039;field_example_colorpicker&#039; and &#039;field_example_text&#039; are essentially
 228  * the same, but field_example_colorpicker adds a javascript colorpicker
 229  * helper.
 230  *
 231  * field_example_3text displays three text fields, one each for red, green,
 232  * and blue. However, the field type defines a single text column,
 233  * rgb, which needs an HTML color spec. Define an element validate
 234  * handler that converts our r, g, and b fields into a simulated single
 235  * &#039;rgb&#039; form element.
 236  */
 237 function field_example_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element) {
 238   $value = isset($items[$delta][&#039;rgb&#039;]) ? $items[$delta][&#039;rgb&#039;] : &#039;&#039;;
 239 
 240   $widget = $element;
 241   $widget[&#039;#delta&#039;] = $delta;
 242 
 243   switch ($instance[&#039;widget&#039;][&#039;type&#039;]) {
 244 
 245     case &#039;field_example_colorpicker&#039;:
 246       $widget += array(
 247         &#039;#suffix&#039; =&gt; &#039;&lt;div class=&quot;field-example-colorpicker&quot;&gt;&lt;/div&gt;&#039;,
 248         &#039;#attributes&#039; =&gt; array(&#039;class&#039; =&gt; array(&#039;edit-field-example-colorpicker&#039;)),
 249         &#039;#attached&#039; =&gt; array(
 250           // Add Farbtastic color picker.
 251           &#039;library&#039; =&gt; array(
 252             array(&#039;system&#039;, &#039;farbtastic&#039;),
 253           ),
 254           // Add javascript to trigger the colorpicker.
 255           &#039;js&#039; =&gt; array(drupal_get_path(&#039;module&#039;, &#039;field_example&#039;) . &#039;/field_example.js&#039;),
 256         ),
 257       );
 258 
 259     // DELIBERATE fall-through: From here on the field_example_text and
 260     // field_example_colorpicker are exactly the same.
 261     case &#039;field_example_text&#039;:
 262       $widget += array(
 263         &#039;#type&#039; =&gt; &#039;textfield&#039;,
 264         &#039;#default_value&#039; =&gt; $value,
 265         // Allow a slightly larger size that the field length to allow for some
 266         // configurations where all characters won&#039;t fit in input field.
 267         &#039;#size&#039; =&gt; 7,
 268         &#039;#maxlength&#039; =&gt; 7,
 269       );
 270       break;
 271 
 272     case &#039;field_example_3text&#039;:
 273       // Convert rgb value into r, g, and b for #default_value.
 274       if (!empty($value)) {
 275         preg_match_all(&#039;@..@&#039;, substr($value, 1), $match);
 276       }
 277       else {
 278         $match = array(array());
 279       }
 280 
 281       // Make this a fieldset with the three text fields.
 282       $widget += array(
 283         &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 284         &#039;#element_validate&#039; =&gt; array(&#039;field_example_3text_validate&#039;),
 285 
 286         // #delta is set so that the validation function will be able
 287         // to access external value information which otherwise would be
 288         // unavailable.
 289         &#039;#delta&#039; =&gt; $delta,
 290 
 291         &#039;#attached&#039; =&gt; array(
 292           &#039;css&#039; =&gt; array(drupal_get_path(&#039;module&#039;, &#039;field_example&#039;) . &#039;/field_example.css&#039;),
 293         ),
 294       );
 295 
 296       // Create a textfield for saturation values for Red, Green, and Blue.
 297       foreach (array(&#039;r&#039; =&gt; t(&#039;Red&#039;), &#039;g&#039; =&gt; t(&#039;Green&#039;), &#039;b&#039; =&gt; t(&#039;Blue&#039;)) as $key =&gt; $title) {
 298         $widget[$key] = array(
 299           &#039;#type&#039; =&gt; &#039;textfield&#039;,
 300           &#039;#title&#039; =&gt; $title,
 301           &#039;#size&#039; =&gt; 2,
 302           &#039;#default_value&#039; =&gt; array_shift($match[0]),
 303           &#039;#attributes&#039; =&gt; array(&#039;class&#039; =&gt; array(&#039;rgb-entry&#039;)),
 304           &#039;#description&#039; =&gt; t(&#039;The 2-digit hexadecimal representation of @color saturation, like &quot;a1&quot; or &quot;ff&quot;&#039;, array(&#039;@color&#039; =&gt; $title)),
 305         );
 306         // Since Form API doesn&#039;t allow a fieldset to be required, we
 307         // have to require each field element individually.
 308         if ($instance[&#039;required&#039;] == 1) $widget[$key][&#039;#required&#039;] = 1;
 309       }
 310       break;
 311 
 312   }
 313 
 314   $element[&#039;rgb&#039;] = $widget;
 315   return $element;
 316 }
 317 
 318 
 319 /**
 320  * Validate the individual fields and then convert them into a single HTML RGB
 321  * value as text.
 322  */
 323 function field_example_3text_validate($element, &amp;$form_state) {
 324   $delta = $element[&#039;#delta&#039;]; // TODO: Isn&#039;t there a better way to find out which element?
 325   $field = $form_state[&#039;field&#039;][$element[&#039;#field_name&#039;]][$element[&#039;#language&#039;]][&#039;field&#039;];
 326   $field_name = $field[&#039;field_name&#039;];
 327   if (isset($form_state[&#039;values&#039;][$field_name][$element[&#039;#language&#039;]][$delta][&#039;rgb&#039;])) {
 328     $values = $form_state[&#039;values&#039;][$field_name][$element[&#039;#language&#039;]][$delta][&#039;rgb&#039;];
 329     foreach (array(&#039;r&#039;, &#039;g&#039;, &#039;b&#039;) as $colorfield) {
 330       $colorfield_value = hexdec($values[$colorfield]);
 331       // If they left any empty, we&#039;ll set the value empty and quit.
 332       if (strlen($values[$colorfield]) == 0) {
 333         form_set_value($element, &#039;&#039;, $form_state);
 334         return;
 335       }
 336       // If they gave us anything that&#039;s not hex, reject it.
 337       if ( (strlen($values[$colorfield]) != 2) || $colorfield_value &lt; 0 || $colorfield_value &gt; 255) {
 338         form_error($element[$colorfield], t(&quot;Saturation value must be a 2-digit hexadecimal value between 00 and ff.&quot;));
 339       }
 340     }
 341 
 342     $value = sprintf(&#039;#%02s%02s%02s&#039;, $values[&#039;r&#039;], $values[&#039;g&#039;], $values[&#039;b&#039;]);
 343     form_set_value($element, $value, $form_state);
 344   }
 345 }
 346 
 347 /**
 348  * Implements hook_field_widget_error().
 349  *
 350  * hook_field_widget_error() lets us figure out what to do with errors
 351  * we might have generated in hook_field_validate(). Generally, we&#039;ll just
 352  * call form_error().
 353  *
 354  * @see field_example_field_validate()
 355  * @see form_error()
 356  */
 357 function field_example_field_widget_error($element, $error, $form, &amp;$form_state) {
 358   switch ($error[&#039;error&#039;]) {
 359     case &#039;field_example_invalid&#039;:
 360       form_error($element, $error[&#039;message&#039;]);
 361       break;
 362   }
 363 }
 364 
 365 
 366 /**
 367  * Implements hook_menu().
 368  *
 369  * Provides a simple user interface that tells the developer where to go.
 370  */
 371 function field_example_menu() {
 372   $items[&#039;examples/field_example&#039;] = array(
 373     &#039;title&#039; =&gt; &#039;Field Example&#039;,
 374     &#039;page callback&#039; =&gt; &#039;_field_example_page&#039;,
 375     &#039;access callback&#039; =&gt; TRUE,
 376   );
 377   return $items;
 378 }
 379 
 380 /**
 381  * A simple page to explain to the developer what to do.
 382  */
 383 function _field_example_page() {
 384   return t(&quot;The Field Example provides a field composed of an HTML RGB value, like #ff00ff. To use it, add the field to a content type.&quot;);
 385 }
 386 /**
 387  * @} End of &quot;defgroup field_example&quot;.
 388  */</pre>

</div>
<!-- EDIT6 SECTION "field_example.module" [2437-17691] -->
<h2 class="sectionedit7" id="field_exampletest">field_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Tests for Field Example.
   5  */
   6 
   7 class FieldExampleTest extends DrupalWebTestCase {
   8 
   9   public static function getInfo() {
  10     return array(
  11       &#039;name&#039; =&gt; &#039;Field Example&#039;,
  12       &#039;description&#039; =&gt; &#039;Create a content type with example_field_rgb fields, create a node, check for correct values.&#039;,
  13       &#039;group&#039; =&gt; &#039;Examples&#039;,
  14     );
  15   }
  16   function setUp() {
  17     // Enable the email_example module.
  18     parent::setUp(array(&#039;field_ui&#039;, &#039;field_example&#039;));
  19   }
  20 
  21   /**
  22    * Test basic functionality of the example field.
  23    *
  24    * - Creates a content type.
  25    * - Adds a single-valued field_example_rgb to it.
  26    * - Adds a multivalued field_example_rgb to it.
  27    * - Creates a node of the new type.
  28    * - Populates the single-valued field.
  29    * - Populates the multivalued field with two items.
  30    * - Tests the result.
  31    */
  32   function testExampleFieldBasic() {
  33     $content_type_machine = strtolower($this-&gt;randomName(10));
  34     $title = $this-&gt;randomName(20);
  35 
  36     // Create and login user.
  37     $account = $this-&gt;drupalCreateUser(array(&#039;administer content types&#039;));
  38     $this-&gt;drupalLogin($account);
  39 
  40     $this-&gt;drupalGet(&#039;admin/structure/types&#039;);
  41 
  42     // Create the content type.
  43     $this-&gt;clickLink(t(&#039;Add content type&#039;));
  44 
  45     $edit = array(
  46       &#039;name&#039; =&gt; $content_type_machine,
  47       &#039;type&#039; =&gt; $content_type_machine,
  48     );
  49     $this-&gt;drupalPost(NULL, $edit, t(&#039;Save and add fields&#039;));
  50     $this-&gt;assertText(t(&#039;The content type @name has been added.&#039;, array(&#039;@name&#039; =&gt; $content_type_machine)));
  51 
  52     $single_text_field = strtolower($this-&gt;randomName(10));
  53     $single_colorpicker_field = strtolower($this-&gt;randomName(10));
  54     $single_3text_field = strtolower($this-&gt;randomName(10));
  55     $multivalue_3text_field = strtolower($this-&gt;randomName(10));
  56 
  57     // Description of fields to be created;
  58     $fields[$single_text_field] = array(
  59       &#039;widget&#039; =&gt; &#039;field_example_text&#039;,
  60       &#039;cardinality&#039; =&gt; &#039;1&#039;,
  61     );
  62     $fields[$single_colorpicker_field] = array(
  63       &#039;widget&#039; =&gt; &#039;field_example_colorpicker&#039;,
  64       &#039;cardinality&#039; =&gt; 1,
  65     );
  66     $fields[$single_3text_field] = array(
  67       &#039;widget&#039; =&gt; &#039;field_example_3text&#039;,
  68       &#039;cardinality&#039; =&gt; 1,
  69     );
  70     $fields[$multivalue_3text_field] = array(
  71       &#039;widget&#039; =&gt; &#039;field_example_3text&#039;,
  72       &#039;cardinality&#039; =&gt; -1,
  73     );
  74 
  75     foreach ($fields as $fieldname =&gt; $details) {
  76       $this-&gt;create_field($fieldname, $details[&#039;widget&#039;], $details[&#039;cardinality&#039;]);
  77     }
  78 
  79     // Somehow clicking &quot;save&quot; isn&#039;t enough, and we have to do a
  80     // node_types_rebuild().
  81     node_types_rebuild();
  82     menu_rebuild();
  83     $type_exists = db_query(&#039;SELECT 1 FROM {node_type} WHERE type = :type&#039;, array(&#039;:type&#039; =&gt; $content_type_machine))-&gt;fetchField();
  84     $this-&gt;assertTrue($type_exists, &#039;The new content type has been created in the database.&#039;);
  85 
  86     $permission = &#039;create &#039; . $content_type_machine . &#039; content&#039;;
  87     // Reset the permissions cache.
  88     $this-&gt;checkPermissions(array($permission), TRUE);
  89 
  90     // Now that we have a new content type, create a user that has privileges
  91     // on the content type.
  92     $account = $this-&gt;drupalCreateUser(array($permission));
  93     $this-&gt;drupalLogin($account);
  94 
  95     $this-&gt;drupalGet(&#039;node/add/&#039; . $content_type_machine);
  96 
  97     // Add a node.
  98     $edit = array(
  99       &#039;title&#039; =&gt; $title,
 100       &#039;field_&#039; . $single_text_field . &#039;[und][0][rgb]&#039; =&gt; &#039;#000001&#039;,
 101       &#039;field_&#039; . $single_colorpicker_field . &#039;[und][0][rgb]&#039; =&gt; &#039;#000002&#039;,
 102 
 103       &#039;field_&#039; . $single_3text_field . &#039;[und][0][rgb][r]&#039; =&gt; &#039;00&#039;,
 104       &#039;field_&#039; . $single_3text_field . &#039;[und][0][rgb][g]&#039; =&gt; &#039;00&#039;,
 105       &#039;field_&#039; . $single_3text_field . &#039;[und][0][rgb][b]&#039; =&gt; &#039;03&#039;,
 106 
 107       &#039;field_&#039; . $multivalue_3text_field . &#039;[und][0][rgb][r]&#039; =&gt; &#039;00&#039;,
 108       &#039;field_&#039; . $multivalue_3text_field . &#039;[und][0][rgb][g]&#039; =&gt; &#039;00&#039;,
 109       &#039;field_&#039; . $multivalue_3text_field . &#039;[und][0][rgb][b]&#039; =&gt; &#039;04&#039;,
 110 
 111     );
 112     // We want to add a 2nd item to the multivalue field, so hit &quot;add another&quot;.
 113     $this-&gt;drupalPost(NULL, $edit, t(&#039;Add another item&#039;));
 114 
 115     $edit = array(
 116       &#039;field_&#039; . $multivalue_3text_field . &#039;[und][1][rgb][r]&#039; =&gt; &#039;00&#039;,
 117       &#039;field_&#039; . $multivalue_3text_field . &#039;[und][1][rgb][g]&#039; =&gt; &#039;00&#039;,
 118       &#039;field_&#039; . $multivalue_3text_field . &#039;[und][1][rgb][b]&#039; =&gt; &#039;05&#039;,
 119     );
 120     // Now we can fill in the second item in the multivalue field and save.
 121     $this-&gt;drupalPost(NULL, $edit, t(&#039;Save&#039;));
 122     $this-&gt;assertText(t(&#039;@content_type_machine @title has been created&#039;, array(&#039;@content_type_machine&#039; =&gt; $content_type_machine, &#039;@title&#039; =&gt; $title)));
 123 
 124 
 125     $output_strings = $this-&gt;xpath(&quot;//div[contains(@class,&#039;field-type-field-example-rgb&#039;)]/div/div/p/text()&quot;);
 126 
 127     $this-&gt;assertEqual((string)$output_strings[0], &quot;The color code in this field is #000001&quot;);
 128     $this-&gt;assertEqual((string)$output_strings[1], &quot;The color code in this field is #000002&quot;);
 129     $this-&gt;assertEqual((string)$output_strings[2], &quot;The color code in this field is #000003&quot;);
 130     $this-&gt;assertEqual((string)$output_strings[3], &quot;The color code in this field is #000004&quot;);
 131     $this-&gt;assertEqual((string)$output_strings[4], &quot;The color code in this field is #000005&quot;);
 132   }
 133 
 134   /**
 135    * Utility function to create fields on a content type.
 136    * @param $field_name
 137    *   Name of the field, like field_something
 138    * @param $widget_type
 139    *   Widget type, like field_example_3text
 140    * @param $cardinality
 141    *   Cardinality
 142    */
 143   protected function create_field($field_name, $widget_type, $cardinality) {
 144         // Add a singleton field_example_text field.
 145     $edit = array(
 146       &#039;fields[_add_new_field][label]&#039; =&gt; $field_name,
 147       &#039;fields[_add_new_field][field_name]&#039; =&gt; $field_name,
 148       &#039;fields[_add_new_field][type]&#039; =&gt; &#039;field_example_rgb&#039;,
 149       &#039;fields[_add_new_field][widget_type]&#039; =&gt; $widget_type,
 150 
 151     );
 152     $this-&gt;drupalPost(NULL, $edit, t(&#039;Save&#039;));
 153 
 154     // There are no settings for this, so just press the button.
 155     $this-&gt;drupalPost(NULL, array(), t(&#039;Save field settings&#039;));
 156 
 157     $edit = array(&#039;field[cardinality]&#039; =&gt; (string)$cardinality);
 158 
 159     // Using all the default settings, so press the button.
 160     $this-&gt;drupalPost(NULL, $edit, t(&#039;Save settings&#039;));
 161     debug(t(&#039;Saved settings for field %field_name with widget %widget_type and cardinality %cardinality&#039;, array(&#039;%field_name&#039; =&gt; $field_name, &#039;%widget_type&#039; =&gt; $widget_type, &#039;%cardinality&#039; =&gt; $cardinality)));
 162     $this-&gt;assertText(t(&#039;Saved @name configuration.&#039;, array(&#039;@name&#039; =&gt; $field_name)));
 163   }
 164 }</pre>

</div>
<!-- EDIT7 SECTION "field_example.test" [17692-] -->