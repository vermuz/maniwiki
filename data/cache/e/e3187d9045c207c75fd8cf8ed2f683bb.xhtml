
<h1 class="sectionedit1" id="filter_example">Filter Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Filter Example" [1-29] -->
<h2 class="sectionedit2" id="filter_exampleinfo">filter_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Filter example
   2 description = An example module showing how to define a custom filter.
   3 package = Example modules
   4 core = 7.x
   5 files[] = filter_example.test</pre>

</div>
<!-- EDIT2 SECTION "filter_example.info" [30-261] -->
<h2 class="sectionedit3" id="filter_examplemodule">filter_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Module file for filter_example.
   5  */
   6 
   7 /**
   8  * @defgroup filter_example Example: Filter
   9  * @ingroup examples
  10  * @{
  11  * Demonstrates the creation of filters.
  12 
  13  * This is an example outlining how a module can be used to define a filter
  14  * to be run on user-submitted content before it is output to the browser.
  15  *
  16  * To show all the capabilities of the filter system, we will define two filters
  17  * in this module. One will substitute the string &quot;foo&quot; with an
  18  * administratively-defined replacement string. The other will find a custom
  19  * XML tag, &lt;time /&gt;, and replace it by the current time.
  20  *
  21  * Foo filter
  22  *
  23  * Drupal has several content formats (they are not filters), and in our example
  24  * the foo replacement can be configured for each one of them, allowing an html
  25  * or php replacement, so the module includes a settings callback, with options
  26  * to configure that replacements. Also, a Tips callback will help showing the
  27  * current replacement for the content type being edited.
  28  *
  29  * Time filter.
  30  *
  31  * This filter is a little trickier to implement than the previous one.
  32  * Since the input involves special HTML characters (&lt; and &gt;) we have to
  33  * run the filter before HTML is escaped/stripped by other filters. But
  34  * we want to use HTML in our result as well, and so if we run this filter
  35  * first our replacement string could be escaped or stripped. The solution
  36  * is to use the &quot;prepare&quot; operation to escape the special characters, and
  37  * to later replace our escaped version in the &quot;process&quot; step.
  38  */
  39 
  40 /**
  41  * Implements hook_menu().
  42  */
  43 function filter_example_menu() {
  44   $items[&#039;examples/filter_example&#039;] = array(
  45     &#039;title&#039; =&gt; &#039;Filter Example&#039;,
  46     &#039;page callback&#039; =&gt; &#039;_filter_example_information&#039;,
  47     &#039;access callback&#039; =&gt; TRUE,
  48   );
  49   return $items;
  50 }
  51 
  52 /**
  53  * Implements hook_help().
  54  */
  55 function filter_example_help($path, $arg) {
  56   switch ($path) {
  57     case &#039;admin/help#filter_example&#039;:
  58       return _filter_example_information();
  59   }
  60 }
  61 
  62 /**
  63  * Simply returns a little bit of information about the example.
  64  */
  65 function _filter_example_information() {
  66   return t(&quot;&lt;p&gt;This example provides two filters.&lt;/p&gt;&lt;p&gt;Foo Filter replaces
  67     &#039;foo&#039; with a configurable replacement.&lt;/p&gt;&lt;p&gt;Time Tag replaces the string
  68     &#039;&amp;lt;time /&amp;gt;&#039; with the current time.&lt;/p&gt;&lt;p&gt;To use these filters, go to !link and
  69     configure an input format, or create a new one.&lt;/p&gt;&quot;,
  70     array(&#039;!link&#039; =&gt; l(&quot;admin/config/content/formats&quot;, &quot;admin/config/content/formats&quot;))
  71   );
  72 }
  73 
  74 /**
  75  * Implements hook_filter_info().
  76  *
  77  * Here we define the different filters provided by the module. For this example,
  78  * time_filter is a very static and simple replacement, but it requires some
  79  * preparation of the string because of the special html tags &lt; and &gt;. The
  80  * foo_filter is more complex, including its own settings and inline tips.
  81  */
  82 function filter_example_filter_info() {
  83   $filters[&#039;filter_foo&#039;] = array(
  84     &#039;title&#039; =&gt; t(&#039;Foo Filter (example)&#039;),
  85     &#039;description&#039; =&gt; t(&#039;Every instance of &quot;foo&quot; in the input text will be replaced with a preconfigured replacement.&#039;),
  86     &#039;process callback&#039;  =&gt; &#039;_filter_example_filter_foo_process&#039;,
  87     &#039;default settings&#039; =&gt; array(
  88       &#039;filter_example_foo&#039; =&gt; &#039;bar&#039;,
  89     ),
  90     &#039;settings callback&#039; =&gt; &#039;_filter_example_filter_foo_settings&#039;,
  91     &#039;tips callback&#039; =&gt; &#039;_filter_example_filter_foo_tips&#039;,
  92   );
  93   $filters[&#039;filter_time&#039;] = array(
  94     &#039;title&#039; =&gt; t(&#039;Time Tag (example)&#039;),
  95     &#039;description&#039; =&gt; t(&#039;Every instance of the special &amp;lt;time /&amp;gt; tag will be replaced with the current date and time in the user\&#039;s specified time zone.&#039;),
  96     &#039;prepare callback&#039; =&gt; &#039;_filter_example_filter_time_prepare&#039;,
  97     &#039;process callback&#039; =&gt; &#039;_filter_example_filter_time_process&#039;,
  98     &#039;tips callback&#039; =&gt; &#039;_filter_example_filter_time_tips&#039;,
  99   );
 100   return $filters;
 101 }
 102 
 103 /*
 104  * Foo filter
 105  *
 106  * Drupal has several text formats (they are not filters), and in our example
 107  * the foo replacement can be configured for each one of them, so the module
 108  * includes a settings callback, with options to configure those replacements.
 109  * Also, a Tips callback will help showing the current replacement
 110  * for the content type being edited.
 111  */
 112 
 113 /**
 114  * Settings callback for foo filter
 115  *
 116  * Make use of $format to have different replacements for every input format.
 117  * Since we allow the administrator to define the string that gets substituted
 118  * when &quot;foo&quot; is encountered, we need to provide an interface for this kind of
 119  * customization. The object format is also an argument of the callback.
 120  *
 121  * The settings defined in this form are stored in database by the filter
 122  * module, and they will be available in the $filter argument.
 123  */
 124 function _filter_example_filter_foo_settings($form, $form_state, $filter, $format, $defaults) {
 125   $settings[&#039;filter_example_foo&#039;] = array(
 126     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 127     &#039;#title&#039; =&gt; t(&#039;Substitution string&#039;),
 128     &#039;#default_value&#039; =&gt; isset($filter-&gt;settings[&#039;filter_example_foo&#039;]) ? $filter-&gt;settings[&#039;filter_example_foo&#039;] : $defaults[&#039;filter_example_foo&#039;],
 129     &#039;#description&#039; =&gt; t(&#039;The string to substitute for &quot;foo&quot; everywhere in the text.&#039;)
 130   );
 131   return $settings;
 132 }
 133 
 134 /**
 135  * Foo filter process callback.
 136  *
 137  * The actual filtering is performed here. The supplied text should be returned,
 138  * once any necessary substitutions have taken place. The example just replaces
 139  * foo with our custom defined string in the settings page.
 140  */
 141 function _filter_example_filter_foo_process($text, $filter, $format) {
 142   $replacement = isset($filter-&gt;settings[&#039;filter_example_foo&#039;]) ? $filter-&gt;settings[&#039;filter_example_foo&#039;] : &#039;bar&#039;;
 143   return str_replace(&#039;foo&#039;, $replacement, $text);
 144 }
 145 
 146 
 147 /**
 148  * Filter tips callback for foo filter.
 149  *
 150  * The tips callback allows filters to provide help text to users during the
 151  * content editing process. Short tips are provided on the content editing
 152  * screen, while long tips are provided on a separate linked page. Short tips
 153  * are optional, but long tips are highly recommended.
 154  */
 155 function _filter_example_filter_foo_tips($filter, $format, $long = FALSE) {
 156   $replacement = isset($filter-&gt;settings[&#039;filter_example_foo&#039;]) ? $filter-&gt;settings[&#039;filter_example_foo&#039;] : &#039;bar&#039;;
 157   if (!$long) {
 158     // This string will be shown in the content add/edit form
 159     return t(&#039;&lt;em&gt;foo&lt;/em&gt; replaced with %replacement.&#039;, array(&#039;%replacement&#039; =&gt; $replacement));
 160   }
 161   else {
 162     return t(&#039;Every instance of &quot;foo&quot; in the input text will be replaced with a configurable value. You can configure this value and put whatever you want there. The replacement value is &quot;%replacement&quot;.&#039;, array(&#039;%replacement&#039; =&gt; $replacement));
 163   }
 164 }
 165 
 166 /**
 167  * Time filter prepare callback.
 168  *
 169  * We&#039;ll use [filter-example-time] as a replacement for the time tag.
 170  * Note that in a more complicated filter a closing tag may also be
 171  * required. For more information, see &quot;Temporary placeholders and
 172  * delimiters&quot; at http://drupal.org/node/209715.
 173  */
 174 function _filter_example_filter_time_prepare($text, $filter) {
 175   return preg_replace(&#039;!&lt;time ?/&gt;!&#039;, &#039;[filter-example-time]&#039;, $text);
 176 }
 177 
 178 /**
 179  * Time filter process callback.
 180  *
 181  * Now, in the &quot;process&quot; step, we&#039;ll search for our escaped time tags and
 182  * do the real filtering: replace the xml tag with the date.
 183  */
 184 function _filter_example_filter_time_process($text, $filter) {
 185   return str_replace(&#039;[filter-example-time]&#039;, &#039;&lt;em&gt;&#039; . format_date(time()) . &#039;&lt;/em&gt;&#039;, $text);
 186 }
 187 
 188 
 189 /**
 190  * Filter tips callback for time filter.
 191  *
 192  * The tips callback allows filters to provide help text to users during the
 193  * content editing process. Short tips are provided on the content editing
 194  * screen, while long tips are provided on a separate linked page. Short tips
 195  * are optional, but long tips are highly recommended.
 196  */
 197 function _filter_example_filter_time_tips($filter, $format, $long = FALSE) {
 198   return t(&#039;&lt;em&gt;&amp;lt;time /&amp;gt;&lt;/em&gt; is replaced with the current time.&#039;);
 199 }
 200 
 201 /**
 202  * @} End of &quot;defgroup filter_example&quot;.
 203  */</pre>

</div>
<!-- EDIT3 SECTION "filter_example.module" [262-9245] -->
<h2 class="sectionedit4" id="filter_exampletest">filter_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Test case for Testing the filter example module.
   6  *
   7  * This file contains the test cases to check if module is performing as
   8  * expected.
   9  */
  10 class FilterExampleTestCase extends DrupalWebTestCase {
  11   protected $web_user;
  12   protected $filtered_html;
  13   protected $full_html;
  14 
  15   public static function getInfo() {
  16     return array(
  17       &#039;name&#039; =&gt; &#039;Filter example functionality&#039;,
  18       &#039;description&#039; =&gt; &#039;Verify that content is processed by example filter.&#039;,
  19       &#039;group&#039; =&gt; &#039;Examples&#039;,
  20     );
  21   }
  22 
  23   /**
  24    * Enable modules and create user with specific permissions.
  25    */
  26   function setUp() {
  27     parent::setUp(&#039;filter_example&#039;);
  28 
  29     // Load the used input formats.
  30     $this-&gt;filtered_html = db_query_range(&#039;SELECT * FROM {filter_format} WHERE name = :name&#039;, 0, 1, array(&#039;:name&#039; =&gt; &#039;Filtered HTML&#039;))-&gt;fetchObject();
  31     $this-&gt;full_html = db_query_range(&#039;SELECT * FROM {filter_format} WHERE name = :name&#039;, 0, 1, array(&#039;:name&#039; =&gt; &#039;Full HTML&#039;))-&gt;fetchObject();
  32 
  33     // Create user.
  34     $this-&gt;web_user = $this-&gt;drupalCreateUser(array(
  35       &#039;administer filters&#039;,
  36       filter_permission_name($this-&gt;filtered_html),
  37       filter_permission_name($this-&gt;full_html),
  38       &#039;bypass node access&#039;,
  39     ));
  40   }
  41 
  42   /**
  43    * Login user, create an example node, and test blog functionality through the admin and user interfaces.
  44    */
  45   function testFilterExampleBasic() {
  46     // Login the admin user.
  47     $this-&gt;drupalLogin($this-&gt;web_user);
  48 
  49     // Enable both filters in format id 1 (default format)
  50     $edit = array(
  51       &#039;filters[filter_time][status]&#039; =&gt; TRUE,
  52       &#039;filters[filter_foo][status]&#039; =&gt; TRUE,
  53     );
  54     $this-&gt;drupalPost(&#039;admin/config/content/formats/&#039; . $this-&gt;filtered_html-&gt;format, $edit, t(&#039;Save configuration&#039;));
  55 
  56     // Create a content type to test the filters (with default format)
  57     $content_type = $this-&gt;drupalCreateContentType();
  58 
  59     // Create a test node
  60     $langcode = LANGUAGE_NONE;
  61     $edit = array(
  62       &quot;title&quot; =&gt; $this-&gt;randomName(),
  63       &quot;body[$langcode][0][value]&quot; =&gt; &#039;What foo is it? it is &lt;time /&gt;&#039;,
  64     );
  65     $result = $this-&gt;drupalPost(&#039;node/add/&#039; . $content_type-&gt;type, $edit, t(&#039;Save&#039;));
  66     $this-&gt;assertResponse(200);
  67     $time = format_date(time());
  68     $this-&gt;assertRaw(&#039;What bar is it? it is &lt;em&gt;&#039; . $time . &#039;&lt;/em&gt;&#039;);
  69 
  70     // Enable foo filter in other format id 2
  71     $edit = array(
  72       &#039;filters[filter_foo][status]&#039; =&gt; TRUE,
  73     );
  74     $this-&gt;drupalPost(&#039;admin/config/content/formats/&#039; . $this-&gt;full_html-&gt;format, $edit, t(&#039;Save configuration&#039;));
  75 
  76     // Change foo filter replacement with a random string in format id 2
  77     $replacement = $this-&gt;randomName();
  78     $options = array(
  79       &#039;filters[filter_foo][settings][filter_example_foo]&#039; =&gt; $replacement,
  80     );
  81     $this-&gt;drupalPost(&#039;admin/config/content/formats/&#039; . $this-&gt;full_html-&gt;format, $options, t(&#039;Save configuration&#039;));
  82 
  83     // Create a test node with content format 2
  84     $langcode = LANGUAGE_NONE;
  85     $edit = array(
  86       &quot;title&quot; =&gt; $this-&gt;randomName(),
  87       &quot;body[$langcode][0][value]&quot; =&gt; &#039;What foo is it? it is &lt;time /&gt;&#039;,
  88       &quot;body[$langcode][0][format]&quot; =&gt; $this-&gt;full_html-&gt;format,
  89     );
  90     $result = $this-&gt;drupalPost(&#039;node/add/&#039; . $content_type-&gt;type, $edit, t(&#039;Save&#039;));
  91     $this-&gt;assertResponse(200);
  92 
  93     // Only foo filter is enabled
  94     $this-&gt;assertRaw(&quot;What &quot; . $replacement . &quot; is it&quot;, &#039;Foo filter successfully verified.&#039;);
  95   }
  96 }</pre>

</div>
<!-- EDIT4 SECTION "filter_example.test" [9246-] -->