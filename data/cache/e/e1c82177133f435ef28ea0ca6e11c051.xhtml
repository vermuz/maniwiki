
<h1 class="sectionedit1" id="image_example">Image Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Image Example" [1-29] -->
<h2 class="sectionedit2" id="image_exampleinfo">image_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Image Example
   2 description = Example implementation of image.module hooks.
   3 package = Example modules
   4 core = 7.x
   5 dependencies[] = image
   6 files[] = image_example.test</pre>

</div>
<!-- EDIT2 SECTION "image_example.info" [30-275] -->
<h2 class="sectionedit3" id="image_exampleinstall">image_example.install</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Install, update, and uninstall functions for the image_example module.
   6  */
   7 
   8 /**
   9  * Implements hook_install().
  10  *
  11  * @ingroup image_example
  12  */
  13 function image_example_install() {
  14   // Set a variable containing the name of the style to use when the module
  15   // outputs an image.
  16   variable_set(&#039;image_example_style_name&#039;, &#039;image_example_style&#039;);
  17 }
  18 
  19 /**
  20  * Implements hook_uninstall().
  21  *
  22  * @ingroup image_example
  23  */
  24 function image_example_uninstall() {
  25   variable_del(&#039;image_example_style_name&#039;);
  26   variable_del(&#039;image_example_image_fid&#039;);
  27 }
  28 
  29 /**
  30  * Implements hook_enable().
  31  *
  32  * @ingroup image_example
  33  */
  34 function image_example_enable() {
  35   // There is currently no way to manually flush an image style which causes
  36   // problems when installing a new module that implements
  37   // hook_image_styles_alter(). If the new module modifies an image style that
  38   // modification will not be applied to any images that have already been
  39   // generated unless the styles are flushed. This is one way around that.
  40   $styles = image_styles();
  41   foreach ($styles as $style) {
  42     image_style_flush($style);
  43   }
  44 }
  45 
  46 /**
  47  * Implements hook_disable().
  48  *
  49  * @ingroup image_example
  50  */
  51 function image_example_disable() {
  52   // Solves the same problem as image_example_enable().
  53   image_example_enable();
  54 }</pre>

</div>
<!-- EDIT3 SECTION "image_example.install" [276-1909] -->
<h2 class="sectionedit4" id="image_examplemodule">image_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Module file for image_example
   6  */
   7 
   8 /**
   9  * @defgroup image_example Example: Image
  10  * @ingroup examples
  11  * @{
  12  * Demonstrates the basic use of image API.
  13  *
  14  * This module demonstrates the use of Drupal 7&#039;s new image styles and effects
  15  * including the following topics.
  16  *  - Define default image styles in code. Useful for modules that want to ship
  17  *    with predefined image styles and for site developers who want their image
  18  *    style configurations to be in version control.
  19  *    hook_image_default_styles().
  20  *  - Define new image effects. Demonstrates how a module can add additional
  21  *    effects to the options available when creating image styles.
  22  *    hook_image_effect_info().
  23  *  - Alter existing image styles. Demonstrates the use of
  24  *    hook_image_styles_alter() to modify existing image effects, especially
  25  *    those defined by other modules in hook_image_default_styles() without
  26  *    having to override the styles.
  27  *  - Demonstrates the use of hook_image_style_save() and
  28  *    hook_image_style_delete() to update module specific variables when an
  29  *    image style is either re-named or deleted.
  30  *  - Generate a form with a field of type #managed_file that allows the user
  31  *    to upload an image and choose a style to use when displaying that image.
  32  *  - Demonstrates the use of theme_image_style() to display images using an
  33  *    image style.
  34  *
  35  * @see hook_image_default_styles().
  36  * @see hook_image_effect_info().
  37  * @see hook_image_style_save().
  38  * @see hook_image_style_delete().
  39  * @see theme_image_style().
  40  */
  41 
  42 /**
  43  * Implements hook_menu().
  44  *
  45  * Provide a menu item and a page to demonstrate features of this example
  46  * module.
  47  */
  48 function image_example_menu() {
  49   $items = array();
  50   $items[&#039;image_example/styles&#039;] = array(
  51     &#039;title&#039; =&gt; &#039;Image Example&#039;,
  52     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  53     &#039;page arguments&#039; =&gt; array(&#039;image_example_style_form&#039;),
  54     &#039;access arguments&#039; =&gt; array(&#039;access content&#039;),
  55     &#039;file&#039; =&gt; &#039;image_example.pages.inc&#039;,
  56   );
  57   return $items;
  58 }
  59 
  60 /**
  61  * Implements hook_help().
  62  */
  63 function image_example_help($path) {
  64   switch ($path) {
  65     case &#039;image_example/styles&#039;:
  66       $output =  &#039;&lt;p&gt;&#039; . t(&#039;Use this form to upload an image and choose an Image Style to use when displaying the image. This demonstrates basic use of the Drupal 7 Image styles &amp; effects system.&#039;) . &#039;&lt;/p&gt;&#039;;
  67       $output .= &#039;&lt;p&gt;&#039; . t(&#039;Image styles can be added/edited using the !link.&#039;, array(&#039;!link&#039; =&gt; l(t(&#039;Image styles UI&#039;), &#039;admin/config/media/image-styles&#039;))) . &#039;&lt;/p&gt;&#039;;
  68       return $output;
  69   }
  70 }
  71 
  72 /**
  73  * Implements hook_image_default_styles().
  74  *
  75  * hook_image_default_styles() declares to Drupal any image styles that are
  76  * provided by the module. An image style is a collection of image effects that
  77  * are performed in a specified order, manipulating the image and generating a
  78  * new derivative image.
  79  *
  80  * This hook can be used to declare image styles that your module depends on or
  81  * allow you to define image styles in code and gain the benefits of using
  82  * a version control system.
  83  */
  84 function image_example_image_default_styles() {
  85   // This hook returns an array, each component of which describes an image
  86   // style. The array keys are the machine-readable image style names and
  87   // to avoid namespace conflicts should begin with the name of the
  88   // implementing module. e.g.) &#039;mymodule_stylename&#039;. Styles names should
  89   // use only alpha-numeric characters, underscores (_), and hyphens (-).
  90   $styles = array();
  91   $styles[&#039;image_example_style&#039;] = array();
  92 
  93   // Each style array consists of an &#039;effects&#039; array that is made up of
  94   // sub-arrays which define the individual image effects that are combined
  95   // together to create the image style.
  96   $styles[&#039;image_example_style&#039;][&#039;effects&#039;] = array(
  97     array(
  98       // Name of the image effect. See image_image_effect_info() in
  99       // modules/image/image.effects.inc for a list of image effects available
 100       // in Drupal 7 core.
 101       &#039;name&#039; =&gt; &#039;image_scale&#039;,
 102       // Arguments to pass to the effect callback function.
 103       // The arguments that an effect accepts are documented with each
 104       // individual image_EFFECT_NAME_effect function. See image_scale_effect()
 105       // for an example.
 106       &#039;data&#039; =&gt; array(
 107         &#039;width&#039; =&gt; 100,
 108         &#039;height&#039; =&gt; 100,
 109         &#039;upscale&#039; =&gt; 1,
 110       ),
 111       // The order in which image effects should be applied when using this
 112       // style.
 113       &#039;weight&#039; =&gt; 0,
 114     ),
 115     // Add a second effect to this image style. Effects are executed in order
 116     // and are cummulative. When applying an image style to an image the result
 117     // will be the combination of all effects associated with that style.
 118     array(
 119       &#039;name&#039; =&gt; &#039;image_example_colorize&#039;,
 120       &#039;data&#039; =&gt; array(
 121         &#039;color&#039; =&gt; &#039;#FFFF66&#039;,
 122       ),
 123       &#039;weight&#039; =&gt; 1,
 124     ),
 125   );
 126 
 127   return $styles;
 128 }
 129 
 130 /**
 131  * Implements hook_image_style_save().
 132  *
 133  * Allows modules to respond to updates to an image style&#039;s
 134  * settings.
 135  */
 136 function image_example_image_style_save($style) {
 137   // The $style parameter is an image style array with one notable exception.
 138   // When a user has choosen to replace a deleted style with another style the
 139   // $style[&#039;name&#039;] property contains the name of the replacement style and
 140   // $style[&#039;old_name&#039;] contains the name of the style being deleted.
 141 
 142   // Here we update a variable that contains the name of the image style that
 143   // the block provided by this module uses when formating images to use the
 144   // new user choosen style name.
 145   if (isset($style[&#039;old_name&#039;]) &amp;&amp; $style[&#039;old_name&#039;] == variable_get(&#039;image_example_style_name&#039;, &#039;&#039;)) {
 146     variable_set(&#039;image_example_style_name&#039;, $style[&#039;name&#039;]);
 147   }
 148 }
 149 
 150 /**
 151  * Implements hook_image_style_delete().
 152  *
 153  * This hook allows modules to respond to image styles being deleted.
 154  *
 155  * @see image_example_style_save()
 156  */
 157 function image_example_image_style_delete($style) {
 158   // See information about $style paramater in documentation for
 159   // image_example_style_save().
 160 
 161   // Update the modules variable that contains the name of the image style
 162   // being deleted to the name of the replacement style.
 163   if (isset($style[&#039;old_name&#039;]) &amp;&amp; $style[&#039;old_name&#039;] == variable_get(&#039;image_example_style_name&#039;, &#039;&#039;)) {
 164     variable_set(&#039;image_example_style_name&#039;, $style[&#039;name&#039;]);
 165   }
 166 }
 167 
 168 /**
 169  * Implements hook_image_style_flush().
 170  *
 171  * This hook allows modules to respond when a style is being flushed. Styles
 172  * are flushed any time a style is updated, an effect associated with the style
 173  * is updated, a new effect is added to the style, or an existing effect is
 174  * removed.
 175  *
 176  * Flushing removes all images generated using this style from the host. Once a
 177  * style has been flushed derivative images will need to be regenerated. New
 178  * images will be generated automatically as needed but it is worth noting that
 179  * on a busy site with lots of images this could have an impact on performance.
 180  *
 181  * Note: This function does not currently have any effect as the example module
 182  * does not use any caches. It is demonstrated here for completeness sake only.
 183  */
 184 function image_example_style_flush($style) {
 185   // The $style parameter is an image style array.
 186 
 187   // Empty any caches populated by our module that could contain stale data
 188   // after the style has been flushed. Stale data occurs because the module may
 189   // have cached content with a reference to the derivative image which is
 190   // being deleted.
 191   cache_clear_all(&#039;*&#039;, &#039;image_example&#039;, TRUE);
 192 }
 193 
 194 /**
 195  * Implements hook_image_styles_alter().
 196  *
 197  * Allows your module to modify, add, or remove image styles provided
 198  * by other modules. The best use of this hook is to modify default styles that
 199  * have not been overriden by the user. Altering styles that have been
 200  * overriden by the user could have an adverse affect on the user experience.
 201  * If you add an effect to a style through this hook and the user attempts to
 202  * remove the effect it will immediatly be re-applied.
 203  */
 204 function image_example_image_styles_alter(&amp;$styles) {
 205   // The $styles paramater is an array of image style arrays keyed by style
 206   // name. You can check to see if a style has been overriden by checking the
 207   // $styles[&#039;stylename&#039;][&#039;storage&#039;] property.
 208 
 209   // Verify that the effect has not been overriden.
 210   if ($styles[&#039;thumbnail&#039;][&#039;storage&#039;] == IMAGE_STORAGE_DEFAULT) {
 211     // Add an additional colorize effect to the system provided thumbnail
 212     // effect.
 213     $styles[&#039;thumbnail&#039;][&#039;effects&#039;][] = array(
 214       &#039;label&#039; =&gt; t(&#039;Colorize #FFFF66&#039;),
 215       &#039;name&#039; =&gt; &#039;image_example_colorize&#039;,
 216       &#039;effect callback&#039; =&gt; &#039;image_example_colorize_effect&#039;,
 217       &#039;data&#039; =&gt; array(
 218         &#039;color&#039; =&gt; &#039;#FFFF66&#039;,
 219       ),
 220       &#039;weight&#039; =&gt; 1,
 221     );
 222   }
 223 }
 224 
 225 /**
 226  * Implements hook_image_effect_info().
 227  *
 228  * This hook allows your module to define additional image manipulation effects
 229  * that can be used with image styles.
 230  */
 231 function image_example_image_effect_info() {
 232   $effects = array();
 233 
 234   // The array is keyed on the machine-readable effect name.
 235   $effects[&#039;image_example_colorize&#039;] = array(
 236     // Human readable name of the effect.
 237     &#039;label&#039; =&gt; t(&#039;Colorize&#039;),
 238     // (optional) Brief description of the effect that will be shown when
 239     // adding or configuring this image effect.
 240     &#039;help&#039; =&gt; t(&#039;The colorize effect will first remove all color from the source image and then tint the image using the color specified.&#039;),
 241     // Name of function called to perform this effect.
 242     &#039;effect callback&#039; =&gt; &#039;image_example_colorize_effect&#039;,
 243     // (optional) Name of function that provides a $form array with options for
 244     // configuring the effect. Note that you only need to return the fields
 245     // specific to your module. Submit buttons will be added automatically, and
 246     // configuration options will be serailized and added to the &#039;data&#039; element
 247     // of the effect. The function will recieve the $effect[&#039;data&#039;] array as
 248     // its only parameter.
 249     &#039;form callback&#039; =&gt; &#039;image_example_colorize_form&#039;,
 250     // (optional) Name of a theme function that will output a summary of this
 251     // effects configuation. Used when displaying list of effects associated
 252     // with an image style. In this example the function
 253     // theme_image_example_colorize_summary will be called via the theme()
 254     // function. Your module must also implement hook_theme() in order for this
 255     // function to work correctly. See image_example_theme() and
 256     // theme_image_example_colorize_summary().
 257     &#039;summary theme&#039; =&gt; &#039;image_example_colorize_summary&#039;,
 258   );
 259 
 260   return $effects;
 261 }
 262 
 263 /**
 264  * Form Builder; Configuration settings for colorize effect.
 265  *
 266  * Create a $form array with the fields necessary for configuring the
 267  * image_example_colorize effect.
 268  *
 269  * Note that this is not a complete form, it only contains the portion of the
 270  * form for configuring the colorize options. Therefore it does not not need to
 271  * include metadata about the effect, nor a submit button.
 272  *
 273  * @param $data
 274  *   The current configuration for this colorize effect.
 275  */
 276 function image_example_colorize_form($data) {
 277   $form = array();
 278   // You do not need to worry about handling saving/updating/deleting of the
 279   // data collected. The image module will automatically serialize and store
 280   // all data associated with an effect.
 281   $form[&#039;color&#039;] = array(
 282     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 283     &#039;#title&#039; =&gt; t(&#039;Color&#039;),
 284     &#039;#description&#039; =&gt; t(&#039;The color to use when colorizing the image. Use web-style hex colors. e.g.) #FF6633.&#039;),
 285     &#039;#default_value&#039; =&gt; isset($data[&#039;color&#039;]) ? $data[&#039;color&#039;] : &#039;&#039;,
 286     &#039;#size&#039; =&gt; 7,
 287     &#039;#max_length&#039; =&gt; 7,
 288     &#039;#required&#039; =&gt; TRUE,
 289   );
 290   return $form;
 291 }
 292 
 293 /**
 294  * Image effect callback; Colorize an image resource.
 295  *
 296  * @param $image
 297  *   An image object returned by image_load().
 298  * @param $data
 299  *   An array of attributes to use when performing the colorize effect with the
 300  *   following items:
 301  *   - &quot;color&quot;: The web-style hex color to use when colorizing the image.
 302  * @return
 303  *   TRUE on success. FALSE on failure to colorize image.
 304  */
 305 function image_example_colorize_effect(&amp;$image, $data) {
 306   // Image manipulation should be done to the $image-&gt;resource, which will be
 307   // automatically saved as a new image once all effects have been applied.
 308   // If your effect makes changes to the $image-&gt;resource that relate to any
 309   // information stored in the $image-&gt;info array (width, height, etc.) you
 310   // should update that information as well. See modules/system/image.gd.inc
 311   // for examples of functions that perform image manipulations.
 312 
 313   // Not all GD installations are created equal. It is a good idea to check for
 314   // the existence of image manipulation functions before using them.
 315   // PHP installations using non-bundled GD do not have imagefilter(). More
 316   // information about image manipulation functions is available in the PHP
 317   // manual. http://www.php.net/manual/en/book.image.php
 318   if (!function_exists(&#039;imagefilter&#039;)) {
 319     watchdog(&#039;image&#039;, &#039;The image %image could not be colorized because the imagefilter() function is not available in this PHP installation.&#039;, array(&#039;%file&#039; =&gt; $image-&gt;source));
 320     return FALSE;
 321   }
 322 
 323   // Verify that Drupal is using the PHP GD library for image manipulations
 324   // since this effect depends on functions in the GD library.
 325   if ($image-&gt;toolkit != &#039;gd&#039;) {
 326     watchdog(&#039;image&#039;, &#039;Image colorize failed on %path. Using non GD toolkit.&#039;, array(&#039;%path&#039; =&gt; $image-&gt;source), WATCHDOG_ERROR);
 327     return FALSE;
 328   }
 329 
 330   // Convert short #FFF syntax to full #FFFFFF syntax.
 331   if (strlen($data[&#039;color&#039;]) == 4) {
 332     $c = $data[&#039;color&#039;];
 333     $data[&#039;color&#039;] = $c[0] . $c[1] . $c[1] . $c[2] . $c[2] . $c[3] . $c[3];
 334   }
 335 
 336   // Convert #FFFFFF syntax to hexadecimal colors.
 337   $data[&#039;color&#039;] = hexdec(str_replace(&#039;#&#039;, &#039;0x&#039;, $data[&#039;color&#039;]));
 338 
 339   // Convert the hexadecimal color value to a color index value.
 340   $rgb = array();
 341   for ($i = 16; $i &gt;= 0; $i -= 8) {
 342     $rgb[] = (($data[&#039;color&#039;] &gt;&gt; $i) &amp; 0xFF);
 343   }
 344 
 345   // First desaturate the image, and then apply the new color.
 346   imagefilter($image-&gt;resource, IMG_FILTER_GRAYSCALE);
 347   imagefilter($image-&gt;resource, IMG_FILTER_COLORIZE, $rgb[0], $rgb[1], $rgb[2]);
 348 
 349   return TRUE;
 350 }
 351 
 352 /**
 353  * Implements hook_theme().
 354  */
 355 function image_example_theme() {
 356   return array(
 357     &#039;image_example_colorize_summary&#039; =&gt; array(
 358       &#039;variables&#039; =&gt; array(&#039;data&#039; =&gt; NULL),
 359     ),
 360     &#039;image_example_image&#039; =&gt; array(
 361       &#039;variables&#039; =&gt; array(&#039;image&#039; =&gt; NULL, &#039;style&#039; =&gt; NULL),
 362       &#039;file&#039; =&gt; &#039;image_example.pages.inc&#039;,
 363     ),
 364   );
 365 }
 366 
 367 /**
 368  * Formats a summary of an image colorize effect.
 369  *
 370  * @param $variables
 371  *   An associative array containing:
 372  *   - data: The current configuration for this colorize effect.
 373  */
 374 function theme_image_example_colorize_summary($variables) {
 375   $data = $variables[&#039;data&#039;];
 376   return t(&#039;as color #@color.&#039;, array(&#039;@color&#039; =&gt; $data[&#039;color&#039;]));
 377 }
 378 /**
 379  * @} End of &quot;defgroup image_example&quot;.
 380  */</pre>

</div>
<!-- EDIT4 SECTION "image_example.module" [1910-18776] -->
<h2 class="sectionedit5" id="image_examplepagesinc">image_example.pages.inc</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Page/form showing image styles in use.
   6  */
   7 
   8 /**
   9  * Form for uploading and displaying an image using selected style.
  10  *
  11  * This page provides a form that allows the user to upload an image and choose
  12  * a style from the list of defined image styles to use when displaying the
  13  * the image. This serves as an example of integrating image styles with your
  14  * module and as a way to demonstrate that the styles and effects defined by
  15  * this module are available via Drupal&#039;s image handling system.
  16  *
  17  * @see theme_image_style()
  18  *
  19  * @ingroup image_example
  20  */
  21 function image_example_style_form($form, &amp;$form_state) {
  22   // If there is already an uploaded image display the image here.
  23   if ($image_fid = variable_get(&#039;image_example_image_fid&#039;, FALSE)) {
  24     $image = file_load($image_fid);
  25     $style = variable_get(&#039;image_example_style_name&#039;, &#039;thumbnail&#039;);
  26     $form[&#039;image&#039;] = array(
  27       &#039;#markup&#039; =&gt; theme(&#039;image_example_image&#039;, array(&#039;image&#039; =&gt; $image, &#039;style&#039; =&gt; $style)),
  28     );
  29   }
  30 
  31   // Use the #managed_file FAPI element to upload an image file.
  32   $form[&#039;image_example_image_fid&#039;] = array(
  33     &#039;#title&#039; =&gt; t(&#039;Image&#039;),
  34     &#039;#type&#039; =&gt; &#039;managed_file&#039;,
  35     &#039;#description&#039; =&gt; t(&#039;The uploaded image will be displayed on this page using the image style choosen below.&#039;),
  36     &#039;#default_value&#039; =&gt; variable_get(&#039;image_example_image_fid&#039;, &#039;&#039;),
  37     &#039;#upload_location&#039; =&gt; &#039;public://image_example_images/&#039;,
  38   );
  39 
  40   // Provide a select field for choosing an image style to use when displaying
  41   // the image.
  42   $form[&#039;image_example_style_name&#039;] = array(
  43     &#039;#title&#039; =&gt; t(&#039;Image style&#039;),
  44     &#039;#type&#039; =&gt; &#039;select&#039;,
  45     &#039;#description&#039; =&gt; t(&#039;Choose an image style to use when displaying this image.&#039;),
  46     // The image_style_options() function returns an array of all available
  47     // image styles both the key and the value of the array are the image
  48     // style&#039;s name. The fucntion takes on paramater, a boolean flag
  49     // signifying wether or not the array should include a &lt;none&gt; option.
  50     &#039;#options&#039; =&gt; image_style_options(TRUE),
  51     &#039;#default_value&#039; =&gt; variable_get(&#039;image_example_style_name&#039;, &#039;&#039;),
  52   );
  53 
  54   // Submit Button.
  55   $form[&#039;submit&#039;] = array(
  56     &#039;#type&#039; =&gt; &#039;submit&#039;,
  57     &#039;#value&#039; =&gt; t(&#039;Save&#039;),
  58   );
  59 
  60   return $form;
  61 }
  62 
  63 /**
  64  * Verifies that the user supplied an image with the form..
  65  *
  66  * @ingroup image_example
  67  */
  68 function image_example_style_form_validate($form, &amp;$form_state) {
  69   if (!isset($form_state[&#039;values&#039;][&#039;image_example_image_fid&#039;]) || !is_numeric($form_state[&#039;values&#039;][&#039;image_example_image_fid&#039;])) {
  70     form_set_error(&#039;image_example_image_fid&#039;, t(&#039;Please select an image to upload.&#039;));
  71   }
  72 }
  73 
  74 /**
  75  * Form Builder; Display a form for uploading an image.
  76  *
  77  * @ingroup image_example
  78  */
  79 function image_example_style_form_submit($form, &amp;$form_state) {
  80   // When using the #managed_file form element the file is automatically
  81   // uploaded an saved to the {file} table. The value of the corresponding
  82   // form element is set to the {file}.fid of the new file.
  83 
  84 
  85   // If fid is not 0 we have a valid file.
  86   if ($form_state[&#039;values&#039;][&#039;image_example_image_fid&#039;] != 0) {
  87     // The new file&#039;s status is set to 0 or temporary and in order to ensure
  88     // that the file is not removed after 6 hours we need to change it&#039;s status
  89     // to 1. Save the ID of the uploaded image for later use.
  90     $file = file_load($form_state[&#039;values&#039;][&#039;image_example_image_fid&#039;]);
  91     $file-&gt;status = FILE_STATUS_PERMANENT;
  92     file_save($file);
  93 
  94     // When a module is managing a file, it must manage the usage count.
  95     // Here we increment the usage count with file_usage_add().
  96     file_usage_add($file, &#039;image_example&#039;, &#039;sample_image&#039;, 1);
  97 
  98     // Save the fid of the file so that the module can reference it later.
  99     variable_set(&#039;image_example_image_fid&#039;, $file-&gt;fid);
 100     drupal_set_message(t(&#039;The image @image_name was uploaded and saved with an ID of @fid and will be displayed using the style @style.&#039;, array(&#039;@image_name&#039; =&gt; $file-&gt;filename, &#039;@fid&#039; =&gt; $file-&gt;fid, &#039;@style&#039; =&gt; $form_state[&#039;values&#039;][&#039;image_example_style_name&#039;])));
 101   }
 102   // If the file was removed we need to remove the module&#039;s reference to the
 103   // removed file&#039;s fid, and remove the file.
 104   elseif ($form_state[&#039;values&#039;][&#039;image_example_image_fid&#039;] == 0) {
 105     // Retrieve the old file&#039;s id.
 106     $fid = variable_get(&#039;image_example_image_fid&#039;, FALSE);
 107     $file = $fid ? file_load($fid) : FALSE;
 108     if ($file) {
 109       // When a module is managing a file, it must manage the usage count.
 110       // Here we decrement the usage count with file_usage_delete().
 111       file_usage_delete($file, &#039;image_example&#039;, &#039;sample_image&#039;, 1);
 112 
 113       // The file_delete() function takes a file object and checks to see if
 114       // the file is being used by any other modules. If it is the delete
 115       // operation is cancelled, otherwise the file is deleted.
 116       file_delete($file);
 117     }
 118 
 119     // Either way the module needs to update it&#039;s reference since even if the
 120     // file is in use by another module and not deleted we no longer want to
 121     // use it.
 122     variable_set(&#039;image_example_image_fid&#039;, FALSE);
 123     drupal_set_message(t(&#039;The image @image_name was removed.&#039;, array(&#039;@image_name&#039; =&gt; $file-&gt;filename)));
 124   }
 125 
 126   // Save the name of the image style choosen by the user.
 127   variable_set(&#039;image_example_style_name&#039;, $form_state[&#039;values&#039;][&#039;image_example_style_name&#039;]);
 128 }
 129 
 130 /**
 131  * Theme function displays an image rendered using the specified style.
 132  *
 133  * @ingroup image_example
 134  */
 135 function theme_image_example_image($variables) {
 136   $image = $variables[&#039;image&#039;];
 137   $style = $variables[&#039;style&#039;];
 138 
 139   // theme_image_style() is the primary method for displaying images using
 140   // one of the defined styles. The $variables array passed to the theme
 141   // contains the following two important values:
 142   //   &#039;style_name&#039;: the name of the image style to use when displaying the
 143   //   image.
 144   //   &#039;path&#039;: the $file-&gt;uri of the image to display.
 145   // When given a style and an image path the function will first determine
 146   // if a derivative image already exists, in which case the existing image
 147   // will be displayed. If the derivative image does not already exist the
 148   // function returns an &lt;img&gt; tag with a specially crafted callback URL
 149   // as the src attribute for the tag. When accessed, the callback URL will
 150   // generate the derivative image and serve it to the browser.
 151   $output = theme(&#039;image_style&#039;, array(&#039;style_name&#039; =&gt; $style, &#039;path&#039; =&gt; $image-&gt;uri, &#039;getsize&#039; =&gt; FALSE));
 152   $output .= &#039;&lt;p&gt;&#039; . t(&#039;This image is being displayed using the image style %style_name.&#039;, array(&#039;%style_name&#039; =&gt; $style)) . &#039;&lt;/p&gt;&#039;;
 153   return $output;
 154 }</pre>

</div>
<!-- EDIT5 SECTION "image_example.pages.inc" [18777-26235] -->
<h2 class="sectionedit6" id="image_exampletest">image_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Test case for testing the image example module.
   6  *
   7  * This file contains the tests cases to check if the module is performing as
   8  * expected.
   9  */
  10 class ImageExampleTestCase extends DrupalWebTestCase {
  11   protected $web_user;
  12 
  13   public static function getInfo() {
  14     return array(
  15       &#039;name&#039; =&gt; &#039;Image example functionality&#039;,
  16       &#039;description&#039; =&gt; &#039;Test functionality of the Image Example module.&#039;,
  17       &#039;group&#039; =&gt; &#039;Examples&#039;,
  18     );
  19   }
  20 
  21   /**
  22    * Enable modules and create user with specific permissions.
  23    */
  24   function setUp() {
  25     parent::setUp(&#039;image_example&#039;);
  26     // Create user with permission to administer image styles.
  27     $this-&gt;web_user = $this-&gt;drupalCreateUser(array(&#039;administer image styles&#039;, &#039;administer blocks&#039;));
  28   }
  29 
  30   /**
  31    * Test implementations of image API hooks.
  32    */
  33   function testImageExample() {
  34     // Login the admin user.
  35     $this-&gt;drupalLogin($this-&gt;web_user);
  36 
  37     // Verify that the default style added by
  38     // image_example_image_default_styles() is in the list of image styles.
  39     $image_styles = image_styles();
  40     $this-&gt;assertTrue(isset($image_styles[&#039;image_example_style&#039;]), &#039;The default style image_example_style is in the list of image styles.&#039;);
  41 
  42     // Verify that the effect added to the default &#039;thumbnail&#039; style by
  43     // image_example_image_styles_alter() is present.
  44     $this-&gt;assertTrue((isset($image_styles[&#039;thumbnail&#039;][&#039;effects&#039;][1][&#039;name&#039;]) &amp;&amp; $image_styles[&#039;thumbnail&#039;][&#039;effects&#039;][1][&#039;name&#039;] == &#039;image_example_colorize&#039;), &#039;Effect added to the thumbnail style via hook_image_styles_alter() is present.&#039;);
  45 
  46     // Create a new image style and add the effect provided by
  47     // image_example_effect_info().
  48     $new_style = array(&#039;name&#039; =&gt; drupal_strtolower($this-&gt;randomName()));
  49     $new_style = image_style_save($new_style);
  50     $this-&gt;assertTrue(isset($new_style[&#039;isid&#039;]), format_string(&#039;Image style @style_name created.&#039;, array(&#039;@style_name&#039; =&gt; $new_style[&#039;name&#039;])));
  51 
  52     $edit = array(
  53       &#039;new&#039; =&gt; &#039;image_example_colorize&#039;,
  54     );
  55     $this-&gt;drupalPost(&#039;admin/config/media/image-styles/edit/&#039; . $new_style[&#039;name&#039;], $edit, t(&#039;Add&#039;));
  56 
  57     // Verify the &#039;color&#039; field provided by image_example_colorize_form()
  58     // appears on the effect configuration page. And that we can fill it out.
  59     $this-&gt;assertField(&#039;data[color]&#039;, &#039;Color field provided by image_example_effect_colorize_form is present on effect configuration page.&#039;);
  60     $edit = array(
  61       &#039;data[color]&#039; =&gt; &#039;#000000&#039;,
  62     );
  63     $this-&gt;drupalPost(NULL, $edit, t(&#039;Add effect&#039;));
  64     $this-&gt;assertText(t(&#039;The image effect was successfully applied.&#039;), format_string(&#039;Colorize effect added to @style_name.&#039;, array(&#039;@style_name&#039; =&gt; $new_style[&#039;name&#039;])));
  65 
  66     // Set the variable &#039;image_example_style_name&#039; to the name of our new style
  67     // then rename the style and ensure the variable name is changed.
  68 
  69     // @todo Enable this block once http://drupal.org/node/713872 is fixed.
  70     if (defined(&#039;bug_713872_fixed&#039;)) {
  71       $style = image_style_load($new_style[&#039;name&#039;]);
  72       variable_set(&#039;image_example_style_name&#039;, $style[&#039;name&#039;]);
  73       $style[&#039;name&#039;] = drupal_strtolower($this-&gt;randomName());
  74       $style = image_style_save($style);
  75       $variable = variable_get(&#039;image_example_style_name&#039;, &#039;&#039;);
  76       $this-&gt;assertTrue(($variable == $style[&#039;name&#039;]), &#039;Variable image_example_style_name successfully updated when renaming image style.&#039;);
  77     }
  78   }
  79 
  80   /**
  81    * Tests for image block provided by module.
  82    */
  83   function testImageExamplePage() {
  84     // Login the admin user.
  85     $this-&gt;drupalLogin($this-&gt;web_user);
  86     $this-&gt;drupalCreateNode(array(&#039;promote&#039; =&gt; 1));
  87 
  88     // Upload an image to the image page.
  89     $images = $this-&gt;drupalGetTestFiles(&#039;image&#039;);
  90     $edit = array(
  91       &#039;files[image_example_image_fid]&#039; =&gt; drupal_realpath($images[0]-&gt;uri),
  92       &#039;image_example_style_name&#039; =&gt; &#039;image_example_style&#039;,
  93     );
  94     $this-&gt;drupalPost(&#039;image_example/styles&#039;, $edit, t(&#039;Save&#039;));
  95     $this-&gt;assertText(t(&#039;The image @image_name was uploaded&#039;, array(&#039;@image_name&#039; =&gt; $images[0]-&gt;filename)), &#039;Image uploaded to image block.&#039;);
  96 
  97     // Verify the image is displayed.
  98     $this-&gt;drupalGet(&#039;image_example/styles&#039;);
  99     $fid = variable_get(&#039;image_example_image_fid&#039;, FALSE);
 100     $image = isset($fid) ? file_load($fid) : NULL;
 101     $this-&gt;assertRaw(file_uri_target($image-&gt;uri), &#039;Image is displayed&#039;);
 102   }
 103 }</pre>

</div>
<!-- EDIT6 SECTION "image_example.test" [26236-] -->