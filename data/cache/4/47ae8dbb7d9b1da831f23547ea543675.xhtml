
<h1 class="sectionedit1" id="simpletest_example">SimpleTest Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "SimpleTest Example" [1-34] -->
<h2 class="sectionedit2" id="simpletest_exampleinfo">simpletest_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Simpletest Example
   2 description = Provides simpletest_example page node type.
   3 package = Example modules
   4 core = 7.x
   5 dependencies[] = simpletest
   6 files[] = simpletest_example.test</pre>

</div>
<!-- EDIT2 SECTION "simpletest_example.info" [35-298] -->
<h2 class="sectionedit3" id="simpletest_exampleinstall">simpletest_example.install</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Install, update and uninstall functions for the simpletest_example module.
   6  */
   7 
   8 /**
   9  * Implements hook_install().
  10  */
  11 function simpletest_example_install() {
  12   // Ensure the simpletest_example node type is available.
  13   node_types_rebuild();
  14   $types = node_type_get_types();
  15   node_add_body_field($types[&#039;simpletest_example&#039;]);
  16 }
  17 
  18 /**
  19  * Adds a body field to the simpletest_example node type.
  20  */
  21 function simpletest_example_update_7001() {
  22   node_types_rebuild();
  23   $types = node_type_get_types();
  24   node_add_body_field($types[&#039;simpletest_example&#039;]);
  25 }</pre>

</div>
<!-- EDIT3 SECTION "simpletest_example.install" [299-1054] -->
<h2 class="sectionedit4" id="simpletest_examplemodule">simpletest_example.module</h2>
<div class="level2">
<pre class="code">1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Module file for simpletest_example
   6  */
   7 
   8 /**
   9  * @defgroup simpletest_example Example: Simpletest
  10  * @ingroup examples
  11  * @{
  12  * An example of simpletest tests to accompany the tutorial at
  13  * http://drupal.org/node/890654.
  14  *
  15  * This is built on a traditional node-type implementation.
  16  */
  17 
  18 /**
  19  * Implements hook_node_info().
  20  */
  21 function simpletest_example_node_info() {
  22   return array(
  23     &#039;simpletest_example&#039; =&gt; array(
  24       &#039;name&#039; =&gt; t(&#039;Simpletest Example Node Type&#039;),
  25       &#039;base&#039; =&gt; &#039;simpletest_example&#039;,
  26       &#039;description&#039; =&gt; t(&#039;simpletest_example page node type.&#039;),
  27   )
  28   );
  29 }
  30 
  31 /**
  32  * Implements hook_permission().
  33  *
  34  * In this case we&#039;re adding an addition permission that does the same
  35  * as the one the node module offers, just to demonstrate this error.
  36  */
  37 function simpletest_example_permission() {
  38   $perms = array();
  39   $perms[&#039;extra special edit any simpletest_example&#039;] = array(&#039;title&#039; =&gt; t(&#039;Extra special edit any Simpletest Example&#039;), &#039;description&#039; =&gt; t(&#039;Extra special edit any Simpletest Example&#039;));
  40   return $perms;
  41 }
  42 
  43 /**
  44  * Implements hook_node_access().
  45  *
  46  * Demonstrates a bug that we&#039;ll find in our test.
  47  *
  48  * If this is running on the testbot, we don&#039;t want the error to show so will
  49  * work around it by testing to see if we&#039;re in the &#039;checkout&#039; directory.
  50  */
  51 function simpletest_example_node_access($node, $op, $account) {
  52   // Don&#039;t get involved if this isn&#039;t a simpletest_example node, etc.
  53   $type = is_string($node) ? $node : $node-&gt;type;
  54   if ($type != &#039;simpletest_example&#039; || ($op != &#039;update&#039; &amp;&amp; $op != &#039;delete&#039;)) {
  55     return NODE_ACCESS_IGNORE;
  56   }
  57 
  58   // This code has a BUG that we&#039;ll find in testing.
  59 
  60   // This is the incorrect version we&#039;ll use to demonstrate test failure.
  61   // The correct version should have ($op == &#039;update&#039; || $op == &#039;delete&#039;).
  62   // The author had mistakenly always tested with User 1 so it always
  63   // allowed access and the bug wasn&#039;t noticed!
  64   if ( ($op == &#039;delete&#039;)  &amp;&amp; (user_access(&#039;extra special edit any simpletest_example&#039;, $account) &amp;&amp; ($account-&gt;uid == $node-&gt;uid))) {
  65     return NODE_ACCESS_ALLOW;
  66   }
  67 
  68   return NODE_ACCESS_DENY;
  69 }
  70 
  71 /**
  72  * Implements hook_form().
  73  *
  74  * Form for the node type.
  75  */
  76 function simpletest_example_form($node, $form_state) {
  77   $type = node_type_get_type($node);
  78   $form = array();
  79   if ($type-&gt;has_title) {
  80     $form[&#039;title&#039;] = array(
  81       &#039;#type&#039; =&gt; &#039;textfield&#039;,
  82       &#039;#title&#039; =&gt; check_plain($type-&gt;title_label),
  83       &#039;#required&#039; =&gt; TRUE,
  84       &#039;#default_value&#039; =&gt; $node-&gt;title,
  85       &#039;#maxlength&#039; =&gt; 255,
  86       &#039;#weight&#039; =&gt; -5,
  87     );
  88   }
  89   return $form;
  90 }
  91 
  92 /**
  93  * Implements hook_menu().
  94  *
  95  * Provides an explanation.
  96  */
  97 function simpletest_example_menu() {
  98   $items[&#039;examples/simpletest_example&#039;] = array(
  99     &#039;title&#039;           =&gt; &#039;Simpletest Example&#039;,
 100     &#039;description&#039;     =&gt; &#039;Explain the simpletest example and allow the error logic to be executed.&#039;,
 101     &#039;page callback&#039;   =&gt; &#039;_simpletest_example_explanation&#039;,
 102     &#039;access callback&#039; =&gt; TRUE,
 103   );
 104   return $items;
 105 }
 106 
 107 /**
 108  * Returns an explanation of this module.
 109  */
 110 function _simpletest_example_explanation() {
 111 
 112   $explanation =  t(&quot;This Simpletest Example is designed to give an introductory tutorial to writing
 113     a simpletest test. Please see the &lt;a href=&#039;http://drupal.org/node/890654&#039;&gt;associated tutorial&lt;/a&gt;.&quot;);
 114   return $explanation;
 115 }
 116 
 117 /**
 118  * A simple self-contained function used to demonstrate unit tests.
 119  *
 120  * @see SimpletestUnitTestExampleTestCase
 121  */
 122 function simpletest_example_empty_mysql_date($date_string) {
 123   if (empty($date_string) || $date_string == &#039;0000-00-00&#039; || $date_string == &#039;0000-00-00 00:00:00&#039;) {
 124     return true;
 125   }
 126   return false;
 127 }
 128 
 129 /**
 130  * @} End of &quot;defgroup simpletest_example&quot;.
 131  */</pre>

</div>
<!-- EDIT4 SECTION "simpletest_example.module" [1055-5472] -->
<h2 class="sectionedit5" id="simpletest_exampletest">simpletest_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * An example of simpletest tests to accompany the tutorial at
   6  * http://drupal.org/node/890654.
   7  */
   8 
   9 /**
  10  * The SimpletestExampleTestCase is a functional test case, meaning that it
  11  * actually exercises a particular sequence of actions through the web UI.
  12  * The majority of core test cases are done this way, but the Simpletest suite
  13  * also provides unit tests as demonstrated in the unit test case example later
  14  * in this file.
  15  *
  16  * Functional test cases are far slower to execute than unit test cases because
  17  * they require a complete Drupal install to be done for each test.
  18  *
  19  * @see DrupalWebTestCase
  20  * @see SimpletestUnitTestExampleTestCase
  21  */
  22 class SimpletestExampleTestCase extends DrupalWebTestCase {
  23   protected $privileged_user;
  24 
  25   public static function getInfo() {
  26     return array(
  27       &#039;name&#039; =&gt; &#039;Simpletest Example&#039;,
  28       &#039;description&#039; =&gt; &#039;Ensure that the simpletest_example content type provided functions properly.&#039;,
  29       &#039;group&#039; =&gt; &#039;Examples&#039;,
  30     );
  31   }
  32 
  33   public function setUp() {
  34     parent::setUp(&#039;simpletest_example&#039;);  // Enable any modules required for the test
  35     // Create and log in our user. The user has the arbitrary privilege
  36     // &#039;extra special edit any simpletest_example&#039; which the code uses
  37     // to grant access.
  38     $this-&gt;privileged_user = $this-&gt;drupalCreateUser(array(&#039;create simpletest_example content&#039;, &#039;extra special edit any simpletest_example&#039;));
  39     $this-&gt;drupalLogin($this-&gt;privileged_user);
  40   }
  41 
  42   // Create a simpletest_example node using the node form
  43   public function testSimpleTestExampleCreate() {
  44     // Create node to edit.
  45     $edit = array();
  46     $edit[&#039;title&#039;] = $this-&gt;randomName(8);
  47     $edit[&quot;body[und][0][value]&quot;] = $this-&gt;randomName(16);
  48     $this-&gt;drupalPost(&#039;node/add/simpletest-example&#039;, $edit, t(&#039;Save&#039;));
  49     $this-&gt;assertText(t(&#039;Simpletest Example Node Type @title has been created.&#039;, array(&#039;@title&#039; =&gt; $edit[&#039;title&#039;])));
  50   }
  51 
  52   // Create a simpletest_example node and then see if our user can edit it
  53   public function testSimpleTestExampleEdit() {
  54     $settings = array(
  55       &#039;type&#039; =&gt; &#039;simpletest_example&#039;,
  56       &#039;title&#039; =&gt; $this-&gt;randomName(32),
  57       &#039;body&#039; =&gt; array(LANGUAGE_NONE =&gt; array(array($this-&gt;randomName(64)))),
  58     );
  59     $node = $this-&gt;drupalCreateNode($settings);
  60 
  61     // For debugging, we might output the node structure with $this-&gt;verbose()
  62     $this-&gt;verbose(&#039;Node created: &#039; . var_export($node, TRUE));
  63     // It would only be output if the testing settings had &#039;verbose&#039; set.
  64 
  65     // We&#039;ll run this test normally, but not on the testbot, as it would
  66     // indicate that the examples module was failing tests.
  67     if (!$this-&gt;runningOnTestbot()) {
  68       // The debug() statement will output information into the test results.
  69       // It can also be used in Drupal 7 anywhere in code and will come out
  70       // as a drupal_set_message().
  71       debug(&#039;We are not running on the PIFR testing server, so will go ahead and catch the failure.&#039;);
  72       $this-&gt;drupalGet(&quot;node/{$node-&gt;nid}/edit&quot;);
  73       // Make sure we don&#039;t get a 401 unauthorized response:
  74       $this-&gt;assertResponse(200, &#039;User is allowed to edit the content.&#039;);
  75 
  76       // Looking for title text in the page to determine whether we were
  77       // successful opening edit form.
  78       $this-&gt;assertText(t(&quot;@title&quot;, array(&#039;@title&#039; =&gt; $settings[&#039;title&#039;])), &quot;Found title in edit form&quot;);
  79     }
  80   }
  81 
  82   /**
  83    * Detect if we&#039;re running on PIFR testbot; skip intentional failure in that
  84    * case. It happens that on the testbot the site under test is in a directory
  85    * named &#039;checkout&#039; or &#039;site_under_test&#039;.
  86    *
  87    * @return boolean
  88    *   TRUE if running on testbot.
  89    */
  90   public function runningOnTestbot() {
  91     return (file_exists(&quot;../checkout&quot;) || file_exists(&quot;../site_under_test&quot;));
  92   }
  93 }
  94 
  95 
  96 /**
  97  * Although most core test cases are based on DrupalWebTestCase and are
  98  * functional tests (exercising the web UI) we also have DrupalUnitTestCase,
  99  * which executes much faster because a Drupal install does not have to be
 100  * one. No environment is provided to a test case based on DrupalUnitTestCase;
 101  * it must be entirely self-contained.
 102  *
 103  * @see DrupalUnitTestCase
 104  */
 105 class SimpletestUnitTestExampleTestCase extends DrupalUnitTestCase {
 106 
 107   public static function getInfo() {
 108     return array(
 109       &#039;name&#039; =&gt; &#039;Simpletest Example unit tests&#039;,
 110       &#039;description&#039; =&gt; &#039;Test that simpletest_example_empty_mysql_date works properly.&#039;,
 111       &#039;group&#039; =&gt; &#039;Examples&#039;,
 112     );
 113   }
 114 
 115   function setUp() {
 116     drupal_load(&#039;module&#039;, &#039;simpletest_example&#039;);
 117     parent::setUp();
 118   }
 119 
 120   /**
 121    * Call simpletest_example_empty_mysql_date and check that it returns correct
 122    * result.
 123    *
 124    * Note that no environment is provided; we&#039;re just testing the correct
 125    * behavior of a function when passed specific arguments.
 126    */
 127   public function testSimpletestUnitTestExampleFunction() {
 128     $result = simpletest_example_empty_mysql_date(NULL);
 129     // Note that test assertion messages should never be translated, so
 130     // this string is not wrapped in t().
 131     $message = &#039;A NULL value should return TRUE.&#039;;
 132     $this-&gt;assertTrue($result, $message);
 133 
 134     $result = simpletest_example_empty_mysql_date(&#039;&#039;);
 135     $message = &#039;An empty string should return TRUE.&#039;;
 136     $this-&gt;assertTrue($result, $message);
 137 
 138     $result = simpletest_example_empty_mysql_date(&#039;0000-00-00&#039;);
 139     $message = &#039;An &quot;empty&quot; MySQL DATE should return TRUE.&#039;;
 140     $this-&gt;assertTrue($result, $message);
 141 
 142     $result = simpletest_example_empty_mysql_date(date(&#039;Y-m-d&#039;));
 143     $message = &#039;A valid date should return FALSE.&#039;;
 144     $this-&gt;assertFalse($result, $message);
 145   }
 146 }</pre>

</div>
<!-- EDIT5 SECTION "simpletest_example.test" [5473-] -->