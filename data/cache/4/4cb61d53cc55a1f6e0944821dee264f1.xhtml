
<h1 class="sectionedit1" id="menu_example">Menu Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Menu Example" [1-28] -->
<h2 class="sectionedit2" id="menu_exampleinfo">menu_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Menu example
   2 description = An example of advanced uses of the menu APIs.
   3 package = Example modules
   4 core = 7.x
   5 files[] = menu_example.test</pre>

</div>
<!-- EDIT2 SECTION "menu_example.info" [29-243] -->
<h2 class="sectionedit3" id="menu_examplemodule">menu_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Module file for menu_example.
   6  */
   7 
   8 /**
   9  * @defgroup menu_example Example: Menu
  10  * @ingroup examples
  11  * @{
  12  * Demonstrates uses of the Menu APIs in Drupal.
  13  *
  14  * The Page Example module also talks about the menu system, as well
  15  * as how to use menu arguments to generate pages.
  16  *
  17  * @see hook_menu()
  18  * @see hook_menu_alter()
  19  * @see hook_menu_link_alter()
  20  * @see page_example
  21  * @see page_example_menu()
  22  */
  23 
  24 /**
  25  * Implements hook_menu().
  26  */
  27 function menu_example_menu() {
  28 
  29   // A simple example which defines a page callback and a menu entry.
  30 
  31   // Menu items are defined by placing them in an $items array. The array key
  32   // (in this case &#039;menu_example&#039;) is the path that defines the menu router
  33   // entry, so the page will be accessible from the URL
  34   // example.com/examples/menu_example.
  35   $items[&#039;examples/menu_example&#039;] = array(
  36     // We are using the default menu type, so this can be omitted.
  37     // &#039;type&#039; =&gt; MENU_NORMAL_ITEM,
  38 
  39     // The menu title. Do NOT use t() which is called by default. You can
  40     // override the use of t() by defining a &#039;title callback&#039;. This is explained
  41     // in the &#039;menu_example/title_callbacks&#039; example below.
  42     &#039;title&#039; =&gt; &#039;Menu Example&#039;,
  43 
  44     // Description (hover flyover for menu link). Does NOT use t(), which is
  45     // called automatically.
  46     &#039;description&#039; =&gt; &#039;Simplest possible menu type, and the parent menu entry for others&#039;,
  47 
  48     // Function to be called when this path is accessed.
  49     &#039;page callback&#039; =&gt; &#039;_menu_example_basic_instructions&#039;,
  50 
  51     // Arguments to the page callback. Here&#039;s we&#039;ll use them just to provide
  52     // content for our page.
  53     &#039;page arguments&#039; =&gt; array(t(&#039;This page is displayed by the simplest (and base) menu example. Note that the title of the page is the same as the link title. You can also &lt;a href=&quot;!link&quot;&gt;visit a similar page with no menu link&lt;/a&gt;. Also, note that there is a hook_menu_alter() example that has changed the path of one of the menu items.&#039;, array(&#039;!link&#039; =&gt; url(&#039;examples/menu_example/path_only&#039;)))),
  54 
  55     // If the page is meant to be accessible to all users, you can set &#039;access
  56     // callback&#039; to TRUE. This bypasses all access checks. For an explanation on
  57     // how to use the permissions system to restrict access for certain users,
  58     // see the example &#039;examples/menu_example/permissioned/controlled&#039; below.
  59     &#039;access callback&#039; =&gt; TRUE,
  60 
  61     // If the page callback is located in another file, specify it here and
  62     // that file will be automatically loaded when needed.
  63     // &#039;file&#039; =&gt; &#039;menu_example.module&#039;,
  64 
  65     // We can choose which menu gets the link. The default is &#039;navigation&#039;.
  66     // &#039;menu_name&#039; =&gt; &#039;navigation&#039;,
  67 
  68     // Show the menu link as expanded.
  69     &#039;expanded&#039; =&gt; TRUE,
  70   );
  71 
  72   // Show a menu link in a menu other than the default &quot;Navigation&quot; menu.
  73   // The menu must already exist.
  74   $items[&#039;examples/menu_example_alternate_menu&#039;] = array(
  75     &#039;title&#039; =&gt; &#039;Menu Example: Menu in alternate menu&#039;,
  76 
  77     // Machine name of the menu in which the link should appear.
  78     &#039;menu_name&#039; =&gt; &#039;primary-links&#039;,
  79 
  80     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
  81     &#039;page arguments&#039; =&gt; array(t(&#039;This will be in the Primary Links menu instead of the default Navigation menu&#039;)),
  82     &#039;access callback&#039; =&gt; TRUE,
  83   );
  84 
  85   // A menu entry with simple permissions using user_access().
  86 
  87   // First, provide a courtesy menu item that mentions the existence of the
  88   // permissioned item.
  89   $items[&#039;examples/menu_example/permissioned&#039;] = array(
  90     &#039;title&#039; =&gt; &#039;Permissioned Example&#039;,
  91     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
  92     &#039;page arguments&#039; =&gt; array(t(&#039;A menu item that requires the &quot;access protected menu example&quot; permission is at &lt;a href=&quot;!link&quot;&gt;examples/menu_example/permissioned/controlled&lt;/a&gt;&#039;, array(&#039;!link&#039; =&gt; url(&#039;examples/menu_example/permissioned/controlled&#039;)))),
  93     &#039;access callback&#039; =&gt; TRUE,
  94     &#039;expanded&#039; =&gt; TRUE,
  95   );
  96 
  97   // Now provide the actual permissioned menu item.
  98   $items[&#039;examples/menu_example/permissioned/controlled&#039;] = array(
  99 
 100     // The title - do NOT use t() as t() is called automatically.
 101     &#039;title&#039; =&gt; &#039;Permissioned Menu Item&#039;,
 102     &#039;description&#039; =&gt; &#039;This menu entry will not appear and the page will not be accessible without the &quot;access protected menu example&quot; permission.&#039;,
 103     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 104     &#039;page arguments&#039; =&gt; array(t(&#039;This menu entry will not show and the page will not be accessible without the &quot;access protected menu example&quot; permission.&#039;)),
 105 
 106     // For a permissioned menu entry, we provide an access callback which
 107     // determines whether the current user should have access. The default is
 108     // user_access(), which we&#039;ll use in this case. Since it&#039;s the default,
 109     // we don&#039;t even have to enter it.
 110     // &#039;access callback&#039; =&gt; &#039;user_access&#039;,
 111 
 112     // The &#039;access arguments&#039; are passed to the &#039;access callback&#039; to help it
 113     // do its job. In the case of user_access(), we need to pass a permission
 114     // as the first argument.
 115     &#039;access arguments&#039; =&gt; array(&#039;access protected menu example&#039;),
 116 
 117     // The optional weight element tells how to order the submenu items.
 118     // Higher weights are &quot;heavier&quot;, dropping to the bottom of the menu.
 119     &#039;weight&#039; =&gt; 10,
 120   );
 121 
 122   /*
 123    * We will define our own &quot;access callback&quot; function i.e is &quot;menu_example_custom_access&quot;,
 124    * rather than the default &#039;user_access&#039;.
 125    *
 126    * The function takes a &quot;role&quot; of the user as an argument.
 127    */
 128   $items[&#039;examples/menu_example/custom_access&#039;] = array(
 129     &#039;title&#039; =&gt; &#039;Custom Access Example&#039;,
 130      &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 131     &#039;page arguments&#039; =&gt; array(t(&#039;A menu item that requires the user to posess a role of &quot;authenticated user&quot; is at &lt;a href=&quot;!link&quot;&gt;examples/menu_example/custom_access/page&lt;/a&gt;&#039;, array(&#039;!link&#039; =&gt; url(&#039;examples/menu_example/custom_access/page&#039;)))),
 132     &#039;access callback&#039; =&gt; TRUE,
 133     &#039;expanded&#039; =&gt; TRUE,
 134     &#039;weight&#039; =&gt; -5,
 135   );
 136 
 137   $items[&#039;examples/menu_example/custom_access/page&#039;] = array(
 138     &#039;title&#039; =&gt; &#039;Custom Access Menu Item&#039;,
 139     &#039;description&#039; =&gt; &#039;This menu entry will not show and the page will not be accessible without the user being an &quot;authenticated user&quot;.&#039;,
 140     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 141     &#039;page arguments&#039; =&gt; array(t(&#039;This menu entry will not be visible and access will result in a 403 error unless the user has the &quot;authenticated user&quot; role. This is accomplished with a custom access callback.&#039;)),
 142     &#039;access callback&#039; =&gt; &#039;menu_example_custom_access&#039;,
 143     &#039;access arguments&#039; =&gt; array(&#039;authenticated user&#039;),
 144   );
 145 
 146   // A menu router entry with no menu link. This could be used any time we
 147   // don&#039;t want the user to see a link in the menu. Otherwise, it&#039;s the same
 148   // as the &quot;simplest&quot; entry above. MENU_CALLBACK is used for all menu items
 149   // which don&#039;t need a visible menu link, including services and other pages
 150   // that may be linked to but are not intended to be accessed directly.
 151 
 152   // First, provide a courtesy link in the menu so people can find this.
 153   $items[&#039;examples/menu_example/path_only&#039;] = array(
 154     &#039;title&#039; =&gt; &#039;MENU_CALLBACK example&#039;,
 155     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 156     &#039;page arguments&#039; =&gt; array(t(&#039;A menu entry with no menu link (MENU_CALLBACK) is at &lt;a href=&quot;!link&quot;&gt;!link&lt;/a&gt;&#039;, array(&#039;!link&#039; =&gt; url(&#039;examples/menu_example/path_only/callback&#039;)))),
 157     &#039;access callback&#039; =&gt; TRUE,
 158     &#039;weight&#039; =&gt; 20,
 159   );
 160   $items[&#039;examples/menu_example/path_only/callback&#039;] = array(
 161 
 162     // A type of MENU_CALLBACK means leave the path completely out of the menu
 163     // links.
 164     &#039;type&#039; =&gt; MENU_CALLBACK,
 165 
 166     // The title is still used for the page title, even though it&#039;s not used
 167     // for the menu link text, since there&#039;s no menu link.
 168     &#039;title&#039; =&gt; &#039;Callback Only&#039;,
 169 
 170     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 171     &#039;page arguments&#039; =&gt; array(t(&#039;The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.&#039;)),
 172     &#039;access callback&#039; =&gt; TRUE,
 173   );
 174 
 175 
 176   // A menu entry with tabs.
 177   // For tabs we need at least 3 things:
 178   // 1. A parent MENU_NORMAL_ITEM menu item (examples/menu_example/tabs in this
 179   //    example.)
 180   // 2. A primary tab (the one that is active when we land on the base menu).
 181   //    This tab is of type MENU_DEFAULT_LOCAL_TASK.
 182   // 3. Some other menu entries for the other tabs, of type MENU_LOCAL_TASK.
 183   $items[&#039;examples/menu_example/tabs&#039;] = array(
 184     // &#039;type&#039; =&gt; MENU_NORMAL_ITEM,  // Not necessary since this is the default.
 185     &#039;title&#039; =&gt; &#039;Tabs&#039;,
 186     &#039;description&#039; =&gt; &#039;Shows how to create primary and secondary tabs&#039;,
 187     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 188     &#039;page arguments&#039; =&gt; array(t(&#039;This is the &quot;tabs&quot; menu entry.&#039;)),
 189     &#039;access callback&#039; =&gt; TRUE,
 190     &#039;weight&#039; =&gt; 30,
 191   );
 192 
 193   // For the default local task, we need very little configuration, as the
 194   // callback and other conditions are handled by the parent callback.
 195   $items[&#039;examples/menu_example/tabs/default&#039;] = array(
 196     &#039;type&#039; =&gt; MENU_DEFAULT_LOCAL_TASK,
 197     &#039;title&#039; =&gt; &#039;Default primary tab&#039;,
 198     &#039;weight&#039; =&gt; 1,
 199   );
 200   // Now add the rest of the tab entries.
 201   foreach (array(t(&#039;second&#039;) =&gt; 2, t(&#039;third&#039;) =&gt; 3, t(&#039;fourth&#039;) =&gt; 4) as $tabname =&gt; $weight) {
 202     $items[&quot;examples/menu_example/tabs/$tabname&quot;] = array(
 203       &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 204       &#039;title&#039; =&gt; $tabname,
 205       &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 206       &#039;page arguments&#039; =&gt; array(t(&#039;This is the tab &quot;@tabname&quot; in the &quot;basic tabs&quot; example&#039;, array(&#039;@tabname&#039; =&gt; $tabname))),
 207       &#039;access callback&#039; =&gt; TRUE,
 208 
 209     // The weight property overrides the default alphabetic ordering of menu
 210     // entries, allowing us to get our tabs in the order we want.
 211       &#039;weight&#039; =&gt; $weight,
 212     );
 213   }
 214 
 215   // Finally, we&#039;ll add secondary tabs to the default tab of the tabs entry.
 216 
 217   // The default local task needs very little information.
 218   $items[&#039;examples/menu_example/tabs/default/first&#039;] = array(
 219     &#039;type&#039; =&gt; MENU_DEFAULT_LOCAL_TASK,
 220     &#039;title&#039; =&gt; &#039;Default secondary tab&#039;,
 221     // The additional page callback and related items are handled by the
 222     // parent menu item.
 223   );
 224   foreach (array(t(&#039;second&#039;), t(&#039;third&#039;)) as $tabname) {
 225     $items[&quot;examples/menu_example/tabs/default/$tabname&quot;] = array(
 226       &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 227       &#039;title&#039; =&gt; $tabname,
 228       &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 229       &#039;page arguments&#039; =&gt; array(t(&#039;This is the secondary tab &quot;@tabname&quot; in the &quot;basic tabs&quot; example &quot;default&quot; tab&#039;, array(&#039;@tabname&#039; =&gt; $tabname))),
 230       &#039;access callback&#039; =&gt; TRUE,
 231     );
 232   }
 233 
 234   // All the portions of the URL after the base menu are passed to the page
 235   // callback as separate arguments, and can be captured by the page callback
 236   // in its argument list. Our _menu_example_menu_page() function captures
 237   // arguments in its function signature and can output them.
 238   $items[&#039;examples/menu_example/use_url_arguments&#039;] = array(
 239     &#039;title&#039; =&gt; &#039;Extra Arguments&#039;,
 240     &#039;description&#039; =&gt; &#039;The page callback can use the arguments provided after the path used as key&#039;,
 241     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 242     &#039;page arguments&#039; =&gt; array(t(&#039;This page demonstrates using arguments in the path (portions of the path after &quot;menu_example/url_arguments&quot;. For example, access it with &lt;a href=&quot;!link1&quot;&gt;!link1&lt;/a&gt; or &lt;a href=&quot;!link2&quot;&gt;!link2&lt;/a&gt;).&#039;, array(&#039;!link1&#039; =&gt; url(&#039;examples/menu_example/use_url_arguments/one/two&#039;), &#039;!link2&#039; =&gt; url(&#039;examples/menu_example/use_url_arguments/firstarg/secondarg&#039;)))),
 243     &#039;access callback&#039; =&gt; TRUE,
 244     &#039;weight&#039; =&gt; 40,
 245   );
 246 
 247   // The menu title can be dynamically created by using the &#039;title callback&#039;
 248   // which by default is t(). Here we provide a title callback which adjusts
 249   // the menu title based on the current user&#039;s username.
 250   $items[&#039;examples/menu_example/title_callbacks&#039;] = array(
 251     &#039;title callback&#039; =&gt; &#039;_menu_example_simple_title_callback&#039;,
 252     &#039;title arguments&#039; =&gt; array(t(&#039;Dynamic title: username=&#039;)),
 253     &#039;description&#039; =&gt; &#039;The title of this menu item is dynamically generated&#039;,
 254     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 255     &#039;page arguments&#039; =&gt; array(t(&#039;The menu title is dynamically changed by the title callback&#039;)),
 256     &#039;access callback&#039; =&gt; TRUE,
 257     &#039;weight&#039; =&gt; 50,
 258   );
 259 
 260   // Sometimes we need to capture a specific argument within the menu path,
 261   // as with the menu entry &#039;example/menu_example/placeholder_argument/3333/display&#039;,
 262   // where we need to capture the &quot;3333&quot;. In that case, we use a placeholder in
 263   // the path provided in the menu entry. The (odd) way this is done is by using
 264   // array(numeric_position_value) as the value for &#039;page arguments&#039;. The
 265   // numeric_position_value is the zero-based index of the portion of the URL
 266   // which should be passed to the &#039;page callback&#039;.
 267 
 268   // First we provide a courtesy link with information on how to access
 269   // an item with a placeholder.
 270   $items[&#039;examples/menu_example/placeholder_argument&#039;] = array(
 271     &#039;title&#039; =&gt; &#039;Placeholder Arguments&#039;,
 272     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 273     &#039;page arguments&#039; =&gt; array(t(&#039;Demonstrate placeholders by visiting &lt;a href=&quot;!link&quot;&gt;examples/menu_example/placeholder_argument/3343/display&lt;/a&gt;&#039;, array(&#039;!link&#039; =&gt; url(&#039;examples/menu_example/placeholder_argument/3343/display&#039;)))),
 274     &#039;access callback&#039; =&gt; TRUE,
 275     &#039;weight&#039; =&gt; 60,
 276   );
 277 
 278   // Now the actual entry.
 279   $items[&#039;examples/menu_example/placeholder_argument/%/display&#039;] = array(
 280     &#039;title&#039; =&gt; &#039;Placeholder Arguments&#039;,
 281     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 282 
 283     // Pass the value of &#039;%&#039;, which is zero-based argument 3, to the
 284     // &#039;page callback&#039;. So if the URL is
 285     // &#039;examples/menu_example/placeholder_argument/333/display&#039; then the value 333
 286     // will be passed into the &#039;page callback&#039;.
 287     &#039;page arguments&#039; =&gt; array(3),
 288     &#039;access callback&#039; =&gt; TRUE,
 289   );
 290 
 291   // Drupal provides magic placeholder processing as well, so if the placeholder
 292   // is &#039;%menu_example_arg_optional&#039;, the function
 293   // menu_example_arg_optional_load($arg) will be called to translate the path
 294   // argument to a more substantial object. $arg will be the value of the
 295   // placeholder. Then the return value of menu_example_id_load($arg) will be
 296   // passed to the &#039;page callback&#039;.
 297   // In addition, if (in this case) menu_example_arg_optional_to_arg() exists,
 298   // then a menu link can be created using the results of that function as a
 299   // default for %menu_example_arg_optional.
 300   $items[&#039;examples/menu_example/default_arg/%menu_example_arg_optional&#039;] = array(
 301     &#039;title&#039; =&gt; &#039;Processed Placeholder Arguments&#039;,
 302     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 303     &#039;page arguments&#039; =&gt; array(3),  // arg 3 (4rd arg) is the one we want.
 304     &#039;access callback&#039; =&gt; TRUE,
 305     &#039;weight&#039; =&gt; 70,
 306   );
 307 
 308   $items[&#039;examples/menu_example/menu_original_path&#039;] = array(
 309     &#039;title&#039; =&gt; &#039;Menu path that will be altered by hook_menu_alter()&#039;,
 310     &#039;page callback&#039; =&gt; &#039;_menu_example_menu_page&#039;,
 311     &#039;page arguments&#039; =&gt; array(t(&#039;This menu item was created strictly to allow the hook_menu_alter() function to have something to operate on. hook_menu defined the path as examples/menu_example/menu_original_path. The hook_menu_alter() changes it to examples/menu_example/menu_altered_path. You can try navigating to both paths and see what happens!&#039;)),
 312     &#039;access callback&#039; =&gt; TRUE,
 313     &#039;weight&#039; =&gt; 80,
 314   );
 315   return $items;
 316 }
 317 
 318 /**
 319  * Page callback for the simplest introduction menu entry.
 320  *
 321  * @param $content
 322  *   Some content passed in.
 323  */
 324 function _menu_example_basic_instructions($content = NULL) {
 325   $base_content = t(
 326   &#039;This is the base page of the Menu Example. There are a number of examples
 327   here, from the most basic (like this one) to extravagant mappings of loaded
 328   placeholder arguments. Enjoy!&#039;);
 329   return &#039;&lt;div&gt;&#039; . $base_content . &#039;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&#039; . $content . &#039;&lt;/div&gt;&#039;;
 330 }
 331 
 332 /**
 333  * Page callback for use with most of the menu entries. The arguments it
 334  * receives determine what it outputs.
 335  *
 336  * @param $content
 337  *   The base content to output.
 338  * @param $arg1
 339  *   First additional argument from the path used to access the menu
 340  * @param $arg2
 341  *   Second additional argument.
 342  */
 343 function _menu_example_menu_page($content = NULL, $arg1 = NULL, $arg2 = NULL) {
 344   $output =  &#039;&lt;div&gt;&#039; . $content . &#039;&lt;/div&gt;&#039;;
 345 
 346   if (!empty($arg1)) {
 347     $output .= &#039;&lt;div&gt;&#039; . t(&#039;Argument 1=%arg&#039;, array(&#039;%arg&#039; =&gt; $arg1)) . &#039;&lt;/div&gt;&#039;;
 348   }
 349   if (!empty($arg2)) {
 350     $output .= &#039;&lt;div&gt;&#039; . t(&#039;Argument 2=%arg&#039;, array(&#039;%arg&#039; =&gt; $arg2)) . &#039;&lt;/div&gt;&#039;;
 351   }
 352   return $output;
 353 }
 354 
 355 /**
 356  * Implements hook_permission() to provide a demonstration access string.
 357  */
 358 
 359 function menu_example_permission() {
 360   return array(
 361     &#039;access protected menu example&#039; =&gt;  array(
 362       &#039;title&#039; =&gt; t(&#039;Access the protected menu example&#039;),
 363     ),
 364   );
 365 
 366 }
 367 
 368 /**
 369  * Determine whether the current user has the role specified.
 370  *
 371  * @param $role_name
 372  *   The role required for access
 373  * @return bool
 374  *   True if the acting user has the role specified.
 375  */
 376 function menu_example_custom_access($role_name){
 377   $access_granted = in_array($role_name, $GLOBALS[&#039;user&#039;]-&gt;roles);
 378   return $access_granted;
 379 }
 380 
 381 /**
 382  * Utility function to provide mappings from integers to some strings.
 383  * This would normally be some database lookup to get an object or array from
 384  * a key.
 385  *
 386  * @param $id
 387  *
 388  * @return
 389  *   The string to which the integer key mapped, or NULL if it did not map.
 390  */
 391 function _menu_example_mappings($id) {
 392   $mapped_value = NULL;
 393   static $mappings = array(
 394     1 =&gt; &#039;one&#039;,
 395     2 =&gt; &#039;two&#039;,
 396     3 =&gt; &#039;three&#039;,
 397     99 =&gt; &#039;jackpot! default&#039;,
 398   );
 399   if (isset($mappings[$id])) {
 400     $mapped_value = $mappings[$id];
 401   }
 402   return $mapped_value;
 403 }
 404 
 405 /**
 406  * The special _load function to load menu_example.
 407  *
 408  * Given an integer $id, load the string that should be associated with it.
 409  * Normally this load function would return an array or object with more
 410  * information.
 411  *
 412  * @param $id
 413  *   The integer to load.
 414  *
 415  * @return
 416  *   A string loaded from the integer.
 417  */
 418 function menu_example_id_load($id) {
 419   // Just map a magic value here. Normally this would load some more complex
 420   // object from the database or other context.
 421   $mapped_value = _menu_example_mappings($id);
 422   if (!empty($mapped_value)) {
 423     return t(&#039;Loaded value was %loaded&#039;, array(&#039;%loaded&#039; =&gt; $mapped_value));
 424   }
 425   else {
 426     return t(&#039;Sorry, the id %id was not found to be loaded&#039;, array(&#039;%id&#039; =&gt; $id));
 427   }
 428 }
 429 
 430 /**
 431  * Implements hook_menu_alter().
 432  *
 433  * Changes the path &#039;examples/menu_example/menu_original_path&#039; to &#039;examples/menu_example/menu_altered_path&#039;.
 434  * Changes the title callback of the &#039;user/UID&#039; menu item.
 435  *
 436  * Remember that hook_menu_alter() only runs at menu_rebuild() time, not every
 437  * time the page is built, so this typically happens only at cache clear time.
 438  *
 439  * @param $items
 440  *   The complete list of menu router items ready to be written to the
 441  *   menu_router table.
 442  */
 443 function menu_example_menu_alter(&amp;$items) {
 444   // Change the path &#039;examples/menu_example/menu_original_path&#039; to &#039;examples/menu_example/menu_altered_path&#039;. This change will
 445   // prevent the page from appearing at the original path (since the item is being unset).
 446   // You will need to go to examples/menu_example/menu_altered_path manually to see the page.
 447   if (!empty($items[&#039;examples/menu_example/menu_original_path&#039;])) {
 448     $items[&#039;examples/menu_example/menu_altered_path&#039;] = $items[&#039;examples/menu_example/menu_original_path&#039;];
 449     $items[&#039;examples/menu_example/menu_altered_path&#039;][&#039;title&#039;] = &#039;Menu item altered by hook_menu_alter()&#039;;
 450     unset($items[&#039;examples/menu_example/menu_original_path&#039;]);
 451   }
 452 
 453   // Here we will change the title callback to our own function, changing the
 454   // &#039;user&#039; link from the traditional to always being &quot;username&#039;s account&quot;.
 455   if (!empty($items[&#039;user/%user&#039;])) {
 456     $items[&#039;user/%user&#039;][&#039;title callback&#039;] = &#039;menu_example_user_page_title&#039;;
 457   }
 458 }
 459 
 460 /**
 461  * Title callback to rewrite the &#039;/user&#039; menu link.
 462  *
 463  * @param $base_string
 464  *   string to be prepended to current user&#039;s name.
 465  */
 466 function _menu_example_simple_title_callback($base_string) {
 467   global $user;
 468   $username = !empty($user-&gt;name) ? $user-&gt;name : t(&#039;anonymous&#039;);
 469   return $base_string . &#039; &#039; . $username;
 470 }
 471 /**
 472  * Title callback to rename the title dynamically, based on user_page_title().
 473  *
 474  * @param $account
 475  *   User account related to the visited page.
 476  */
 477 function menu_example_user_page_title($account) {
 478   return is_object($account) ? t(&quot;@name&#039;s account&quot;, array(&#039;@name&#039; =&gt; format_username($account))) : &#039;&#039;;
 479 }
 480 
 481 /**
 482  * Implements hook_menu_link_alter().
 483  *
 484  * This code will get the chance to alter a menu link when it is being saved
 485  * in the menu interface at admin/build/menu. Whatever we do here overrides
 486  * anything the user/administrator might have been trying to do.
 487  *
 488  * @param $item
 489  *   The menu item being saved.
 490  * @param $menu
 491  *   The entire menu router table.
 492  */
 493 function menu_example_menu_link_alter(&amp;$item, $menu) {
 494   // Force the link title to remain &#039;Clear Cache&#039; no matter what the admin
 495   // does with the web interface.
 496   if ($item[&#039;link_path&#039;] == &#039;devel/cache/clear&#039;) {
 497      $item[&#039;link_title&#039;] = &#039;Clear Cache&#039;;
 498   };
 499 }
 500 
 501 /**
 502  * Loads an item based on its $id.
 503  *
 504  * In this case we&#039;re just creating a more extensive string. In a real example
 505  * we would load or create some type of object.
 506  *
 507  * @param $id
 508  */
 509 function menu_example_arg_optional_load($id) {
 510   $mapped_value = _menu_example_mappings($id);
 511   if (!empty($mapped_value)) {
 512     return t(&#039;Loaded value was %loaded&#039;, array(&#039;%loaded&#039; =&gt; $mapped_value));
 513   }
 514   else {
 515     return t(&#039;Sorry, the id %id was not found to be loaded&#039;, array(&#039;%id&#039; =&gt; $id));
 516   }
 517 }
 518 
 519 /**
 520  * A to_arg() function is used to provide a default for the arg in the
 521  * wildcard. The purpose is to provide a menu link that will function if no
 522  * argument is given. For example, in the case of the menu item
 523  * &#039;examples/menu_example/default_arg/%menu_example_arg_optional&#039; the third argument
 524  * is required, and the menu system cannot make a menu link using this path
 525  * since it contains a placeholder. However, when the to_arg() function is
 526  * provided, the menu system will create a menu link pointing to the path
 527  * which would be created with the to_arg() function filling in the
 528  * %menu_example_arg_optional.
 529  *
 530  * @param $arg
 531  *   The arg (URL fragment) to be tested.
 532  */
 533 function menu_example_arg_optional_to_arg($arg) {
 534   // If our argument is not provided, give a default of 99.
 535   return (empty($arg) || $arg == &#039;%&#039;) ? 99 : $arg;
 536 }
 537 /**
 538  * @} End of &quot;defgroup menu_example&quot;.
 539  */</pre>

</div>
<!-- EDIT3 SECTION "menu_example.module" [244-25474] -->
<h2 class="sectionedit4" id="menu_exampletest">menu_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Tests for menu example module.
   6  */
   7 class MenuExampleTestCase extends DrupalWebTestCase {
   8   protected $web_user;
   9 
  10   public static function getInfo() {
  11     return array(
  12       &#039;name&#039; =&gt; &#039;Menu example functionality&#039;,
  13       &#039;description&#039; =&gt; &#039;Checks behavior of Menu Example.&#039;,
  14       &#039;group&#039; =&gt; &#039;Examples&#039;,
  15     );
  16   }
  17 
  18   /**
  19    * Enable modules and create user with specific permissions.
  20    */
  21   public function setUp() {
  22     parent::setUp(&#039;menu_example&#039;);
  23   }
  24 
  25   /**
  26    * Test the various menus.
  27    */
  28   function testMenuExample() {
  29     $this-&gt;drupalGet(&#039;&#039;);
  30     $this-&gt;clickLink(t(&#039;Menu Example&#039;));
  31     $this-&gt;assertText(t(&#039;This is the base page of the Menu Example&#039;));
  32 
  33 
  34     $this-&gt;clickLink(t(&#039;Custom Access Example&#039;));
  35     $this-&gt;assertText(t(&#039;Custom Access Example&#039;));
  36 
  37     $this-&gt;clickLink(t(&#039;examples/menu_example/custom_access/page&#039;));
  38     $this-&gt;assertResponse(403);
  39 
  40     $this-&gt;drupalGet(&#039;examples/menu_example/permissioned&#039;);
  41     $this-&gt;assertText(t(&#039;Permissioned Example&#039;));
  42 
  43     $this-&gt;clickLink(&#039;examples/menu_example/permissioned/controlled&#039;);
  44     $this-&gt;assertResponse(403);
  45 
  46     $this-&gt;drupalGet(&#039;examples/menu_example&#039;);
  47 
  48     $this-&gt;clickLink(t(&#039;MENU_CALLBACK example&#039;));
  49 
  50     $this-&gt;drupalGet(&#039;examples/menu_example/path_only/callback&#039;);
  51     $this-&gt;assertText(t(&#039;The menu entry for this page is of type MENU_CALLBACK&#039;));
  52 
  53     $this-&gt;clickLink(t(&#039;Tabs&#039;));
  54     $this-&gt;assertText(t(&#039;This is the &quot;tabs&quot; menu entry&#039;));
  55 
  56     $this-&gt;drupalGet(&#039;examples/menu_example/tabs/second&#039;);
  57     $this-&gt;assertText(t(&#039;This is the tab &quot;second&quot; in the &quot;basic tabs&quot; example&#039;));
  58 
  59     $this-&gt;clickLink(t(&#039;third&#039;));
  60     $this-&gt;assertText(t(&#039;This is the tab &quot;third&quot; in the &quot;basic tabs&quot; example&#039;));
  61 
  62     $this-&gt;clickLink(t(&#039;Extra Arguments&#039;));
  63 
  64     $this-&gt;drupalGet(&#039;examples/menu_example/use_url_arguments/one/two&#039;);
  65     $this-&gt;assertText(t(&#039;Argument 1=one&#039;));
  66 
  67     $this-&gt;clickLink(t(&#039;Placeholder Arguments&#039;));
  68 
  69     $this-&gt;clickLink(t(&#039;examples/menu_example/placeholder_argument/3343/display&#039;));
  70     $this-&gt;assertRaw(&#039;&lt;div&gt;3343&lt;/div&gt;&#039;);
  71 
  72     $this-&gt;clickLink(t(&#039;Processed Placeholder Arguments&#039;));
  73     $this-&gt;assertText(t(&#039;Loaded value was jackpot! default&#039;));
  74 
  75     // Create a user with permissions to access protected menu entry.
  76     $web_user = $this-&gt;drupalCreateUser(array(&#039;access protected menu example&#039;));
  77 
  78     // Use custom overridden drupalLogin function to verify the user is logged
  79     // in.
  80     $this-&gt;drupalLogin($web_user);
  81 
  82     // Check that our title callback changing /user dynamically is working.
  83     // Using &amp;#039; because of the format_username function.
  84     $this-&gt;assertRaw(t(&quot;@name&amp;#039;s account&quot;, array(&#039;@name&#039; =&gt; format_username($web_user))), format_string(&#039;Title successfully changed to account name: %name.&#039;, array(&#039;%name&#039; =&gt; $web_user-&gt;name)));
  85 
  86     // Now start testing other menu entries.
  87     $this-&gt;drupalGet(&#039;examples/menu_example&#039;);
  88 
  89     $this-&gt;clickLink(t(&#039;Custom Access Example&#039;));
  90     $this-&gt;assertText(t(&#039;Custom Access Example&#039;));
  91 
  92     $this-&gt;drupalGet(&#039;examples/menu_example/custom_access/page&#039;);
  93     $this-&gt;assertResponse(200);
  94 
  95     $this-&gt;drupalGet(&#039;examples/menu_example/permissioned&#039;);
  96     $this-&gt;assertText(&#039;Permissioned Example&#039;);
  97     $this-&gt;clickLink(&#039;examples/menu_example/permissioned/controlled&#039;);
  98     $this-&gt;assertText(&#039;This menu entry will not show&#039;);
  99 
 100     $this-&gt;drupalGet(&#039;examples/menu_example/menu_altered_path&#039;);
 101     $this-&gt;assertText(&#039;This menu item was created strictly to allow the hook_menu_alter()&#039;);
 102 
 103   }
 104 
 105 }</pre>

</div>
<!-- EDIT4 SECTION "menu_example.test" [25475-] -->