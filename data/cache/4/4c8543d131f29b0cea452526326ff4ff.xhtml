
<h1 class="sectionedit1" id="form_example">Form Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Form Example" [1-28] -->
<h2 class="sectionedit2" id="form_exampleinfo">form_example.info</h2>
<div class="level2">
<pre class="code">  1 name = Form example
   2 description = Examples of using the Drupal Form API.
   3 package = Example modules
   4 core = 7.x
   5 files[] = form_example.test</pre>

</div>
<!-- EDIT2 SECTION "form_example.info" [29-235] -->
<h2 class="sectionedit3" id="form_examplemodule">form_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Examples demonstrating the Drupal Form API.
   6  */
   7 
   8 /**
   9  * @defgroup form_example Example: Form API
  10  * @ingroup examples
  11  * @{
  12  * Examples demonstrating the Drupal Form API.
  13  *
  14  * The Form Example module is a part of the Examples for Developers Project
  15  * and provides various Drupal Form API Examples. You can download and
  16  * experiment with this code at the
  17  * @link http://drupal.org/project/examples Examples for Developers project page. @endlink
  18  */
  19 
  20 /**
  21  * Implements hook_menu().
  22  *
  23  * Here we set up the URLs (menu entries) for the
  24  * form examples. Note that most of the menu items
  25  * have page callbacks and page arguments set, with
  26  * page arguments set to be functions in external files.
  27  */
  28 function form_example_menu() {
  29   $items = array();
  30   $items[&#039;examples/form_example&#039;] = array(
  31     &#039;title&#039; =&gt; &#039;Form Example&#039;,
  32     &#039;page callback&#039; =&gt; &#039;form_example_intro&#039;,
  33     &#039;access callback&#039; =&gt; TRUE,
  34     &#039;expanded&#039; =&gt; TRUE,
  35   );
  36   $items[&#039;examples/form_example/tutorial&#039;] = array(
  37     &#039;title&#039; =&gt; &#039;Form Tutorial&#039;,
  38     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  39     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_1&#039;),
  40     &#039;access callback&#039; =&gt; TRUE,
  41     &#039;description&#039; =&gt; &#039;A set of ten tutorials&#039;,
  42     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  43     &#039;type&#039; =&gt; MENU_NORMAL_ITEM,
  44   );
  45   $items[&#039;examples/form_example/tutorial/1&#039;] = array(
  46     &#039;title&#039; =&gt; &#039;#1&#039;,
  47     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  48     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_1&#039;),
  49     &#039;access callback&#039; =&gt; TRUE,
  50     &#039;description&#039; =&gt; &#039;Tutorial 1: Simplest form&#039;,
  51     &#039;type&#039; =&gt; MENU_DEFAULT_LOCAL_TASK,
  52     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  53   );
  54   $items[&#039;examples/form_example/tutorial/2&#039;] = array(
  55     &#039;title&#039; =&gt; &#039;#2&#039;,
  56     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  57     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_2&#039;),
  58     &#039;access callback&#039; =&gt; TRUE,
  59     &#039;description&#039; =&gt; &#039;Tutorial 2: Form with a submit button&#039;,
  60     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
  61     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  62   );
  63   $items[&#039;examples/form_example/tutorial/3&#039;] = array(
  64     &#039;title&#039; =&gt; &#039;#3&#039;,
  65     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  66     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_3&#039;),
  67     &#039;access callback&#039; =&gt; TRUE,
  68     &#039;description&#039; =&gt; &#039;Tutorial 3: Fieldsets&#039;,
  69     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
  70     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  71   );
  72   $items[&#039;examples/form_example/tutorial/4&#039;] = array(
  73     &#039;title&#039; =&gt; &#039;#4&#039;,
  74     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  75     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_4&#039;),
  76     &#039;access callback&#039; =&gt; TRUE,
  77     &#039;description&#039; =&gt; &#039;Tutorial 4: Required fields&#039;,
  78     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
  79     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  80   );
  81   $items[&#039;examples/form_example/tutorial/5&#039;] = array(
  82     &#039;title&#039; =&gt; &#039;#5&#039;,
  83     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  84     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_5&#039;),
  85     &#039;access callback&#039; =&gt; TRUE,
  86     &#039;description&#039; =&gt; &#039;Tutorial 5: More element attributes&#039;,
  87     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
  88     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  89   );
  90   $items[&#039;examples/form_example/tutorial/6&#039;] = array(
  91     &#039;title&#039; =&gt; &#039;#6&#039;,
  92     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  93     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_6&#039;),
  94     &#039;access callback&#039; =&gt; TRUE,
  95     &#039;description&#039; =&gt; &#039;Tutorial 6: Form with a validate handler&#039;,
  96     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
  97     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
  98   );
  99   $items[&#039;examples/form_example/tutorial/7&#039;] = array(
 100     &#039;title&#039; =&gt; &#039;#7&#039;,
 101     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 102     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_7&#039;),
 103     &#039;access callback&#039; =&gt; TRUE,
 104     &#039;description&#039; =&gt; &#039;Tutorial 7: Form with a submit handler&#039;,
 105     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 106     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
 107   );
 108   $items[&#039;examples/form_example/tutorial/8&#039;] = array(
 109     &#039;title&#039; =&gt; &#039;#8&#039;,
 110     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 111     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_8&#039;),
 112     &#039;access callback&#039; =&gt; TRUE,
 113     &#039;description&#039; =&gt; &#039;Tutorial 8: Basic multistep form&#039;,
 114     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 115     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
 116   );
 117   $items[&#039;examples/form_example/tutorial/9&#039;] = array(
 118     &#039;title&#039; =&gt; &#039;#9&#039;,
 119     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 120     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_9&#039;),
 121     &#039;access callback&#039; =&gt; TRUE,
 122     &#039;description&#039; =&gt; &#039;Tutorial 9: Form with dynamically added new fields&#039;,
 123     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 124     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
 125     &#039;weight&#039; =&gt; 9,
 126   );
 127   $items[&#039;examples/form_example/tutorial/10&#039;] = array(
 128     &#039;title&#039; =&gt; &#039;#10&#039;,
 129     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 130     &#039;page arguments&#039; =&gt; array(&#039;form_example_tutorial_10&#039;),
 131     &#039;access callback&#039; =&gt; TRUE,
 132     &#039;description&#039; =&gt; &#039;Tutorial 11: Form with file upload&#039;,
 133     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 134     &#039;file&#039; =&gt; &#039;form_example_tutorial.inc&#039;,
 135     &#039;weight&#039; =&gt; 10,
 136   );
 137   $items[&#039;examples/form_example/states&#039;] = array(
 138     &#039;title&#039; =&gt; &#039;#states example&#039;,
 139     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 140     &#039;page arguments&#039; =&gt; array(&#039;form_example_states_form&#039;),
 141     &#039;access callback&#039; =&gt; TRUE,
 142     &#039;description&#039; =&gt; &#039;How to use the #states attribute in FAPI&#039;,
 143     &#039;file&#039; =&gt; &#039;form_example_states.inc&#039;,
 144   );
 145   $items[&#039;examples/form_example/wizard&#039;] = array(
 146     &#039;title&#039; =&gt; &#039;Extensible wizard example&#039;,
 147     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 148     &#039;page arguments&#039; =&gt; array(&#039;form_example_wizard&#039;),
 149     &#039;access callback&#039; =&gt; TRUE,
 150     &#039;description&#039; =&gt; &#039;A general approach to a wizard multistep form.&#039;,
 151     &#039;file&#039; =&gt; &#039;form_example_wizard.inc&#039;,
 152   );
 153   $items[&#039;examples/form_example/element_example&#039;] = array(
 154     &#039;title&#039; =&gt; &#039;Element example&#039;,
 155     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 156     &#039;page arguments&#039; =&gt; array(&#039;form_example_element_demo_form&#039;),
 157     &#039;access callback&#039; =&gt; TRUE,
 158     &#039;file&#039; =&gt; &#039;form_example_elements.inc&#039;,
 159     &#039;weight&#039; =&gt; 100,
 160   );
 161 
 162   return $items;
 163 }
 164 
 165 /**
 166  * Page callback for our general info page.
 167  */
 168 function form_example_intro() {
 169   $markup = t(&#039;The form example module provides a tutorial, extensible multistep example, an element example, and a #states example&#039;);
 170   return array(&#039;#markup&#039; =&gt; $markup);
 171 }
 172 
 173 /**
 174  * Implements hook_help().
 175  */
 176 function form_example_help($path, $arg) {
 177   switch ($path) {
 178     case &#039;examples/form_example/tutorial&#039;:
 179       // TODO: Update the URL.
 180       $help = t(&#039;This form example tutorial for Drupal 7 is the code from the &lt;a href=&quot;http://drupal.org/node/262422&quot;&gt;Handbook 10-step tutorial&lt;/a&gt;&#039;);
 181       break;
 182     case &#039;examples/form_example/element_example&#039;:
 183       $help = t(&#039;The Element Example shows how modules can provide their own Form API element types. Four different element types are demonstrated.&#039;);
 184       break;
 185   }
 186   if (!empty($help)) {
 187     return &#039;&lt;p&gt;&#039; . $help . &#039;&lt;/p&gt;&#039;;
 188   }
 189 }
 190 
 191 /**
 192  * Implements hook_element_info().
 193  *
 194  * To keep the various pieces of the example together in external files,
 195  * this just returns _form_example_elements().
 196  */
 197 function form_example_element_info() {
 198   require_once(&#039;form_example_elements.inc&#039;);
 199   return _form_example_element_info();
 200 }
 201 
 202 /**
 203  * Implements hook_theme().
 204  *
 205  * The only theme implementation is by the element example. To keep the various
 206  * parts of the example together, this actually returns
 207  * _form_example_element_theme().
 208  */
 209 function form_example_theme($existing, $type, $theme, $path) {
 210   require_once(&#039;form_example_elements.inc&#039;);
 211   return _form_example_element_theme($existing, $type, $theme, $path);
 212 }
 213 /**
 214  * @} End of &quot;defgroup form_example&quot;.
 215  */</pre>

</div>
<!-- EDIT3 SECTION "form_example.module" [236-8733] -->
<h2 class="sectionedit4" id="form_exampletest">form_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Test file for form_example module.
   6  */
   7 
   8 /**
   9  * Default test case for the form_example module.
  10  */
  11 class FormExampleTestCase extends DrupalWebTestCase {
  12 
  13   public static function getInfo() {
  14     return array(
  15       &#039;name&#039; =&gt; &#039;Form Example&#039;,
  16       &#039;description&#039; =&gt; &#039;Various tests on the form_example module.&#039; ,
  17       &#039;group&#039; =&gt; &#039;Examples&#039;,
  18     );
  19   }
  20 
  21   function setUp() {
  22     parent::setUp(&#039;form_example&#039;);
  23   }
  24 
  25   /**
  26    * Test each tutorial
  27    */
  28   function testTutorials() {
  29     // Tutorial #1
  30     $this-&gt;drupalGet(&#039;examples/form_example/tutorial&#039;);
  31     $this-&gt;assertText(t(&#039;#9&#039;));
  32 
  33     // #2
  34     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/2&#039;, array(&#039;name&#039; =&gt; t(&#039;name&#039;)), t(&#039;Submit&#039;));
  35 
  36     // #4
  37     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/4&#039;,
  38       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;)), t(&#039;Submit&#039;));
  39     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/4&#039;, array(), t(&#039;Submit&#039;));
  40     $this-&gt;assertText(t(&#039;First name field is required&#039;));
  41     $this-&gt;assertText(t(&#039;Last name field is required&#039;));
  42 
  43     // #5
  44     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/5&#039;,
  45       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;)), t(&#039;Submit&#039;));
  46     $this-&gt;assertText(t(&#039;Please enter your first name&#039;));
  47     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/4&#039;, array(), t(&#039;Submit&#039;));
  48     $this-&gt;assertText(t(&#039;First name field is required&#039;));
  49     $this-&gt;assertText(t(&#039;Last name field is required&#039;));
  50 
  51     // #6
  52     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/6&#039;,
  53       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;), &#039;year_of_birth&#039; =&gt; 1955),
  54       t(&#039;Submit&#039;));
  55     $this-&gt;assertNoText(t(&#039;Enter a year between 1900 and 2000&#039;));
  56     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/6&#039;,
  57       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;), &#039;year_of_birth&#039; =&gt; 1855),
  58       t(&#039;Submit&#039;));
  59 
  60     $this-&gt;assertText(t(&#039;Enter a year between 1900 and 2000&#039;));
  61 
  62     // #7
  63     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/7&#039;,
  64       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;), &#039;year_of_birth&#039; =&gt; 1955),
  65       t(&#039;Submit&#039;));
  66     $this-&gt;assertText(t(&#039;The form has been submitted. name=&quot;firstname lastname&quot;, year of birth=1955&#039;));
  67     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/7&#039;,
  68       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;), &#039;year_of_birth&#039; =&gt; 1855),
  69       t(&#039;Submit&#039;));
  70 
  71     $this-&gt;assertText(t(&#039;Enter a year between 1900 and 2000&#039;));
  72 
  73       // #8
  74     $this-&gt;drupalPost(&#039;examples/form_example/tutorial/8&#039;,
  75       array(&#039;first&#039; =&gt; t(&#039;firstname&#039;), &#039;last&#039; =&gt; t(&#039;lastname&#039;), &#039;year_of_birth&#039; =&gt; 1955),
  76       t(&#039;Next &gt;&gt;&#039;));
  77 
  78     $this-&gt;drupalPost(NULL, array(&#039;color&#039; =&gt; t(&#039;green&#039;)), t(&#039;&lt;&lt; Back&#039;));
  79     $this-&gt;drupalPost(NULL, array(), t(&#039;Next &gt;&gt;&#039;));
  80     $this-&gt;drupalPost(NULL, array(&#039;color&#039; =&gt; t(&#039;red&#039;)), t(&#039;Submit&#039;));
  81     $this-&gt;assertText(t(&#039;The form has been submitted. name=&quot;firstname lastname&quot;, year of birth=1955&#039;));
  82     $this-&gt;assertText(t(&#039;And the favorite color is red&#039;));
  83 
  84     // #9
  85     $url = &#039;examples/form_example/tutorial/9&#039;;
  86     for ($i = 1; $i &lt;= 4; $i++) {
  87       if ($i &gt; 1) {
  88         $url = NULL;  // later steps of multistep form take NULL.
  89       }
  90       $this-&gt;drupalPost($url,
  91         array(&quot;name[$i][first]&quot; =&gt; &quot;firstname $i&quot;, &quot;name[$i][last]&quot; =&gt; &quot;lastname $i&quot;, &quot;name[$i][year_of_birth]&quot; =&gt; 1950 + $i),
  92         t(&#039;Add another name&#039;));
  93       $this-&gt;assertText(t(&#039;Name #@num&#039;, array(&#039;@num&#039; =&gt; $i + 1)));
  94     }
  95 
  96     // Now remove the last name added (#5).
  97     $this-&gt;drupalPost(NULL, array(), t(&#039;Remove latest name&#039;));
  98     $this-&gt;assertNoText(&quot;Name #5&quot;);
  99 
 100     $this-&gt;drupalPost(NULL, array(), t(&#039;Submit&#039;));
 101 
 102     $this-&gt;assertText(&#039;Form 9 has been submitted&#039;);
 103     for ($i = 1; $i &lt;= 4; $i++) {
 104       $this-&gt;assertText(t(&#039;@num: firstname @num lastname @num (@year)&#039;, array(&#039;@num&#039; =&gt; $i, &#039;@year&#039; =&gt; 1950 + $i)));
 105     }
 106 
 107     // #10
 108     $url = &#039;examples/form_example/tutorial/10&#039;;
 109 
 110     $this-&gt;drupalPost($url, array(), t(&#039;Submit&#039;));
 111     $this-&gt;assertText(t(&#039;No file was uploaded.&#039;));
 112 
 113     // Get sample images.
 114     $images = $this-&gt;drupalGetTestFiles(&#039;image&#039;);
 115     foreach ($images as $image) {
 116       $this-&gt;drupalPost($url, array(&#039;files[file]&#039; =&gt; drupal_realpath($image-&gt;uri)), t(&#039;Submit&#039;));
 117       $this-&gt;assertText(t(&#039;The form has been submitted and the image has been saved, filename: @filename.&#039;, array(&#039;@filename&#039; =&gt; $image-&gt;filename)));
 118     }
 119   }
 120 
 121   /**
 122    * Test Wizard tutorial
 123    * @TODO improve this using drupal_form_submit
 124    */
 125   function testWizard() {
 126     // Is the wizard there
 127     $this-&gt;drupalGet(&#039;examples/form_example/wizard&#039;);
 128     $this-&gt;assertText(t(&#039;Extensible wizard example&#039;));
 129 
 130     $first_name = $this-&gt;randomName(8);
 131     $last_name  = $this-&gt;randomName(8);
 132     $city = $this-&gt;randomName(8);
 133     $aunts_name = $this-&gt;randomName(8);
 134 
 135     // Submit the first step of the wizard
 136     $options = array(
 137       &#039;first_name&#039; =&gt; $first_name,
 138       &#039;last_name&#039;  =&gt; $last_name,
 139     );
 140     $this-&gt;drupalPost(&#039;examples/form_example/wizard&#039;, $options, t(&#039;Next&#039;));
 141 
 142     // A label city is created, and two buttons appear, Preivous and Next
 143     $this-&gt;assertText(t(&#039;Hint: Do not enter &quot;San Francisco&quot;, and do not leave this out.&#039;));
 144 
 145     // Go back to the beginning and verify that the value is there.
 146     $this-&gt;drupalPost(NULL, array(), t(&#039;Previous&#039;));
 147     $this-&gt;assertFieldByName(&#039;first_name&#039;, $first_name);
 148     $this-&gt;assertFieldByName(&#039;last_name&#039;, $last_name);
 149 
 150     // Go next. We should keep our values.
 151     $this-&gt;drupalPost(NULL, array(), t(&#039;Next&#039;));
 152     $this-&gt;assertText(t(&#039;Hint: Do not enter &quot;San Francisco&quot;, and do not leave this out.&#039;));
 153 
 154     // Try &quot;San Francisco&quot;.
 155     $this-&gt;drupalPost(NULL, array(&#039;city&#039; =&gt; &#039;San Francisco&#039;), t(&#039;Next&#039;));
 156     $this-&gt;assertText(t(&#039;You were warned not to enter &quot;San Francisco&quot;&#039;));
 157 
 158     // Try the real city.
 159     $this-&gt;drupalPost(NULL, array(&#039;city&#039; =&gt; $city), t(&#039;Next&#039;));
 160 
 161     // Enter the Aunt&#039;s name, but then the previous button.
 162     $this-&gt;drupalPost(NULL, array(&#039;aunts_name&#039; =&gt; $aunts_name), t(&#039;Previous&#039;));
 163     $this-&gt;assertFieldByName(&#039;city&#039;, $city);
 164 
 165     // Now go forward and then press finish; check for correct values.
 166     $this-&gt;drupalPost(NULL, array(), t(&#039;Next&#039;));
 167     $this-&gt;drupalPost(NULL, array(&#039;aunts_name&#039; =&gt; $aunts_name), t(&#039;Finish&#039;));
 168 
 169     $this-&gt;assertRaw(t(&#039;[first_name] =&amp;gt; @first_name&#039;, array(&#039;@first_name&#039; =&gt; $first_name)));
 170     $this-&gt;assertRaw(t(&#039;[last_name] =&amp;gt; @last_name&#039;, array(&#039;@last_name&#039; =&gt; $last_name)));
 171     $this-&gt;assertRaw(t(&#039;[city] =&amp;gt; @city&#039;, array(&#039;@city&#039; =&gt; $city)));
 172     $this-&gt;assertRaw(t(&#039;[aunts_name] =&amp;gt; @aunts_name&#039;, array(&#039;@aunts_name&#039; =&gt; $aunts_name)));
 173   }
 174 
 175 
 176   /**
 177    * Test the element_example form for correct behavior.
 178    */
 179   function testElementExample() {
 180     // Make one basic POST with a set of values and check for correct responses.
 181     $edit = array(
 182       &#039;a_form_example_textfield&#039; =&gt; $this-&gt;randomName(),
 183       &#039;a_form_example_checkbox&#039; =&gt; TRUE,
 184       &#039;a_form_example_element_discrete[areacode]&#039; =&gt; sprintf(&#039;%03d&#039;, rand(0, 999)),
 185       &#039;a_form_example_element_discrete[prefix]&#039; =&gt; sprintf(&#039;%03d&#039;, rand(0, 999)),
 186       &#039;a_form_example_element_discrete[extension]&#039; =&gt; sprintf(&#039;%04d&#039;, rand(0, 9999)),
 187       &#039;a_form_example_element_combined[areacode]&#039; =&gt; sprintf(&#039;%03d&#039;, rand(0, 999)),
 188       &#039;a_form_example_element_combined[prefix]&#039; =&gt; sprintf(&#039;%03d&#039;, rand(0, 999)),
 189       &#039;a_form_example_element_combined[extension]&#039; =&gt; sprintf(&#039;%04d&#039;, rand(0, 9999)),
 190     );
 191     $this-&gt;drupalPost(&#039;examples/form_example/element_example&#039;, $edit, t(&#039;Submit&#039;));
 192     $this-&gt;assertText(t(&#039;a_form_example_textfield has value @value&#039;, array(&#039;@value&#039; =&gt; $edit[&#039;a_form_example_textfield&#039;])));
 193     $this-&gt;assertText(t(&#039;a_form_example_checkbox has value 1&#039;));
 194     $this-&gt;assertPattern(t(&#039;/areacode.*!areacode/&#039;, array(&#039;!areacode&#039; =&gt; $edit[&#039;a_form_example_element_discrete[areacode]&#039;])));
 195     $this-&gt;assertPattern(t(&#039;/prefix.*!prefix/&#039;, array(&#039;!prefix&#039; =&gt; $edit[&#039;a_form_example_element_discrete[prefix]&#039;])));
 196     $this-&gt;assertPattern(t(&#039;/extension.*!extension/&#039;, array(&#039;!extension&#039; =&gt; $edit[&#039;a_form_example_element_discrete[extension]&#039;])));
 197 
 198     $this-&gt;assertText(t(&#039;a_form_example_element_combined has value @value&#039;, array(&#039;@value&#039; =&gt; $edit[&#039;a_form_example_element_combined[areacode]&#039;] . $edit[&#039;a_form_example_element_combined[prefix]&#039;] . $edit[&#039;a_form_example_element_combined[extension]&#039;])));
 199 
 200     // Now flip the checkbox and check for correct behavior.
 201     $edit[&#039;a_form_example_checkbox&#039;] = FALSE;
 202     $this-&gt;drupalPost(&#039;examples/form_example/element_example&#039;, $edit, t(&#039;Submit&#039;));
 203     $this-&gt;assertText(t(&#039;a_form_example_checkbox has value 0&#039;));
 204   }
 205 }</pre>

</div>
<!-- EDIT4 SECTION "form_example.test" [8734-18396] -->
<h2 class="sectionedit5" id="form_example_elementsinc">form_example_elements.inc</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * This is an example demonstrating how a module can define custom form and
   6  * render elements.
   7  *
   8  * Form elements are already familiar to anyone who uses Form API. They share
   9  * history with render elements, which are explained in the
  10  * @link render_example.module Render Example @endlink. Examples
  11  * of core form elements are &#039;textfield&#039;, &#039;checkbox&#039; and &#039;fieldset&#039;. Drupal
  12  * utilizes hook_elements() to define these FAPI types, and this occurs in
  13  * the core function system_elements().
  14  *
  15  * Each form element has a #type value that determines how it is treated by
  16  * the Form API and how it is ultimately rendered into HTML.
  17  * hook_element_info() allows modules to define new element types, and tells
  18  * the Form API what default values they should automatically be populated with.
  19  *
  20  * By implementing hook_element_info() in your own module, you can create custom
  21  * form (or render) elements with their own properties, validation and theming.
  22  *
  23  * In this example, we define a series of elements that range from trivial
  24  * (a renamed textfield) to more advanced (a telephone number field with each
  25  * portion separately validated).
  26  *
  27  * Since each element can use arbitrary properties (like #process or #dropthis)
  28  * it can be quite complicated to figure out what all the properties actually
  29  * mean. This example won&#039;t undertake the exhaustive task of explaining them
  30  * all, as that would probably be impossible.
  31  */
  32 
  33 /**
  34  * @todo: Some additional magic things to explain:
  35  * - #process and process callback (and naming) (in forms)
  36  * - #value and value callback (and naming of the above)
  37  * - #theme and #theme_wrappers
  38  * - What is #return_value?
  39  * - system module provides the standard default elements.
  40  * - What are all the things that can be defined in hook_element_info() and
  41  *   where do the defaults come from?
  42  * - Form elements that have a type that has a matching type in the element
  43  *   array created by hook_element_info() get those items merged with them.
  44  * - #value_callback is called first by form_builder(). Its job is to figure
  45  *   out what the actual value of the element, using #default_value or whatever.
  46  * - #process is then called to allow changes to the whole element (like adding
  47  *   child form elements.)
  48  * - #return_value: chx: you need three different values for form API. You need
  49  *   the default value (#default_value), the value for the element if it gets
  50  *   checked )#return_value) and then #value which is either 0 or the
  51  *   #return_value
  52  */
  53 
  54 /**
  55  * Utility function providing data for form_example_element_info().
  56  *
  57  * This defines several new form element types.
  58  *
  59  * - form_example_textfield: This is actually just a textfield, but provides
  60  *   the new type. If more were to be done with it a theme function could be
  61  *   provided.
  62  * - form_example_checkbox: Nothing more than a regular checkbox, but uses
  63  *   an alternate theme function provided by this module.
  64  * - form_example_phonenumber_discrete: Provides a North-American style
  65  *   three-part phonenumber where the value of the phonenumber is managed
  66  *   as an array of three parts.
  67  * - form_example_phonenumber_combined: Provides a North-American style
  68  *   three-part phonenumber where the actual value is managed as a 10-digit
  69  *   string and only broken up into three parts for the user interface.
  70  *
  71  * form_builder() has significant discussion of #process and #value_callback.
  72  * See also hook_element_info().
  73  *
  74  * system_element_info() contains the Drupal default element types, which can
  75  * also be used as examples.
  76  */
  77 function _form_example_element_info() {
  78   // form_example_textfield is a trivial element based on textfield that
  79   // requires only a definition and a theme function. In this case we provide
  80   // the theme function using the parent &quot;textfield&quot; theme function, but it
  81   // would by default be provided in hook_theme(), by a &quot;form_example_textfield&quot;
  82   // theme implementation, provided by default by the function
  83   // theme_form_example_textfield().  Note that the &#039;form_example_textfield&#039;
  84   // element type is completely defined here. There is no further code required
  85   // for it.
  86   $types[&#039;form_example_textfield&#039;] = array(
  87     // #input = TRUE means that the incoming value will be used to figure out
  88     // what #value will be.
  89     &#039;#input&#039; =&gt; TRUE,
  90 
  91     // Use theme(&#039;textfield&#039;) to format this element on output.
  92     &#039;#theme&#039; =&gt; array(&#039;textfield&#039;),
  93 
  94     // Do not provide autocomplete.
  95     &#039;#autocomplete_path&#039; =&gt; FALSE,
  96 
  97     // Allow theme(&#039;form_element&#039;) to control the markup surrounding this
  98     // value on output.
  99     &#039;#theme_wrappers&#039; =&gt; array(&#039;form_element&#039;),
 100   );
 101 
 102   // form_example_checkbox is mostly a copy of the system-defined checkbox
 103   // element.
 104   $types[&#039;form_example_checkbox&#039;] = array(
 105     &#039;#input&#039; =&gt; TRUE,  // This is an HTML &lt;input&gt;.
 106 
 107     // @todo: Explain #return_value.
 108     &#039;#return_value&#039; =&gt; TRUE,
 109 
 110     // Our #process array will use the standard process functions used for a
 111     // regular checkbox.
 112     &#039;#process&#039; =&gt; array(&#039;form_process_checkbox&#039;, &#039;ajax_process_form&#039;),
 113 
 114     // Use theme(&#039;form_example_checkbox&#039;) to render this element on output.
 115     &#039;#theme&#039; =&gt; &#039;form_example_checkbox&#039;,
 116 
 117     // Use theme(&#039;form_element&#039;) to provide HTML wrappers for this element.
 118     &#039;#theme_wrappers&#039; =&gt; array(&#039;form_element&#039;),
 119 
 120     // Place the title after the element (to the right of the checkbox).
 121     // This attribute affects the behavior of theme_form_element().
 122     &#039;#title_display&#039; =&gt; &#039;after&#039;,
 123 
 124     // We use the default function name for the value callback, so it does not
 125     // have to be listed explicitly. The pattern for the default function name
 126     // is form_type_TYPENAME_value().
 127     // &#039;#value_callback&#039; =&gt; &#039;form_type_form_example_checkbox_value&#039;,
 128   );
 129 
 130   // This discrete phonenumber element keeps its values as the separate elements
 131   // area code, prefix, extension.
 132   $types[&#039;form_example_phonenumber_discrete&#039;] = array(
 133     // #input == TRUE means that the form value here will be used to determine
 134     // what #value will be.
 135     &#039;#input&#039; =&gt; TRUE,
 136 
 137     // #process is an array of callback functions executed when this element is
 138     // processed. Here it provides the child form elements which define
 139     // areacode, prefix, and extension.
 140     &#039;#process&#039; =&gt; array(&#039;form_example_phonenumber_discrete_process&#039;),
 141 
 142     // validation handlers for this element. These are in addition to any
 143     // validation handlers that might
 144     &#039;#element_validate&#039; =&gt; array(&#039;form_example_phonenumber_discrete_validate&#039;),
 145     &#039;#autocomplete_path&#039; =&gt; FALSE,
 146     &#039;#theme_wrappers&#039; =&gt; array(&#039;form_example_inline_form_element&#039;),
 147   );
 148 
 149   // Define form_example_phonenumber_combined, which combines the phone
 150   // number into a single validated text string.
 151   $types[&#039;form_example_phonenumber_combined&#039;] = array(
 152     &#039;#input&#039; =&gt; TRUE ,
 153     &#039;#process&#039; =&gt; array(&#039;form_example_phonenumber_combined_process&#039;),
 154     &#039;#element_validate&#039; =&gt; array(&#039;form_example_phonenumber_combined_validate&#039;),
 155     &#039;#autocomplete_path&#039; =&gt; FALSE,
 156     &#039;#value_callback&#039;   =&gt; &#039;form_example_phonenumber_combined_value&#039;,
 157     &#039;#default_value&#039; =&gt; array(
 158       &#039;areacode&#039; =&gt; &#039;&#039;,
 159       &#039;prefix&#039; =&gt; &#039;&#039;,
 160       &#039;extension&#039; =&gt; &#039;&#039;,
 161     ),
 162     &#039;#theme_wrappers&#039; =&gt; array(&#039;form_example_inline_form_element&#039;),
 163   );
 164   return $types;
 165 }
 166 
 167 
 168 /**
 169  * Builds the current combined value of the phone number only when the form
 170  * builder is not processing the input.
 171  *
 172  * @param $element
 173  * @param $input
 174  * @param $form_state
 175  *
 176  * @return array
 177  */
 178 function  form_example_phonenumber_combined_value(&amp;$element, $input = FALSE, $form_state = NULL) {
 179   if (!$form_state[&#039;process_input&#039;]) {
 180     $matches = array();
 181     $match = preg_match(&#039;/^(\d{3})(\d{3})(\d{4})$/&#039;, $element[&#039;#default_value&#039;], $matches);
 182     if ($match) {
 183       array_shift($matches); // get rid of the &quot;all match&quot; element
 184       list($element[&#039;areacode&#039;], $element[&#039;prefix&#039;], $element[&#039;extension&#039;]) = $matches;
 185     }
 186   }
 187   return $element;
 188 }
 189 
 190 /**
 191  * Value callback for form_example_checkbox element type.
 192  * Copied from form_type_checkbox_value().
 193  *
 194  * @param $element
 195  *   The form element whose value is being populated.
 196  * @param $input
 197  *   The incoming input to populate the form element. If this is FALSE, meaning
 198  *   there is no input, the element&#039;s default value should be returned.
 199  */
 200 function form_type_form_example_checkbox_value($element, $input = FALSE) {
 201   if ($input === FALSE) {
 202     return isset($element[&#039;#default_value&#039;]) ? $element[&#039;#default_value&#039;] : 0;
 203   }
 204   else {
 205     return isset($input) ? $element[&#039;#return_value&#039;] : 0;
 206   }
 207 }
 208 
 209 /**
 210  * Process callback for the discrete version of phonenumber.
 211  */
 212 function form_example_phonenumber_discrete_process($element, &amp;$form_state, $complete_form) {
 213   // #tree = TRUE means that the values in $form_state[&#039;values&#039;] will be stored
 214   // hierarchically. In this case, the parts of the element will appear in
 215   // $form_state[&#039;values&#039;] as
 216   // $form_state[&#039;values&#039;][&#039;&lt;element_name&gt;&#039;][&#039;areacode&#039;],
 217   // $form_state[&#039;values&#039;][&#039;&lt;element_name&gt;&#039;][&#039;prefix&#039;],
 218   // etc. This technique is preferred when an element has member form
 219   // elements.
 220   $element[&#039;#tree&#039;] = TRUE;
 221 
 222   // Normal FAPI field definitions, except that #value is defined.
 223   $element[&#039;areacode&#039;] = array(
 224     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 225     &#039;#size&#039; =&gt; 3,
 226     &#039;#maxlength&#039; =&gt; 3,
 227     &#039;#value&#039; =&gt; $element[&#039;#value&#039;][&#039;areacode&#039;],
 228     &#039;#required&#039; =&gt; TRUE,
 229     &#039;#prefix&#039; =&gt; &#039;(&#039;,
 230     &#039;#suffix&#039; =&gt; &#039;)&#039;,
 231   );
 232   $element[&#039;prefix&#039;] =  array(
 233     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 234     &#039;#size&#039; =&gt; 3,
 235     &#039;#maxlength&#039; =&gt; 3,
 236     &#039;#required&#039; =&gt; TRUE,
 237     &#039;#value&#039; =&gt; $element[&#039;#value&#039;][&#039;prefix&#039;],
 238   );
 239   $element[&#039;extension&#039;] =  array(
 240     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 241     &#039;#size&#039; =&gt; 4,
 242     &#039;#maxlength&#039; =&gt; 4,
 243     &#039;#value&#039; =&gt; $element[&#039;#value&#039;][&#039;extension&#039;],
 244   );
 245 
 246   return $element;
 247 }
 248 
 249 /**
 250  * Validation handler for the discrete version of the phone number.
 251  *
 252  * Uses regular expressions to check that:
 253  *  - the area code is a three digit number.
 254  *  - the prefix is numeric 3-digit number.
 255  *  - the extension is a numeric 4-digit number.
 256  *
 257  * Any problems are shown on the form element using form_error().
 258  */
 259 function form_example_phonenumber_discrete_validate($element, &amp;$form_state) {
 260   if (isset($element[&#039;#value&#039;][&#039;areacode&#039;])) {
 261     if (0 == preg_match(&#039;/^\d{3}$/&#039;, $element[&#039;#value&#039;][&#039;areacode&#039;])) {
 262       form_error($element[&#039;areacode&#039;], t(&#039;The area code is invalid.&#039;));
 263     }
 264   }
 265   if (isset($element[&#039;#value&#039;][&#039;prefix&#039;])) {
 266     if (0 == preg_match(&#039;/^\d{3}$/&#039;, $element[&#039;#value&#039;][&#039;prefix&#039;])) {
 267       form_error($element[&#039;prefix&#039;], t(&#039;The prefix is invalid.&#039;));
 268     }
 269   }
 270   if (isset($element[&#039;#value&#039;][&#039;extension&#039;])) {
 271     if (0 == preg_match(&#039;/^\d{4}$/&#039;, $element[&#039;#value&#039;][&#039;extension&#039;])) {
 272       form_error($element[&#039;extension&#039;], t(&#039;The extension is invalid.&#039;));
 273     }
 274   }
 275   return $element;
 276 }
 277 
 278 /**
 279  * Process callback for the combined version of the phonenumber element.
 280  */
 281 function form_example_phonenumber_combined_process($element, &amp;$form_state, $complete_form) {
 282   // #tree = TRUE means that the values in $form_state[&#039;values&#039;] will be stored
 283   // hierarchically. In this case, the parts of the element will appear in
 284   // $form_state[&#039;values&#039;] as
 285   // $form_state[&#039;values&#039;][&#039;&lt;element_name&gt;&#039;][&#039;areacode&#039;],
 286   // $form_state[&#039;values&#039;][&#039;&lt;element_name&gt;&#039;][&#039;prefix&#039;],
 287   // etc. This technique is preferred when an element has member form
 288   // elements.
 289 
 290   $element[&#039;#tree&#039;] = TRUE;
 291 
 292   // Normal FAPI field definitions, except that #value is defined.
 293   $element[&#039;areacode&#039;] = array(
 294     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 295     &#039;#size&#039; =&gt; 3,
 296     &#039;#maxlength&#039; =&gt; 3,
 297     &#039;#required&#039; =&gt; TRUE,
 298     &#039;#prefix&#039; =&gt; &#039;(&#039;,
 299     &#039;#suffix&#039; =&gt; &#039;)&#039;,
 300   );
 301   $element[&#039;prefix&#039;] =  array(
 302     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 303     &#039;#size&#039; =&gt; 3,
 304     &#039;#maxlength&#039; =&gt; 3,
 305     &#039;#required&#039; =&gt; TRUE,
 306   );
 307   $element[&#039;extension&#039;] =  array(
 308     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 309     &#039;#size&#039; =&gt; 4,
 310     &#039;#maxlength&#039; =&gt; 4,
 311     &#039;#required&#039; =&gt; TRUE,
 312   );
 313 
 314   $matches = array();
 315   $match = preg_match(&#039;/^(\d{3})(\d{3})(\d{4})$/&#039;, $element[&#039;#default_value&#039;], $matches);
 316   if ($match) {
 317     array_shift($matches); // get rid of the &quot;all match&quot; element
 318     list($element[&#039;areacode&#039;][&#039;#default_value&#039;], $element[&#039;prefix&#039;][&#039;#default_value&#039;], $element[&#039;extension&#039;][&#039;#default_value&#039;]) = $matches;
 319   }
 320 
 321   return $element;
 322 }
 323 
 324 /**
 325  * Phone number validation function for the combined phonenumber.
 326  *
 327  * Uses regular expressions to check that:
 328  *  - the area code is a three digit number
 329  *  - the prefix is numeric 3-digit number
 330  *  - the extension is a numeric 4-digit number
 331  *
 332  * Any problems are shown on the form element using form_error().
 333  *
 334  * The combined value is then updated in the element.
 335  */
 336 function form_example_phonenumber_combined_validate($element, &amp;$form_state) {
 337   $lengths = array(
 338     &#039;areacode&#039; =&gt; 3,
 339     &#039;prefix&#039; =&gt; 3,
 340     &#039;extension&#039; =&gt; 4,
 341   );
 342   foreach ($lengths as $member =&gt; $length) {
 343     $regex = &#039;/^\d{&#039; . $length . &#039;}$/&#039;;
 344     if (!empty($element[&#039;#value&#039;][$member]) &amp;&amp; 0 == preg_match($regex, $element[&#039;#value&#039;][$member])) {
 345       form_error($element[$member], t(&#039;@member is invalid&#039;, array(&#039;@member&#039; =&gt; $member)));
 346     }
 347   }
 348 
 349   // Consolidate into the three parts into one combined value.
 350   $value = $element[&#039;areacode&#039;][&#039;#value&#039;] . $element[&#039;prefix&#039;][&#039;#value&#039;] . $element[&#039;extension&#039;][&#039;#value&#039;];
 351   form_set_value($element, $value, $form_state);
 352   return $element;
 353 }
 354 
 355 /**
 356  * Called by form_example_theme() to provide hook_theme().
 357  *
 358  * This is kept in this file so it can be with the theme functions it presents.
 359  * Otherwise it would get lonely.
 360  */
 361 function _form_example_element_theme() {
 362   return array(
 363     &#039;form_example_inline_form_element&#039; =&gt; array(
 364       &#039;render element&#039; =&gt; &#039;element&#039;,
 365       &#039;file&#039; =&gt; &#039;form_example_elements.inc&#039;,
 366     ),
 367     &#039;form_example_checkbox&#039; =&gt; array(
 368       &#039;render element&#039; =&gt; &#039;element&#039;,
 369       &#039;file&#039; =&gt; &#039;form_example_elements.inc&#039;,
 370     ),
 371   );
 372 }
 373 
 374 /**
 375  * Themes a custom checkbox.
 376  *
 377  * This doesn&#039;t actually do anything, but is here to show that theming can
 378  * be done here.
 379  */
 380 function theme_form_example_checkbox($variables) {
 381   $element = $variables[&#039;element&#039;];
 382   return theme(&#039;checkbox&#039;, $element);
 383 }
 384 
 385 /**
 386  * Formats child form elements as inline elements.
 387  */
 388 function theme_form_example_inline_form_element($variables) {
 389   $element = $variables[&#039;element&#039;];
 390 
 391   // Add element #id for #type &#039;item&#039;.
 392   if (isset($element[&#039;#markup&#039;]) &amp;&amp; !empty($element[&#039;#id&#039;])) {
 393     $attributes[&#039;id&#039;] = $element[&#039;#id&#039;];
 394   }
 395   // Add element&#039;s #type and #name as class to aid with JS/CSS selectors.
 396   $attributes[&#039;class&#039;] = array(&#039;form-item&#039;);
 397   if (!empty($element[&#039;#type&#039;])) {
 398     $attributes[&#039;class&#039;][] = &#039;form-type-&#039; . strtr($element[&#039;#type&#039;], &#039;_&#039;, &#039;-&#039;);
 399   }
 400   if (!empty($element[&#039;#name&#039;])) {
 401     $attributes[&#039;class&#039;][] = &#039;form-item-&#039; . strtr($element[&#039;#name&#039;], array(&#039; &#039; =&gt; &#039;-&#039;, &#039;_&#039; =&gt; &#039;-&#039;, &#039;[&#039; =&gt; &#039;-&#039;, &#039;]&#039; =&gt; &#039;&#039;));
 402   }
 403   // Add a class for disabled elements to facilitate cross-browser styling.
 404   if (!empty($element[&#039;#attributes&#039;][&#039;disabled&#039;])) {
 405     $attributes[&#039;class&#039;][] = &#039;form-disabled&#039;;
 406   }
 407   $output = &#039;&lt;div&#039; . drupal_attributes($attributes) . &#039;&gt;&#039; . &quot;\n&quot;;
 408 
 409   // If #title is not set, we don&#039;t display any label or required marker.
 410   if (!isset($element[&#039;#title&#039;])) {
 411     $element[&#039;#title_display&#039;] = &#039;none&#039;;
 412   }
 413   $prefix = isset($element[&#039;#field_prefix&#039;]) ? &#039;&lt;span class=&quot;field-prefix&quot;&gt;&#039; . $element[&#039;#field_prefix&#039;] . &#039;&lt;/span&gt; &#039; : &#039;&#039;;
 414   $suffix = isset($element[&#039;#field_suffix&#039;]) ? &#039; &lt;span class=&quot;field-suffix&quot;&gt;&#039; . $element[&#039;#field_suffix&#039;] . &#039;&lt;/span&gt;&#039; : &#039;&#039;;
 415 
 416   switch ($element[&#039;#title_display&#039;]) {
 417     case &#039;before&#039;:
 418       $output .= &#039; &#039; . theme(&#039;form_element_label&#039;, $variables);
 419       $output .= &#039; &#039; . &#039;&lt;div class=&quot;container-inline&quot;&gt;&#039; . $prefix . $element[&#039;#children&#039;] . $suffix . &quot;&lt;/div&gt;\n&quot;;
 420       break;
 421 
 422     case &#039;invisible&#039;:
 423     case &#039;after&#039;:
 424       $output .= &#039; &#039; . $prefix . $element[&#039;#children&#039;] . $suffix;
 425       $output .= &#039; &#039; . theme(&#039;form_element_label&#039;, $variables) . &quot;\n&quot;;
 426       break;
 427 
 428     case &#039;none&#039;:
 429     case &#039;attribute&#039;:
 430       // Output no label and no required marker, only the children.
 431       $output .= &#039; &#039; . $prefix . $element[&#039;#children&#039;] . $suffix . &quot;\n&quot;;
 432       break;
 433   }
 434 
 435   if (!empty($element[&#039;#description&#039;])) {
 436     $output .= &#039; &lt;div class=&quot;description&quot;&gt;&#039; . $element[&#039;#description&#039;] . &quot;&lt;/div&gt;\n&quot;;
 437   }
 438 
 439   $output .= &quot;&lt;/div&gt;\n&quot;;
 440 
 441   return $output;
 442 }
 443 
 444 /**
 445  * Simple form to demonstrate how to use the various new FAPI elements
 446  * we&#039;ve defined.
 447  */
 448 function form_example_element_demo_form($form, &amp;$form_state) {
 449   $form[&#039;a_form_example_textfield&#039;] = array(
 450     &#039;#type&#039; =&gt; &#039;form_example_textfield&#039;,
 451     &#039;#title&#039; =&gt; t(&#039;Form Example textfield&#039;),
 452     &#039;#default_value&#039; =&gt; variable_get(&#039;form_example_textfield&#039;, &#039;&#039;),
 453     &#039;#description&#039; =&gt; t(&#039;form_example_textfield is a new type, but it is actually uses the system-provided functions of textfield&#039;),
 454   );
 455 
 456   $form[&#039;a_form_example_checkbox&#039;] = array(
 457     &#039;#type&#039; =&gt; &#039;form_example_checkbox&#039;,
 458     &#039;#title&#039; =&gt; t(&#039;Form Example checkbox&#039;),
 459     &#039;#default_value&#039; =&gt; variable_get(&#039;form_example_checkbox&#039;, FALSE),
 460     &#039;#description&#039; =&gt; t(&#039;Nothing more than a regular checkbox but with a theme provided by this module.&#039;)
 461   );
 462 
 463   $form[&#039;a_form_example_element_discrete&#039;] = array(
 464     &#039;#type&#039; =&gt; &#039;form_example_phonenumber_discrete&#039;,
 465     &#039;#title&#039; =&gt; t(&#039;Discrete phone number&#039;),
 466     &#039;#default_value&#039; =&gt; variable_get(&#039;form_example_element_discrete&#039;, array(&#039;areacode&#039; =&gt; &#039;999&#039;, &#039;prefix&#039; =&gt; &#039;999&#039;, &#039;extension&#039; =&gt; &#039;9999&#039;)),
 467     &#039;#description&#039; =&gt; t(&#039;A phone number : areacode (XXX), prefix (XXX) and extension (XXXX). This one uses a &quot;discrete&quot; element type, one which stores the three parts of the telephone number separately.&#039;),
 468   );
 469 
 470   $form[&#039;a_form_example_element_combined&#039;] = array(
 471     &#039;#type&#039; =&gt; &#039;form_example_phonenumber_combined&#039;,
 472     &#039;#title&#039; =&gt; t(&#039;Combined phone number&#039;),
 473     &#039;#default_value&#039; =&gt; variable_get(&#039;form_example_element_combined&#039;, &#039;0000000000&#039;),
 474     &#039;#description&#039; =&gt; t(&#039;form_example_element_combined one uses a &quot;combined&quot; element type, one with a single 10-digit value which is broken apart when needed.&#039;),
 475   );
 476 
 477   $form[&#039;submit&#039;] = array(
 478     &#039;#type&#039; =&gt; &#039;submit&#039;,
 479     &#039;#value&#039; =&gt; t(&#039;Submit&#039;),
 480   );
 481 
 482   return $form;
 483 }
 484 
 485 /**
 486  * Submit handler for form_example_element_demo_form().
 487  */
 488 function form_example_element_demo_form_submit($form, &amp;$form_state) {
 489   // Exclude unnecessary elements.
 490   unset($form_state[&#039;values&#039;][&#039;submit&#039;], $form_state[&#039;values&#039;][&#039;form_id&#039;], $form_state[&#039;values&#039;][&#039;op&#039;], $form_state[&#039;values&#039;][&#039;form_token&#039;], $form_state[&#039;values&#039;][&#039;form_build_id&#039;]);
 491 
 492   foreach ($form_state[&#039;values&#039;] as $key =&gt; $value) {
 493     variable_set($key, $value);
 494     drupal_set_message(t(&#039;%name has value %value&#039;, array(&#039;%name&#039; =&gt; $key, &#039;%value&#039; =&gt; print_r($value, TRUE))));
 495   }
 496 }</pre>

</div>
<!-- EDIT5 SECTION "form_example_elements.inc" [18397-39602] -->
<h2 class="sectionedit6" id="form_example_statesinc">form_example_states.inc</h2>
<div class="level2">
<pre class="code">  1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * An example of how to use the new #states Form API element, allowing
   6  * dynamic form behavior with very simple setup.
   7  */
   8 
   9 /**
  10  * This form shows off the #states system by dynamically showing parts of the
  11  * form based on the state of other parts.
  12  *
  13  * @ingroup form_example
  14  *
  15  * The basic idea is that you add a #states property to the element which is
  16  * to be changed based on some action elsewhere on the form. The #states
  17  * property lists a change which is to be made, and under what conditions
  18  * that change should be made.
  19  *
  20  * For example, in the &#039;tests_taken&#039; form element below we have:
  21  * @code
  22  * &#039;#states&#039; =&gt; array(
  23  *   &#039;visible&#039; =&gt; array(
  24  *     &#039;:input[name=&quot;student_type&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; &#039;high_school&#039;),
  25  *   ),
  26  * ),
  27  * @endcode
  28  * Meaning that the element is to be made visible when the condition is met.
  29  * The condition is a combination of a jQuery selector (which selects the
  30  * element we want to test) and a condition for that element. In this case,
  31  * the condition is whether the return value of the &#039;student_type&#039; element is
  32  * &#039;high_school&#039;. If it is, this element will be visible.
  33  *
  34  * So the syntax is:
  35  * @code
  36  * &#039;#states&#039; =&gt; array(
  37  *   &#039;action_to_take_on_this_form_element&#039; =&gt; array(
  38  *     &#039;jquery_selector_for_another_element&#039; =&gt; array(&#039;condition_type&#039; =&gt; value),
  39  *   ),
  40  * ),
  41  * @endcode
  42  *
  43  * If you need an action to take place only when two different conditions are
  44  * true, then you add both of those conditions to the action. See the
  45  * &#039;country_writein&#039; element below for an example.
  46  *
  47  * Note that the easiest way to select a textfield, checkbox, or select is with
  48  * the @link http://api.jquery.com/input-selector/ &#039;:input&#039; jquery shortcut @endlink,
  49  * which selects any any of those.
  50  *
  51  * There are examples below of changing or hiding an element when a checkbox
  52  * is checked, when a textarea is filled, when a select has a given value.
  53  *
  54  * See drupal_process_states() for full documentation.
  55  *
  56  * See also @link http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/7#states Form API Reference @endlink
  57  */
  58 function form_example_states_form($form, &amp;$form_state) {
  59   $form[&#039;student_type&#039;] = array(
  60     &#039;#type&#039; =&gt; &#039;radios&#039;,
  61     &#039;#options&#039; =&gt; array(
  62       &#039;high_school&#039;   =&gt; t(&#039;High School&#039;),
  63       &#039;undergraduate&#039; =&gt; t(&#039;Undergraduate&#039;),
  64       &#039;graduate&#039;      =&gt; t(&#039;Graduate&#039;),
  65     ),
  66     &#039;#title&#039; =&gt; t(&#039;What type of student are you?&#039;)
  67   );
  68   $form[&#039;high_school&#039;] = array(
  69     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
  70     &#039;#title&#039; =&gt; t(&#039;High School Information&#039;),
  71     // This #states rule says that the &quot;high school&quot; fieldset should only
  72     // be shown if the &quot;student_type&quot; form element is set to &quot;High School&quot;.
  73     &#039;#states&#039; =&gt; array(
  74       &#039;visible&#039; =&gt; array(
  75         &#039;:input[name=&quot;student_type&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; &#039;high_school&#039;),
  76       ),
  77     ),
  78   );
  79 
  80   // High school information.
  81   $form[&#039;high_school&#039;][&#039;tests_taken&#039;] = array(
  82     &#039;#type&#039; =&gt; &#039;checkboxes&#039;,
  83     &#039;#options&#039; =&gt; drupal_map_assoc(array(t(&#039;SAT&#039;), t(&#039;ACT&#039;))),
  84     &#039;#title&#039; =&gt; t(&#039;What standardized tests did you take?&#039;),
  85     // This #states rule says that this checkboxes array will be visible only
  86     // when $form[&#039;student_type&#039;] is set to t(&#039;High School&#039;).
  87     // It uses the jQuery selector :input[name=student_type] to choose the
  88     // element which triggers the behavior, and then defines the &quot;High School&quot;
  89     // value as the one that triggers visibility.
  90     &#039;#states&#039; =&gt; array(
  91       &#039;visible&#039; =&gt; array(   // action to take.
  92         &#039;:input[name=&quot;student_type&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; &#039;high_school&#039;),
  93       ),
  94     ),
  95   );
  96 
  97   $form[&#039;high_school&#039;][&#039;sat_score&#039;] = array(
  98     &#039;#type&#039; =&gt; &#039;textfield&#039;,
  99     &#039;#title&#039; =&gt; t(&#039;Your SAT score:&#039;),
 100     &#039;#size&#039; =&gt; 4,
 101 
 102     // This #states rule limits visibility to when the $form[&#039;tests_taken&#039;]
 103     // &#039;SAT&#039; checkbox is checked.&quot;
 104     &#039;#states&#039; =&gt; array(
 105       &#039;visible&#039; =&gt; array(  // action to take.
 106         &#039;:input[name=&quot;tests_taken[SAT]&quot;]&#039; =&gt; array(&#039;checked&#039; =&gt; TRUE),
 107       ),
 108     ),
 109   );
 110   $form[&#039;high_school&#039;][&#039;act_score&#039;] = array(
 111     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 112     &#039;#title&#039; =&gt; t(&#039;Your ACT score:&#039;),
 113     &#039;#size&#039; =&gt; 4,
 114 
 115     // Set this element visible if the ACT checkbox above is checked.
 116     &#039;#states&#039; =&gt; array(
 117       &#039;visible&#039; =&gt; array(  // action to take.
 118         &#039;:input[name=&quot;tests_taken[ACT]&quot;]&#039; =&gt; array(&#039;checked&#039; =&gt; TRUE),
 119       ),
 120     ),
 121   );
 122 
 123   // Undergrad information.
 124   $form[&#039;undergraduate&#039;] = array(
 125     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 126     &#039;#title&#039; =&gt; t(&#039;Undergraduate Information&#039;),
 127     // This #states rule says that the &quot;undergraduate&quot; fieldset should only
 128     // be shown if the &quot;student_type&quot; form element is set to &quot;Undergraduate&quot;.
 129     &#039;#states&#039; =&gt; array(
 130       &#039;visible&#039; =&gt; array(
 131         &#039;:input[name=&quot;student_type&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; &#039;undergraduate&#039;),
 132       ),
 133     ),
 134   );
 135 
 136   $form[&#039;undergraduate&#039;][&#039;how_many_years&#039;] = array(
 137     &#039;#type&#039; =&gt; &#039;select&#039;,
 138     &#039;#title&#039; =&gt; t(&#039;How many years have you completed?&#039;),
 139     // The options here are integers, but since all the action here happens
 140     // using the DOM on the client, we will have to use strings to work with
 141     // them.
 142     &#039;#options&#039; =&gt; array(
 143       1 =&gt; t(&#039;One&#039;),
 144       2 =&gt; t(&#039;Two&#039;),
 145       3 =&gt; t(&#039;Three&#039;),
 146       4 =&gt; t(&#039;Four&#039;),
 147       5 =&gt; t(&#039;Lots&#039;),
 148     ),
 149   );
 150 
 151   $form[&#039;undergraduate&#039;][&#039;comment&#039;] = array(
 152     &#039;#type&#039; =&gt; &#039;item&#039;,
 153     &#039;#description&#039; =&gt; t(&quot;Wow, that&#039;s a long time.&quot;),
 154     &#039;#states&#039; =&gt; array(
 155       &#039;visible&#039; =&gt; array(
 156         // Note that &#039;5&#039; must be used here instead of the integer 5.
 157         // The information is coming from the DOM as a string.
 158         &#039;:input[name=&quot;how_many_years&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; &#039;5&#039;),
 159       ),
 160     ),
 161   );
 162   $form[&#039;undergraduate&#039;][&#039;school_name&#039;] = array(
 163     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 164     &#039;#title&#039; =&gt; t(&#039;Your college or university:&#039;),
 165   );
 166   $form[&#039;undergraduate&#039;][&#039;school_country&#039;] = array(
 167     &#039;#type&#039; =&gt; &#039;select&#039;,
 168     &#039;#options&#039; =&gt; drupal_map_assoc(array(t(&#039;UK&#039;), t(&#039;Other&#039;))),
 169     &#039;#title&#039; =&gt; t(&#039;In what country is your college or university located?&#039;),
 170   );
 171   $form[&#039;undergraduate&#039;][&#039;country_writein&#039;] = array(
 172     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 173     &#039;#size&#039; =&gt; 20,
 174     &#039;#title&#039; =&gt; t(&#039;Please enter the name of the country where your college or university is located.&#039;),
 175 
 176     // Only show this field if school_country is set to &#039;Other&#039;.
 177     &#039;#states&#039; =&gt; array(
 178       &#039;visible&#039; =&gt; array(  // Action to take: Make visible.
 179         &#039;:input[name=&quot;school_country&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; t(&#039;Other&#039;)),
 180       ),
 181     ),
 182   );
 183 
 184   $form[&#039;undergraduate&#039;][&#039;thanks&#039;] = array(
 185     &#039;#type&#039; =&gt; &#039;item&#039;,
 186     &#039;#description&#039; =&gt; t(&#039;Thanks for providing both your school and your country.&#039;),
 187     &#039;#states&#039; =&gt; array(
 188       // Here visibility requires that two separate conditions be true.
 189       &#039;visible&#039; =&gt; array(
 190         &#039;input[name=&quot;school_country&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; t(&#039;Other&#039;)),
 191         &#039;input[name=&quot;country_writein&quot;]&#039; =&gt; array(&#039;filled&#039; =&gt; TRUE),
 192       ),
 193     ),
 194   );
 195   $form[&#039;undergraduate&#039;][&#039;go_away&#039;] = array(
 196     &#039;#type&#039; =&gt; &#039;submit&#039;,
 197     &#039;#value&#039; =&gt; t(&#039;Done with form&#039;),
 198     &#039;#states&#039; =&gt; array(
 199       // Here visibility requires that two separate conditions be true.
 200       &#039;visible&#039; =&gt; array(
 201         &#039;input[name=&quot;school_country&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; t(&#039;Other&#039;)),
 202         &#039;input[name=&quot;country_writein&quot;]&#039; =&gt; array(&#039;filled&#039; =&gt; TRUE),
 203       ),
 204     ),
 205   );
 206 
 207   // Graduate student information.
 208   $form[&#039;graduate&#039;] = array(
 209     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 210     &#039;#title&#039; =&gt; t(&#039;Graduate School Information&#039;),
 211     // This #states rule says that the &quot;graduate&quot; fieldset should only
 212     // be shown if the &quot;student_type&quot; form element is set to &quot;Graduate&quot;.
 213     &#039;#states&#039; =&gt; array(
 214       &#039;visible&#039; =&gt; array(
 215         &#039;:input[name=&quot;student_type&quot;]&#039; =&gt; array(&#039;value&#039; =&gt; &#039;graduate&#039;),
 216       ),
 217     ),
 218   );
 219   $form[&#039;graduate&#039;][&#039;more_info&#039;] = array(
 220     &#039;#type&#039; =&gt; &#039;textarea&#039;,
 221     &#039;#title&#039; =&gt; t(&#039;Please describe your graduate studies&#039;),
 222   );
 223 
 224   $form[&#039;graduate&#039;][&#039;info_provide&#039;] = array(
 225     &#039;#type&#039; =&gt; &#039;checkbox&#039;,
 226     &#039;#title&#039; =&gt; t(&#039;Check here if you have provided information above&#039;),
 227     &#039;#disabled&#039; =&gt; TRUE,
 228     &#039;#states&#039; =&gt; array(
 229       // Mark this checkbox checked if the &quot;more_info&quot; textarea has something
 230       // in it, if it&#039;s &#039;filled&#039;.
 231       &#039;checked&#039; =&gt; array(      // Action to take: check the checkbox.
 232         &#039;:input[name=&quot;more_info&quot;]&#039; =&gt; array(&#039;filled&#039; =&gt; TRUE),
 233       ),
 234     ),
 235   );
 236 
 237   $form[&#039;average&#039;] = array(
 238     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 239     &#039;#title&#039; =&gt; t(&#039;Enter your average&#039;),
 240     // To trigger a state when the same controlling element can have more than
 241     // one possible value, put all values in a higher-level array.
 242     &#039;#states&#039; =&gt; array(
 243       &#039;visible&#039; =&gt; array(
 244         &#039;:input[name=&quot;student_type&quot;]&#039; =&gt; array(
 245           array(&#039;value&#039; =&gt; &#039;high_school&#039;),
 246           array(&#039;value&#039; =&gt; &#039;undergraduate&#039;),
 247         ),
 248       ),
 249     ),
 250   );
 251 
 252   $form[&#039;expand_more_info&#039;] = array(
 253     &#039;#type&#039; =&gt; &#039;checkbox&#039;,
 254     &#039;#title&#039; =&gt; t(&#039;Check here if you want to add more information.&#039;),
 255   );
 256   $form[&#039;more_info&#039;] = array(
 257     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 258     &#039;#title&#039; =&gt; t(&#039;Additional Information&#039;),
 259     &#039;#collapsible&#039; =&gt; TRUE,
 260     &#039;#collapsed&#039; =&gt; TRUE,
 261 
 262     // Expand the expand_more_info fieldset if the box is checked.
 263     &#039;#states&#039; =&gt; array(
 264       &#039;expanded&#039; =&gt; array(
 265         &#039;:input[name=&quot;expand_more_info&quot;]&#039; =&gt; array(&#039;checked&#039; =&gt; TRUE),
 266       ),
 267     ),
 268   );
 269   $form[&#039;more_info&#039;][&#039;feedback&#039;] = array(
 270     &#039;#type&#039; =&gt; &#039;textarea&#039;,
 271     &#039;#title&#039; =&gt; t(&#039;What do you have to say?&#039;),
 272   );
 273 
 274   $form[&#039;submit&#039;] = array(
 275     &#039;#type&#039; =&gt; &#039;submit&#039;,
 276     &#039;#value&#039; =&gt; t(&#039;Submit your information&#039;),
 277   );
 278 
 279   return $form;
 280 }
 281 
 282 /**
 283  * Submit handler for form_example_states_form().
 284  */
 285 function form_example_states_form_submit($form, &amp;$form_state) {
 286   drupal_set_message(t(&#039;Submitting values: @values&#039;, array(&#039;@values&#039; =&gt; var_export($form_state[&#039;values&#039;], TRUE))));
 287 }</pre>

</div>
<!-- EDIT6 SECTION "form_example_states.inc" [39603-50823] -->
<h2 class="sectionedit7" id="form_example_tutorialinc">form_example_tutorial.inc</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * This is the Form API Tutorial from the handbook.
   6  *
   7  * It goes through 10 form examples of increasing complexity to demonstrate
   8  * Drupal 7 Form API.
   9  *
  10  * Links are provided inline for the related handbook pages.
  11  *
  12  * @see http://drupal.org/node/262422
  13  */
  14 
  15 /**
  16  * Main Form tutorial page.
  17  *
  18  * @see form_example_tutorial_1()
  19  * @see form_example_tutorial_2()
  20  * @see form_example_tutorial_3()
  21  * @see form_example_tutorial_4()
  22  * @see form_example_tutorial_5()
  23  * @see form_example_tutorial_6()
  24  * @see form_example_tutorial_7()
  25  * @see form_example_tutorial_8()
  26  * @see form_example_tutorial_9()
  27  * @see form_example_tutorial_10()
  28  *
  29  * @ingroup form_example
  30  */
  31 function form_example_tutorial() {
  32   return t(&#039;This is a set of 10 form tutorials tied to the &lt;a href=&quot;http://drupal.org/node/262422&quot;&gt;Drupal handbook&lt;/a&gt;.&#039;);
  33 }
  34 
  35 //////////////// Tutorial Example 1 //////////////////////
  36 
  37 /**
  38  * This first form function is from the @link http://drupal.org/node/717722 Form Tutorial handbook page @endlink
  39  *
  40  * It just creates a very basic form with a textfield.
  41  *
  42  * This function is called the &quot;form constructor function&quot;. It builds the form.
  43  * It takes a two arguments, $form and $form_state, but if drupal_get_form()
  44  * sends additional arguments, they will be provided after $form_state.
  45  *
  46  * @ingroup form_example
  47  */
  48 function form_example_tutorial_1($form, &amp;$form_state) {
  49 
  50   $form[&#039;description&#039;] = array(
  51     &#039;#type&#039; =&gt; &#039;item&#039;,
  52     &#039;#title&#039; =&gt; t(&#039;A form with nothing but a textfield&#039;),
  53   );
  54   // This is the first form element. It&#039;s a textfield with a label, &quot;Name&quot;
  55   $form[&#039;name&#039;] = array(
  56     &#039;#type&#039; =&gt; &#039;textfield&#039;,
  57     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
  58   );
  59   return $form;
  60 }
  61 
  62 
  63 //////////////// Tutorial Example 2 //////////////////////
  64 
  65 /**
  66  * This is Example 2, a basic form with a submit button.
  67  *
  68  * @see http://drupal.org/node/717726
  69  * @ingroup form_example
  70  */
  71 function form_example_tutorial_2($form, &amp;$form_state) {
  72   $form[&#039;description&#039;] = array(
  73     &#039;#type&#039; =&gt; &#039;item&#039;,
  74     &#039;#title&#039; =&gt; t(&#039;A simple form with a submit button&#039;),
  75   );
  76 
  77   $form[&#039;name&#039;] = array(
  78     &#039;#type&#039; =&gt; &#039;textfield&#039;,
  79     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
  80   );
  81 
  82   // Adds a simple submit button that refreshes the form and clears its
  83   // contents. This is the default behavior for forms.
  84   $form[&#039;submit&#039;] = array(
  85     &#039;#type&#039; =&gt; &#039;submit&#039;,
  86     &#039;#value&#039; =&gt; &#039;Submit&#039;,
  87   );
  88   return $form;
  89 }
  90 
  91 //////////////// Tutorial Example 3 //////////////////////
  92 
  93 /**
  94  * Example 3: A basic form with fieldsets.
  95  *
  96  * We establish a fieldset element and then place two text fields within
  97  * it, one for a first name and one for a last name. This helps us group
  98  * related content.
  99  *
 100  * Study the code below and you&#039;ll notice that we renamed the array of the first
 101  * and last name fields by placing them under the $form[&#039;name&#039;]
 102  * array. This tells Form API these fields belong to the $form[&#039;name&#039;] fieldset.
 103  *
 104  * @ingroup form_example
 105  */
 106 function form_example_tutorial_3($form, &amp;$form_state) {
 107   $form[&#039;description&#039;] = array(
 108     &#039;#type&#039; =&gt; &#039;item&#039;,
 109     &#039;#title&#039; =&gt; t(&#039;A form with a fieldset&#039;),
 110   );
 111 
 112   $form[&#039;name&#039;] = array(
 113     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 114     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
 115   );
 116   $form[&#039;name&#039;][&#039;first&#039;] = array(
 117     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 118     &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 119   );
 120   $form[&#039;name&#039;][&#039;last&#039;] = array(
 121     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 122     &#039;#title&#039; =&gt; t(&#039;Last name&#039;),
 123   );
 124 
 125 
 126   $form[&#039;submit&#039;] = array(
 127     &#039;#type&#039; =&gt; &#039;submit&#039;,
 128     &#039;#value&#039; =&gt; &#039;Submit&#039;,
 129   );
 130   return $form;
 131 }
 132 
 133 
 134 //////////////// Tutorial Example 4 //////////////////////
 135 
 136 /**
 137  * Example 4: Basic form with required fields.
 138  *
 139  * @ingroup form_example
 140  */
 141 function form_example_tutorial_4($form, &amp;$form_state) {
 142   $form[&#039;description&#039;] = array(
 143     &#039;#type&#039; =&gt; &#039;item&#039;,
 144     &#039;#title&#039; =&gt; t(&#039;A form with required fields&#039;),
 145   );
 146 
 147   $form[&#039;name&#039;] = array(
 148     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 149     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
 150     // Make the fieldset collapsible.
 151     &#039;#collapsible&#039; =&gt; TRUE, // Added
 152     &#039;#collapsed&#039; =&gt; FALSE,  // Added
 153   );
 154 
 155   // Make these fields required.
 156   $form[&#039;name&#039;][&#039;first&#039;] = array(
 157     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 158     &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 159     &#039;#required&#039; =&gt; TRUE, // Added
 160   );
 161   $form[&#039;name&#039;][&#039;last&#039;] = array(
 162     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 163     &#039;#title&#039; =&gt; t(&#039;Last name&#039;),
 164     &#039;#required&#039; =&gt; TRUE, // Added
 165   );
 166 
 167   $form[&#039;submit&#039;] = array(
 168     &#039;#type&#039; =&gt; &#039;submit&#039;,
 169     &#039;#value&#039; =&gt; &#039;Submit&#039;,
 170   );
 171   return $form;
 172 }
 173 
 174 
 175 //////////////// Tutorial Example 5 //////////////////////
 176 
 177 /**
 178  * Example 5: Basic form with additional element attributes.
 179  *
 180  * This demonstrates additional attributes of text form fields.
 181  *
 182  * For a more extensive example on element types
 183  * @see http://drupal.org/node/751826
 184  *
 185  * See the @link http://api.drupal.org/api/file/developer/topics/forms_api.html complete form reference @endlink
 186  *
 187  * @ingroup form_example
 188  */
 189 function form_example_tutorial_5($form, &amp;$form_state) {
 190   $form[&#039;description&#039;] = array(
 191     &#039;#type&#039; =&gt; &#039;item&#039;,
 192     &#039;#title&#039; =&gt; t(&#039;A form with additional attributes&#039;),
 193     &#039;#description&#039; =&gt; t(&#039;This one adds #default_value and #description&#039;),
 194   );
 195   $form[&#039;name&#039;] = array(
 196     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 197     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
 198     &#039;#collapsible&#039; =&gt; TRUE,
 199     &#039;#collapsed&#039; =&gt; FALSE,
 200   );
 201 
 202   $form[&#039;name&#039;][&#039;first&#039;] = array(
 203     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 204     &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 205     &#039;#required&#039; =&gt; TRUE,
 206     &#039;#default_value&#039; =&gt; &quot;First name&quot;, // added default value.
 207     &#039;#description&#039; =&gt; &quot;Please enter your first name.&quot;, // added description
 208     &#039;#size&#039; =&gt; 20, // added
 209     &#039;#maxlength&#039; =&gt; 20, // added
 210   );
 211   $form[&#039;name&#039;][&#039;last&#039;] = array(
 212     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 213     &#039;#title&#039; =&gt; t(&#039;Last name&#039;),
 214     &#039;#required&#039; =&gt; TRUE,
 215   );
 216   $form[&#039;submit&#039;] = array(
 217     &#039;#type&#039; =&gt; &#039;submit&#039;,
 218     &#039;#value&#039; =&gt; &#039;Submit&#039;,
 219   );
 220   return $form;
 221 }
 222 
 223 
 224 //////////////// Tutorial Example 6 //////////////////////
 225 
 226 /**
 227  * Example 6: A basic form with a validate handler.
 228  *
 229  * From http://drupal.org/node/717736
 230  * @see form_example_tutorial_6_validate()
 231  */
 232 function form_example_tutorial_6($form, &amp;$form_state) {
 233   $form[&#039;description&#039;] = array(
 234     &#039;#type&#039; =&gt; &#039;item&#039;,
 235     &#039;#title&#039; =&gt; t(&#039;A form with a validation handler&#039;),
 236   );
 237 
 238   $form[&#039;name&#039;] = array(
 239     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 240     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
 241     &#039;#collapsible&#039; =&gt; TRUE,
 242     &#039;#collapsed&#039; =&gt; FALSE,
 243   );
 244   $form[&#039;name&#039;][&#039;first&#039;] = array(
 245     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 246     &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 247     &#039;#required&#039; =&gt; TRUE,
 248     &#039;#default_value&#039; =&gt; &quot;First name&quot;,
 249     &#039;#description&#039; =&gt; &quot;Please enter your first name.&quot;,
 250     &#039;#size&#039; =&gt; 20,
 251     &#039;#maxlength&#039; =&gt; 20,
 252   );
 253   $form[&#039;name&#039;][&#039;last&#039;] = array(
 254     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 255     &#039;#title&#039; =&gt; t(&#039;Last name&#039;),
 256     &#039;#required&#039; =&gt; TRUE,
 257   );
 258 
 259   // New form field added to permit entry of year of birth.
 260   // The data entered into this field will be validated with
 261   // the default validation function.
 262   $form[&#039;year_of_birth&#039;] = array(
 263     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 264     &#039;#title&#039; =&gt; &quot;Year of birth&quot;,
 265     &#039;#description&#039; =&gt; &#039;Format is &quot;YYYY&quot;&#039;,
 266   );
 267 
 268   $form[&#039;submit&#039;] = array(
 269     &#039;#type&#039; =&gt; &#039;submit&#039;,
 270     &#039;#value&#039; =&gt; &#039;Submit&#039;,
 271   );
 272   return $form;
 273 }
 274 
 275 
 276 
 277 /**
 278  * Now we add a handler/function to validate the data entered into the
 279  * &quot;year of birth&quot; field to make sure it&#039;s between the values of 1900
 280  * and 2000. If not, it displays an error. The value report is
 281  * $form_state[&#039;values&#039;] (see http://drupal.org/node/144132#form-state).
 282  *
 283  * Notice the name of the function. It is simply the name of the form
 284  * followed by &#039;_validate&#039;. This is always the name of the default validation
 285  * function. An alternate list of validation functions could have been provided
 286  * in $form[&#039;#validate&#039;].
 287  *
 288  * @see form_example_tutorial_6()
 289  */
 290 function form_example_tutorial_6_validate($form, &amp;$form_state) {
 291   $year_of_birth = $form_state[&#039;values&#039;][&#039;year_of_birth&#039;];
 292   if ($year_of_birth &amp;&amp; ($year_of_birth &lt; 1900 || $year_of_birth &gt; 2000)) {
 293     form_set_error(&#039;year_of_birth&#039;, t(&#039;Enter a year between 1900 and 2000.&#039;));
 294   }
 295 }
 296 
 297 
 298 //////////////// Tutorial Example 7 //////////////////////
 299 
 300 /**
 301  * Example 7: With a submit handler.
 302  *
 303  * From the handbook page:
 304  * http://drupal.org/node/717740
 305  *
 306  * @see form_example_tutorial_7_validate()
 307  * @see form_example_tutorial_7_submit()
 308  * @ingroup form_example
 309  */
 310 function form_example_tutorial_7($form, &amp;$form_state) {
 311   $form[&#039;description&#039;] = array(
 312     &#039;#type&#039; =&gt; &#039;item&#039;,
 313     &#039;#title&#039; =&gt; t(&#039;A form with a submit handler&#039;),
 314   );
 315   $form[&#039;name&#039;] = array(
 316     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 317     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
 318     &#039;#collapsible&#039; =&gt; TRUE,
 319     &#039;#collapsed&#039; =&gt; FALSE,
 320   );
 321   $form[&#039;name&#039;][&#039;first&#039;] = array(
 322     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 323     &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 324     &#039;#required&#039; =&gt; TRUE,
 325     &#039;#default_value&#039; =&gt; &quot;First name&quot;,
 326     &#039;#description&#039; =&gt; &quot;Please enter your first name.&quot;,
 327     &#039;#size&#039; =&gt; 20,
 328     &#039;#maxlength&#039; =&gt; 20,
 329   );
 330   $form[&#039;name&#039;][&#039;last&#039;] = array(
 331     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 332     &#039;#title&#039; =&gt; t(&#039;Last name&#039;),
 333     &#039;#required&#039; =&gt; TRUE,
 334   );
 335   $form[&#039;year_of_birth&#039;] = array(
 336     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 337     &#039;#title&#039; =&gt; &quot;Year of birth&quot;,
 338     &#039;#description&#039; =&gt; &#039;Format is &quot;YYYY&quot;&#039;,
 339   );
 340   $form[&#039;submit&#039;] = array(
 341     &#039;#type&#039; =&gt; &#039;submit&#039;,
 342     &#039;#value&#039; =&gt; &#039;Submit&#039;,
 343   );
 344   return $form;
 345 }
 346 
 347 
 348 /**
 349  * Validation function for form_example_tutorial_7().
 350  */
 351 function form_example_tutorial_7_validate($form, &amp;$form_state) {
 352   $year_of_birth = $form_state[&#039;values&#039;][&#039;year_of_birth&#039;];
 353   if ($year_of_birth &amp;&amp; ($year_of_birth &lt; 1900 || $year_of_birth &gt; 2000)) {
 354     form_set_error(&#039;year_of_birth&#039;, t(&#039;Enter a year between 1900 and 2000.&#039;));
 355   }
 356 }
 357 
 358 /**
 359  * Submit function for form_example_tutorial_7().
 360  *
 361  * Adds a submit handler/function to our form to send a successful
 362  * completion message to the screen.
 363  */
 364 function form_example_tutorial_7_submit($form, &amp;$form_state) {
 365   drupal_set_message(t(&#039;The form has been submitted. name=&quot;@first @last&quot;, year of birth=@year_of_birth&#039;,
 366     array(&#039;@first&#039; =&gt; $form_state[&#039;values&#039;][&#039;first&#039;], &#039;@last&#039; =&gt; $form_state[&#039;values&#039;][&#039;last&#039;], &#039;@year_of_birth&#039; =&gt; $form_state[&#039;values&#039;][&#039;year_of_birth&#039;])));
 367 }
 368 
 369 
 370 //////////////// Tutorial Example 8 //////////////////////
 371 
 372 /**
 373  * Example 8: A simple multistep form with a Next and a Back button.
 374  *
 375  * Handbook page: http://drupal.org/node/717750.
 376  *
 377  * For more extensive multistep forms, see
 378  * @link form_example_wizard.inc form_example_wizard.inc @endlink
 379  *
 380  *
 381  * Adds logic to our form builder to give it two pages.
 382  * The @link ajax_example_wizard AJAX Example&#039;s Wizard Example @endlink
 383  * gives an AJAX version of this same idea.
 384  *
 385  * @see form_example_tutorial_8_page_two()
 386  * @see form_example_tutorial_8_page_two_back()
 387  * @see form_example_tutorial_8_page_two_submit()
 388  * @see form_example_tutorial_8_next_submit()
 389  * @see form_example_tutorial.inc
 390  * @ingroup form_example
 391  */
 392 function form_example_tutorial_8($form, &amp;$form_state) {
 393 
 394   // Display page 2 if $form_state[&#039;page_num&#039;] == 2
 395   if (!empty($form_state[&#039;page_num&#039;]) &amp;&amp; $form_state[&#039;page_num&#039;] == 2) {
 396     return form_example_tutorial_8_page_two($form, $form_state);
 397   }
 398 
 399   // Otherwise we build page 1.
 400   $form_state[&#039;page_num&#039;] = 1;
 401 
 402   $form[&#039;description&#039;] = array(
 403     &#039;#type&#039; =&gt; &#039;item&#039;,
 404     &#039;#title&#039; =&gt; t(&#039;A basic multistep form (page 1)&#039;),
 405   );
 406 
 407   $form[&#039;first&#039;] = array(
 408     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 409     &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 410     &#039;#description&#039; =&gt; &quot;Please enter your first name.&quot;,
 411     &#039;#size&#039; =&gt; 20,
 412     &#039;#maxlength&#039; =&gt; 20,
 413     &#039;#required&#039; =&gt; TRUE,
 414     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;first&#039;]) ? $form_state[&#039;values&#039;][&#039;first&#039;] : &#039;&#039;,
 415   );
 416   $form[&#039;last&#039;] = array(
 417     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 418     &#039;#title&#039; =&gt; t(&#039;Last name&#039;),
 419     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;last&#039;]) ? $form_state[&#039;values&#039;][&#039;last&#039;] : &#039;&#039;,
 420   );
 421   $form[&#039;year_of_birth&#039;] = array(
 422     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 423     &#039;#title&#039; =&gt; &quot;Year of birth&quot;,
 424     &#039;#description&#039; =&gt; &#039;Format is &quot;YYYY&quot;&#039;,
 425     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;year_of_birth&#039;]) ? $form_state[&#039;values&#039;][&#039;year_of_birth&#039;] : &#039;&#039;,
 426   );
 427   $form[&#039;next&#039;] = array(
 428     &#039;#type&#039; =&gt; &#039;submit&#039;,
 429     &#039;#value&#039; =&gt; &#039;Next &gt;&gt;&#039;,
 430     &#039;#submit&#039; =&gt; array(&#039;form_example_tutorial_8_next_submit&#039;),
 431     &#039;#validate&#039; =&gt; array(&#039;form_example_tutorial_8_next_validate&#039;),
 432   );
 433   return $form;
 434 }
 435 
 436 /**
 437  * Returns the form for the second page of form_example_tutorial_8().
 438  */
 439 function form_example_tutorial_8_page_two($form, &amp;$form_state) {
 440   $form[&#039;description&#039;] = array(
 441     &#039;#type&#039; =&gt; &#039;item&#039;,
 442     &#039;#title&#039; =&gt; t(&#039;A basic multistep form (page 2)&#039;),
 443   );
 444 
 445   $form[&#039;color&#039;] = array(
 446     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 447     &#039;#title&#039; =&gt; t(&#039;Favorite color&#039;),
 448     &#039;#required&#039; =&gt; TRUE,
 449     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;color&#039;]) ? $form_state[&#039;values&#039;][&#039;color&#039;] : &#039;&#039;,
 450   );
 451   $form[&#039;submit&#039;] = array(
 452     &#039;#type&#039; =&gt; &#039;submit&#039;,
 453     &#039;#value&#039; =&gt; t(&#039;Submit&#039;),
 454     &#039;#submit&#039; =&gt; array(&#039;form_example_tutorial_8_page_two_submit&#039;),
 455   );
 456   $form[&#039;back&#039;] = array(
 457     &#039;#type&#039; =&gt; &#039;submit&#039;,
 458     &#039;#value&#039; =&gt; t(&#039;&lt;&lt; Back&#039;),
 459     &#039;#submit&#039; =&gt; array(&#039;form_example_tutorial_8_page_two_back&#039;),
 460     // We won&#039;t bother validating the required &#039;color&#039; field, since they
 461     // have to come back to this page to submit anyway.
 462     &#039;#limit_validation_errors&#039; =&gt; array(),
 463   );
 464   return $form;
 465 }
 466 
 467 
 468 /**
 469  * Validate handler for the next button on first page.
 470  */
 471 function form_example_tutorial_8_next_validate($form, &amp;$form_state) {
 472   $year_of_birth = $form_state[&#039;values&#039;][&#039;year_of_birth&#039;];
 473   if ($year_of_birth &amp;&amp; ($year_of_birth &lt; 1900 || $year_of_birth &gt; 2000)) {
 474     form_set_error(&#039;year_of_birth&#039;, t(&#039;Enter a year between 1900 and 2000.&#039;));
 475   }
 476 }
 477 
 478 /**
 479  * Submit handler for form_example_tutorial_8() next button.
 480  *
 481  * Capture the values from page one and store them away so they can be used
 482  * at final submit time.
 483  */
 484 function form_example_tutorial_8_next_submit($form, &amp;$form_state) {
 485 
 486   // Values are saved for each page.
 487   // to carry forward to subsequent pages in the form.
 488   // and we tell FAPI to rebuild the form.
 489   $form_state[&#039;page_values&#039;][1] = $form_state[&#039;values&#039;];
 490 
 491   if (!empty($form_state[&#039;page_values&#039;][2])) {
 492     $form_state[&#039;values&#039;] = $form_state[&#039;page_values&#039;][2];
 493   }
 494 
 495   // When form rebuilds, it will look at this to figure which page to build.
 496   $form_state[&#039;page_num&#039;] = 2;
 497   $form_state[&#039;rebuild&#039;] = TRUE;
 498 }
 499 
 500 /**
 501  * Back button handler submit handler.
 502  *
 503  * Since #limit_validation_errors = array() is set, values from page 2
 504  * will be discarded. We load the page 1 values instead.
 505  */
 506 function form_example_tutorial_8_page_two_back($form, &amp;$form_state) {
 507   $form_state[&#039;values&#039;] = $form_state[&#039;page_values&#039;][1];
 508   $form_state[&#039;page_num&#039;] = 1;
 509   $form_state[&#039;rebuild&#039;] = TRUE;
 510 }
 511 
 512 /**
 513  * The page 2 submit handler.
 514  *
 515  * This is the final submit handler. Gather all the data together and output
 516  * it in a drupal_set_message().
 517  */
 518 function form_example_tutorial_8_page_two_submit($form, &amp;$form_state) {
 519   // Normally, some code would go here to alter the database with the data
 520   // collected from the form. Instead sets a message with drupal_set_message()
 521   // to validate that the code worked.
 522   $page_one_values = $form_state[&#039;page_values&#039;][1];
 523   drupal_set_message(t(&#039;The form has been submitted. name=&quot;@first @last&quot;, year of birth=@year_of_birth&#039;,
 524   array(&#039;@first&#039; =&gt; $page_one_values[&#039;first&#039;], &#039;@last&#039; =&gt; $page_one_values[&#039;last&#039;], &#039;@year_of_birth&#039; =&gt; $page_one_values[&#039;year_of_birth&#039;])));
 525 
 526   if (!empty($page_one_values[&#039;first2&#039;])) {
 527     drupal_set_message(t(&#039;Second name: name=&quot;@first @last&quot;, year of birth=@year_of_birth&#039;,
 528     array(&#039;@first&#039; =&gt; $page_one_values[&#039;first2&#039;], &#039;@last&#039; =&gt; $page_one_values[&#039;last2&#039;], &#039;@year_of_birth&#039; =&gt; $page_one_values[&#039;year_of_birth2&#039;])));
 529   }
 530   drupal_set_message(t(&#039;And the favorite color is @color&#039;, array(&#039;@color&#039; =&gt; $form_state[&#039;values&#039;][&#039;color&#039;])));
 531 
 532   // If we wanted to redirect on submission, set $form_state[&#039;redirect&#039;]. For
 533   // simple redirects, the value can be a string of the path to redirect to. For
 534   // example, to redirect to /node, one would specify the following:
 535   //
 536   // $form_state[&#039;redirect&#039;] = &#039;node&#039;;
 537   //
 538   // For more complex redirects, this value can be set to an array of options to
 539   // pass to drupal_goto(). For example, to redirect to /foo?bar=1#baz, one
 540   // would specify the following:
 541   //
 542   // $form_state[&#039;redirect&#039;] = array(
 543   //   &#039;foo&#039;,
 544   //   array(
 545   //     &#039;query&#039; =&gt; array(&#039;bar&#039; =&gt; 1),
 546   //     &#039;fragment&#039; =&gt; &#039;baz&#039;,
 547   //   ),
 548   // );
 549   //
 550   // The first element in the array is the path to redirect to, and the second
 551   // element in the array is the array of options. For more information on the
 552   // available options, see http://api.drupal.org/url.
 553 }
 554 
 555 //////////////// Tutorial Example 9 //////////////////////
 556 
 557 /**
 558  * Example 9: A form with a dynamically added new fields.
 559  *
 560  * This example adds default values so that when the form is rebuilt,
 561  * the form will by default have the previously-entered values.
 562  *
 563  * From handbook page http://drupal.org/node/717746.
 564  *
 565  * @see form_example_tutorial_9_add_name()
 566  * @see form_example_tutorial_9_remove_name()
 567  * @see form_example_tutorial_9_submit()
 568  * @see form_example_tutorial_9_validate()
 569  * @ingroup form_example
 570  */
 571 function form_example_tutorial_9($form, &amp;$form_state) {
 572 
 573   // We will have many fields with the same name, so we need to be able to
 574   // access the form hierarchically.
 575   $form[&#039;#tree&#039;] = TRUE;
 576 
 577   $form[&#039;description&#039;] = array(
 578     &#039;#type&#039; =&gt; &#039;item&#039;,
 579     &#039;#title&#039; =&gt; t(&#039;A form with dynamically added new fields&#039;),
 580   );
 581 
 582   if (empty($form_state[&#039;num_names&#039;])) {
 583     $form_state[&#039;num_names&#039;] = 1;
 584   }
 585 
 586   // Build the number of name fieldsets indicated by $form_state[&#039;num_names&#039;]
 587   for ($i = 1; $i &lt;= $form_state[&#039;num_names&#039;]; $i++) {
 588     $form[&#039;name&#039;][$i] = array(
 589       &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 590       &#039;#title&#039; =&gt; t(&#039;Name #@num&#039;, array(&#039;@num&#039; =&gt; $i)),
 591       &#039;#collapsible&#039; =&gt; TRUE,
 592       &#039;#collapsed&#039; =&gt; FALSE,
 593     );
 594 
 595     $form[&#039;name&#039;][$i][&#039;first&#039;] = array(
 596       &#039;#type&#039; =&gt; &#039;textfield&#039;,
 597       &#039;#title&#039; =&gt; t(&#039;First name&#039;),
 598       &#039;#description&#039; =&gt; t(&quot;Enter first name.&quot;),
 599       &#039;#size&#039; =&gt; 20,
 600       &#039;#maxlength&#039; =&gt; 20,
 601       &#039;#required&#039; =&gt; TRUE,
 602     );
 603     $form[&#039;name&#039;][$i][&#039;last&#039;] = array(
 604       &#039;#type&#039; =&gt; &#039;textfield&#039;,
 605       &#039;#title&#039; =&gt; t(&#039;Enter Last name&#039;),
 606       &#039;#required&#039; =&gt; TRUE,
 607     );
 608     $form[&#039;name&#039;][$i][&#039;year_of_birth&#039;] = array(
 609       &#039;#type&#039; =&gt; &#039;textfield&#039;,
 610       &#039;#title&#039; =&gt; t(&quot;Year of birth&quot;),
 611       &#039;#description&#039; =&gt; t(&#039;Format is &quot;YYYY&quot;&#039;),
 612     );
 613   }
 614   $form[&#039;submit&#039;] = array(
 615     &#039;#type&#039; =&gt; &#039;submit&#039;,
 616     &#039;#value&#039; =&gt; &#039;Submit&#039;,
 617   );
 618 
 619   // Adds &quot;Add another name&quot; button
 620   $form[&#039;add_name&#039;] = array(
 621     &#039;#type&#039; =&gt; &#039;submit&#039;,
 622     &#039;#value&#039; =&gt; t(&#039;Add another name&#039;),
 623     &#039;#submit&#039; =&gt; array(&#039;form_example_tutorial_9_add_name&#039;),
 624   );
 625 
 626   // If we have more than one name, this button allows removal of the
 627   // last name.
 628   if ($form_state[&#039;num_names&#039;] &gt; 1) {
 629     $form[&#039;remove_name&#039;] = array(
 630       &#039;#type&#039; =&gt; &#039;submit&#039;,
 631       &#039;#value&#039; =&gt; t(&#039;Remove latest name&#039;),
 632       &#039;#submit&#039; =&gt; array(&#039;form_example_tutorial_9_remove_name&#039;),
 633       // Since we are removing a name, don&#039;t validate until later.
 634       &#039;#limit_validation_errors&#039; =&gt; array(),
 635     );
 636   }
 637 
 638   return $form;
 639 }
 640 
 641 /**
 642  * Submit handler for &quot;Add another name&quot; button on form_example_tutorial_9().
 643  *
 644  * $form_state[&#039;num_names&#039;] tells the form builder function how many name
 645  * fieldsets to build, so here we increment it.
 646  *
 647  * All elements of $form_state are persisted, so there&#039;s no need to use a
 648  * particular key, like the old $form_state[&#039;storage&#039;]. We can just use
 649  * $form_state[&#039;num_names&#039;].
 650  */
 651 function form_example_tutorial_9_add_name($form, &amp;$form_state) {
 652   // Everything in $form_state is persistent, so we&#039;ll just use
 653   // $form_state[&#039;add_name&#039;]
 654   $form_state[&#039;num_names&#039;]++;
 655 
 656   // Setting $form_state[&#039;rebuild&#039;] = TRUE causes the form to be rebuilt again.
 657   $form_state[&#039;rebuild&#039;] = TRUE;
 658 }
 659 
 660 
 661 function form_example_tutorial_9_remove_name($form, &amp;$form_state) {
 662   if ($form_state[&#039;num_names&#039;] &gt; 1) {
 663     $form_state[&#039;num_names&#039;]--;
 664   }
 665 
 666   // Setting $form_state[&#039;rebuild&#039;] = TRUE causes the form to be rebuilt again.
 667   $form_state[&#039;rebuild&#039;] = TRUE;
 668 }
 669 
 670 /**
 671  * Validate function for form_example_tutorial_9().
 672  *
 673  * Adds logic to validate the form to check the validity of the new fields,
 674  * if they exist.
 675  */
 676 function form_example_tutorial_9_validate($form, &amp;$form_state) {
 677 
 678   for ($i = 1; $i &lt;= $form_state[&#039;num_names&#039;]; $i++) {
 679     $year_of_birth = $form_state[&#039;values&#039;][&#039;name&#039;][$i][&#039;year_of_birth&#039;];
 680 
 681     if ($year_of_birth &amp;&amp; ($year_of_birth &lt; 1900 || $year_of_birth &gt; 2000)) {
 682       form_set_error(&quot;name][$i][year_of_birth&quot;, t(&#039;Enter a year between 1900 and 2000.&#039;));
 683     }
 684   }
 685 }
 686 
 687 /**
 688  * Submit function for form_example_tutorial_9().
 689  */
 690 function form_example_tutorial_9_submit($form, &amp;$form_state) {
 691   $output = t(&quot;Form 9 has been submitted.&quot;);
 692   for ($i = 1; $i &lt;= $form_state[&#039;num_names&#039;]; $i++) {
 693     $output .= t(&quot;@num: @first @last (@date)... &quot;, array(&#039;@num&#039; =&gt; $i, &#039;@first&#039; =&gt; $form_state[&#039;values&#039;][&#039;name&#039;][$i][&#039;first&#039;],
 694       &#039;@last&#039; =&gt;  $form_state[&#039;values&#039;][&#039;name&#039;][$i][&#039;last&#039;], &#039;@date&#039; =&gt;  $form_state[&#039;values&#039;][&#039;name&#039;][$i][&#039;year_of_birth&#039;]));
 695   }
 696   drupal_set_message($output);
 697 }
 698 
 699 //////////////// Tutorial Example 10 //////////////////////
 700 
 701 /**
 702  * Example 10: A form with a file upload field.
 703  *
 704  * This example allows the user to upload a file to Drupal which is stored
 705  * physically and with a reference in the database.
 706  *
 707  * @see form_example_tutorial_10_submit()
 708  * @see form_example_tutorial_10_validate()
 709  * @ingroup form_example
 710  */
 711 function form_example_tutorial_10($form_state) {
 712   // If you are familiar with how browsers handle files, you know that
 713   // enctype=&quot;multipart/form-data&quot; is required. Drupal takes care of that, so
 714   // you don&#039;t need to include it yourself.
 715 
 716   $form[&#039;file&#039;] = array(
 717     &#039;#type&#039; =&gt; &#039;file&#039;,
 718     &#039;#title&#039; =&gt; t(&#039;Image&#039;),
 719     &#039;#description&#039; =&gt; t(&#039;Upload a file, allowed extensions: jpg, jpeg, png, gif&#039;),
 720   );
 721 
 722   $form[&#039;submit&#039;] = array(
 723     &#039;#type&#039; =&gt; &#039;submit&#039;,
 724     &#039;#value&#039; =&gt; t(&#039;Submit&#039;),
 725   );
 726 
 727   return $form;
 728 }
 729 
 730 /**
 731  * Validate handler for form_example_tutorial_10().
 732  */
 733 function form_example_tutorial_10_validate($form, &amp;$form_state) {
 734   $file = file_save_upload(&#039;file&#039;, array(
 735     &#039;file_validate_is_image&#039; =&gt; array(), // Validates file is really an image.
 736     &#039;file_validate_extensions&#039; =&gt; array(&#039;png gif jpg jpeg&#039;), // Validate extensions.
 737   ));
 738   // If the file passed validation:
 739   if ($file) {
 740     // Move the file, into the Drupal file system
 741     if ($file = file_move($file, &#039;public://&#039;)) {
 742       // Save the file for use in the submit handler.
 743       $form_state[&#039;storage&#039;][&#039;file&#039;] = $file;
 744     }
 745     else {
 746       form_set_error(&#039;file&#039;, t(&#039;Failed to write the uploaded file to the site\&#039;s file folder.&#039;));
 747     }
 748   }
 749   else {
 750     form_set_error(&#039;file&#039;, t(&#039;No file was uploaded.&#039;));
 751   }
 752 }
 753 
 754 /**
 755  * Submit handler for form_example_tutorial_10().
 756  */
 757 function form_example_tutorial_10_submit($form, &amp;$form_state) {
 758   $file = $form_state[&#039;storage&#039;][&#039;file&#039;];
 759   // We are done with the file, remove it from storage.
 760   unset($form_state[&#039;storage&#039;][&#039;file&#039;]);
 761   // Make the storage of the file permanent
 762   $file-&gt;status = FILE_STATUS_PERMANENT;
 763   // Save file status.
 764   file_save($file);
 765   // Set a response to the user.
 766   drupal_set_message(t(&#039;The form has been submitted and the image has been saved, filename: @filename.&#039;, array(&#039;@filename&#039; =&gt; $file-&gt;filename)));
 767 }</pre>

</div>
<!-- EDIT7 SECTION "form_example_tutorial.inc" [50824-77933] -->
<h2 class="sectionedit8" id="form_example_wizardinc">form_example_wizard.inc</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Extensible wizard form example.
   6  */
   7 
   8 /**
   9  * Extensible wizard form example.
  10  *
  11  * This is an example of a multistep form using a wizard style. It will include
  12  * the &#039;Previous&#039; and &#039;Next&#039; buttons when required, and a &#039;Finish&#039; button at the
  13  * last stage of the form submission.
  14  *
  15  * This example is an extensible skeleton that can include (even
  16  * programatically) more steps. The demonstration form includes three steps,
  17  * each step having its own validation functions.
  18  *
  19  * How to extend this example:
  20  * - Steps are defined in the _form_example_steps() function. Include or alter
  21  *   the steps as you require.
  22  * - For each step, implement the corresponding &#039;form&#039; function (see
  23  *   &#039;form_example_wizard_personal_info&#039; for the first step in this example.)
  24  *   Each step is a regular form, and the wizard collects all the values of the
  25  *   included forms.
  26  * - Optionally, you may include custom validation functions using the regular
  27  *   validation hook (formname_validate). The wizard uses these validation
  28  *   functions for each step.
  29  * - The most important customization step is to change the submit handler and
  30  *   do whatever you want with the collected information. In this case, the
  31  *   example just shows the collected values in the various steps.
  32  * @ingroup form_example
  33  */
  34 
  35 /**
  36  * Returns the list of steps and their associated forms. This has been separated
  37  * to clarify and easy the understanding of this example. You should edit this
  38  * function to include the steps your wizard/multistep form requires.
  39  *
  40  * @return $array
  41  *
  42  * @ingroup form_example
  43  */
  44 function _form_example_steps() {
  45   return array(
  46       1 =&gt; array(
  47         &#039;form&#039; =&gt; &#039;form_example_wizard_personal_info&#039;,
  48       ),
  49       2 =&gt; array(
  50         &#039;form&#039; =&gt; &#039;form_example_wizard_location_info&#039;,
  51       ),
  52       3 =&gt; array(
  53         &#039;form&#039; =&gt; &#039;form_example_wizard_other_info&#039;,
  54       ),
  55     );
  56 }
  57 
  58 /**
  59  * The primary formbuilder function for the wizard form. This is the form that
  60  * you should call with drupal_get_form() from your code, and it will include
  61  * the rest of the step forms defined. You are not required to change this
  62  * function, as this will handle all the step actions for you.
  63  *
  64  * This form has two defined submit handlers to process the different steps:
  65  *  - Previous: handles the way to get back one step in the wizard.
  66  *  - Next:     handles each step form submission,
  67  *
  68  * The third handler, the finish button handler, is the default form _submit
  69  * handler used to process the information.
  70  *
  71  * You are not required to change the next or previous handlers, but you must
  72  * change the form_example_wizard_sbumit handler to perform the operations you
  73  * need on the collected information.
  74  *
  75  * @ingroup form_example
  76  */
  77 function form_example_wizard($form, &amp;$form_state) {
  78 
  79   // Initialize a description of the steps for the wizard.
  80   if (empty($form_state[&#039;step&#039;])) {
  81     $form_state[&#039;step&#039;] = 1;
  82 
  83     // This array contains the function to be called at each step to get the
  84     // relevant form elements. It will also store state information for each
  85     // step.
  86     $form_state[&#039;step_information&#039;] = _form_example_steps();
  87   }
  88   $step = &amp;$form_state[&#039;step&#039;];
  89   drupal_set_title(t(&#039;Extensible Wizard: Step @step&#039;, array(&#039;@step&#039; =&gt; $step)));
  90 
  91   // Call the function named in $form_state[&#039;step_information&#039;] to get the
  92   // form elements to display for this step.
  93   $form = $form_state[&#039;step_information&#039;][$step][&#039;form&#039;]($form, $form_state);
  94 
  95   // Show the &#039;previous&#039; button if appropriate. Note that #submit is set to
  96   // a special submit handler, and that we use #limit_validation_errors to
  97   // skip all complaints about validation when using the back button. The
  98   // values entered will be discarded, but they will not be validated, which
  99   // would be annoying in a &quot;back&quot; button.
 100   if ($step &gt; 1) {
 101     $form[&#039;prev&#039;] = array(
 102       &#039;#type&#039; =&gt; &#039;submit&#039;,
 103       &#039;#value&#039; =&gt; t(&#039;Previous&#039;),
 104       &#039;#name&#039; =&gt; &#039;prev&#039;,
 105       &#039;#submit&#039; =&gt; array(&#039;form_example_wizard_previous_submit&#039;),
 106       &#039;#limit_validation_errors&#039; =&gt; array(),
 107     );
 108   }
 109 
 110   // Show the Next button only if there are more steps defined.
 111   if ($step &lt; count($form_state[&#039;step_information&#039;])) {
 112     // The Next button should be included on every step
 113     $form[&#039;next&#039;] = array(
 114       &#039;#type&#039; =&gt; &#039;submit&#039;,
 115       &#039;#value&#039; =&gt; t(&#039;Next&#039;),
 116       &#039;#name&#039; =&gt; &#039;next&#039;,
 117       &#039;#submit&#039; =&gt; array(&#039;form_example_wizard_next_submit&#039;),
 118     );
 119   }
 120   else {
 121     // Just in case there are no more steps, we use the default submit handler
 122     // of the form wizard. Call this button Finish, Submit, or whatever you
 123     // want to show. When this button is clicked, the
 124     // form_example_wizard_submit handler will be called.
 125     $form[&#039;finish&#039;] = array(
 126       &#039;#type&#039; =&gt; &#039;submit&#039;,
 127       &#039;#value&#039; =&gt; t(&#039;Finish&#039;),
 128     );
 129   }
 130 
 131   // Include each validation function defined for the different steps.
 132   if (function_exists($form_state[&#039;step_information&#039;][$step][&#039;form&#039;] . &#039;_validate&#039;)) {
 133     $form[&#039;next&#039;][&#039;#validate&#039;] = array($form_state[&#039;step_information&#039;][$step][&#039;form&#039;] . &#039;_validate&#039;);
 134   }
 135 
 136   return $form;
 137 }
 138 
 139 /**
 140  * Submit handler for the &quot;previous&quot; button.
 141  * - Stores away $form_state[&#039;values&#039;]
 142  * - Decrements the step counter
 143  * - Replaces $form_state[&#039;values&#039;] with the values from the previous state.
 144  * - Forces form rebuild.
 145  *
 146  * You are not required to change this function.
 147  *
 148  * @ingroup form_example
 149  */
 150 function form_example_wizard_previous_submit($form, &amp;$form_state) {
 151   $current_step = &amp;$form_state[&#039;step&#039;];
 152   $form_state[&#039;step_information&#039;][$current_step][&#039;stored_values&#039;] = $form_state[&#039;values&#039;];
 153   if ($current_step &gt; 1) {
 154     $current_step--;
 155     $form_state[&#039;values&#039;] = $form_state[&#039;step_information&#039;][$current_step][&#039;stored_values&#039;];
 156   }
 157   $form_state[&#039;rebuild&#039;] = TRUE;
 158 }
 159 
 160 /**
 161  * Submit handler for the &#039;next&#039; button.
 162  * - Saves away $form_state[&#039;values&#039;]
 163  * - Increments the step count.
 164  * - Replace $form_state[&#039;values&#039;] from the last time we were at this page
 165  *   or with array() if we haven&#039;t been here before.
 166  * - Force form rebuild.
 167  *
 168  * You are not required to change this function.
 169  *
 170  * @param $form
 171  * @param $form_state
 172  *
 173  * @ingroup form_example
 174  */
 175 function form_example_wizard_next_submit($form, &amp;$form_state) {
 176   $current_step = &amp;$form_state[&#039;step&#039;];
 177   $form_state[&#039;step_information&#039;][$current_step][&#039;stored_values&#039;] = $form_state[&#039;values&#039;];
 178 
 179   if ($current_step &lt; count($form_state[&#039;step_information&#039;])) {
 180     $current_step++;
 181     if (!empty($form_state[&#039;step_information&#039;][$current_step][&#039;stored_values&#039;])) {
 182       $form_state[&#039;values&#039;] = $form_state[&#039;step_information&#039;][$current_step][&#039;stored_values&#039;];
 183     }
 184     else {
 185       $form_state[&#039;values&#039;] = array();
 186     }
 187     $form_state[&#039;rebuild&#039;] = TRUE;  // Force rebuild with next step.
 188     return;
 189   }
 190 }
 191 
 192 /**
 193  * The previous code was a &#039;skeleton&#039; of a multistep wizard form. You are not
 194  * required to change a line on the previous code (apart from defining your own
 195  * steps in the _form_example_steps() function.
 196  *
 197  * All the code included from here is the content of the wizard, the steps of
 198  * the form.
 199  *
 200  * First, let&#039;s show the defined steps for the wizard example.
 201  * @ingroup form_example
 202  */
 203 
 204 /**
 205  * Returns form elements for the &#039;personal info&#039; page of the wizard. This is the
 206  * first step of the wizard, asking for two textfields: first name and last
 207  * name.
 208  *
 209  * @ingroup form_example
 210  */
 211 function form_example_wizard_personal_info($form, &amp;$form_state) {
 212   $form = array();
 213   $form[&#039;first_name&#039;] = array(
 214     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 215     &#039;#title&#039; =&gt; t(&#039;First Name&#039;),
 216     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;first_name&#039;]) ? $form_state[&#039;values&#039;][&#039;first_name&#039;] : &#039;&#039;,
 217   );
 218   $form[&#039;last_name&#039;] = array(
 219     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 220     &#039;#title&#039; =&gt; t(&#039;Last Name&#039;),
 221     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;last_name&#039;]) ? $form_state[&#039;values&#039;][&#039;last_name&#039;] : &#039;&#039;,
 222   );
 223   return $form;
 224 }
 225 
 226 /**
 227  * Returns form elements for the &#039;location info&#039; page of the wizard. This is the
 228  * second step of the wizard. This step asks for a textfield value: a City. This
 229  * step also includes a validation declared later.
 230  *
 231  * @ingroup form_example
 232  */
 233 function form_example_wizard_location_info($form, &amp;$form_state) {
 234   $form = array();
 235   $form[&#039;city&#039;] = array(
 236     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 237     &#039;#title&#039; =&gt; t(&#039;City&#039;),
 238     &#039;#description&#039; =&gt; t(&#039;Hint: Do not enter &quot;San Francisco&quot;, and do not leave this out.&#039;),
 239     &#039;#required&#039; =&gt; TRUE,
 240     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;city&#039;]) ? $form_state[&#039;values&#039;][&#039;city&#039;] : &#039;&#039;,
 241 
 242   );
 243   return $form;
 244 }
 245 
 246 /**
 247  * Custom validation form for the &#039;location info&#039; page of the wizard.
 248  *
 249  * This is the validation function for the second step of the wizard.
 250  * The city cannot be empty or be &quot;San Francisco&quot;.
 251  *
 252  * @ingroup form_example
 253  */
 254 function form_example_wizard_location_info_validate($form, &amp;$form_state) {
 255   if ($form_state[&#039;values&#039;][&#039;city&#039;] == &#039;San Francisco&#039;) {
 256     form_set_error(&#039;city&#039;, t(&#039;You were warned not to enter &quot;San Francisco&quot;&#039;));
 257   }
 258 }
 259 
 260 /**
 261  * Returns form elements for the &#039;other info&#039; page of the wizard. This is the
 262  * thid and last step of the example wizard.
 263  *
 264  * @ingroup form_example
 265  */
 266 function form_example_wizard_other_info($form, &amp;$form_state) {
 267   $form = array();
 268   $form[&#039;aunts_name&#039;] = array(
 269     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 270     &#039;#title&#039; =&gt; t(&quot;Your first cousin&#039;s aunt&#039;s Social Security number&quot;),
 271     &#039;#default_value&#039; =&gt; !empty($form_state[&#039;values&#039;][&#039;aunts_name&#039;]) ? $form_state[&#039;values&#039;][&#039;aunts_name&#039;] : &#039;&#039;,
 272   );
 273   return $form;
 274 }
 275 
 276 // And now comes the magic of the wizard, the function that should handle all the
 277 // inputs from the user on each different step.
 278 /**
 279  * Wizard form submit handler.
 280  * - Saves away $form_state[&#039;values&#039;]
 281  * - Process all the form values.
 282  *
 283  * This demonstration handler just do a drupal_set_message() with the information
 284  * collected on each different step of the wizard.
 285  *
 286  * @param $form
 287  * @param $form_state
 288  *
 289  * @ingroup form_example
 290  */
 291 function form_example_wizard_submit($form, &amp;$form_state) {
 292   $current_step = &amp;$form_state[&#039;step&#039;];
 293   $form_state[&#039;step_information&#039;][$current_step][&#039;stored_values&#039;] = $form_state[&#039;values&#039;];
 294 
 295   // In this case we&#039;ve completed the final page of the wizard, so process the
 296   // submitted information.
 297   drupal_set_message(t(&#039;This information was collected by this wizard:&#039;));
 298   foreach ($form_state[&#039;step_information&#039;] as $index =&gt; $value) {
 299     // Remove FAPI fields included in the values (form_token, form_id and form_build_id
 300     // This is not required, you may access the values using $value[&#039;stored_values&#039;]
 301     // but I&#039;m removing them to make a more clear representation of the collected
 302     // information as the complete array will be passed through drupal_set_message().
 303     unset($value[&#039;stored_values&#039;][&#039;form_id&#039;]);
 304     unset($value[&#039;stored_values&#039;][&#039;form_build_id&#039;]);
 305     unset($value[&#039;stored_values&#039;][&#039;form_token&#039;]);
 306 
 307     // Now show all the values.
 308     drupal_set_message(t(&#039;Step @num collected the following values: &lt;pre&gt;@result&lt;/pre&gt;&#039;, array(&#039;@num&#039; =&gt; $index, &#039;@result&#039; =&gt; print_r($value[&#039;stored_values&#039;], TRUE))));
 309   }
 310 }</pre>

</div>
<!-- EDIT8 SECTION "form_example_wizard.inc" [77934-] -->