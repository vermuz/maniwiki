
<h1 class="sectionedit1" id="pager_example">Pager Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Pager Example" [1-29] -->
<h2 class="sectionedit2" id="pager_exampleinfo">pager_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Pager example
   2 description = Demonstrates a page with content in a pager
   3 package = Example modules
   4 core = 7.x
   5 files[] = pager_example.test</pre>

</div>
<!-- EDIT2 SECTION "pager_example.info" [30-245] -->
<h2 class="sectionedit3" id="pager_examplemodule">pager_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 // $Id$
   3 /**
   4  * @file
   5  * This is an example describing how a module can implement a pager in order
   6  * to reduce the number of output rows to the screen and allow a user
   7  * to scroll through multiple screens of output.
   8  *
   9  * See:
  10  * @link http://drupal.org/developing/api/database Database API @endlink
  11  * @link http://drupal.org/node/508796 Extenders @endlink
  12  */
  13 
  14 /**
  15  * @defgroup pager_example Example: Pager
  16  * @ingroup examples
  17  * @{
  18  * Example of a results pager.
  19  */
  20 
  21 /**
  22  * Implements hook_help().
  23  */
  24 function pager_help($path, $arg) {
  25   switch ($path) {
  26     case &#039;examples/pager_example&#039;:
  27       return &#039;&lt;p&gt;&#039; . t(&#039;The layout here is a themed as a table with a default limit of 10 rows per page. The limit can be changed in the code by changing the limit to some other value.  This can be extended to add a filter form as well so the user can choose how many they would like to see on each screen.&#039;) . &#039;&lt;/p&gt;&#039;;
  28   }
  29 }
  30 
  31 /**
  32  * Implements hook_menu().
  33  */
  34 function pager_example_menu() {
  35   $items[&#039;examples/pager_example&#039;] = array(
  36     &#039;title&#039; =&gt; &#039;Pager example&#039;,
  37     &#039;description&#039; =&gt; &#039;Show a page with a long list across multiple pages&#039;,
  38     &#039;page callback&#039; =&gt; &#039;pager_example_page&#039;,
  39     &#039;access callback&#039; =&gt; TRUE
  40   );
  41   return $items;
  42 }
  43 
  44 /**
  45  * Build the pager query
  46  *
  47  * Uses the date_formats table since it is installed with ~35 rows
  48  * in it and we don&#039;t have to create fake data in order to show
  49  * this example.
  50  *
  51  * @return
  52  *   A render array completely set up with a pager.
  53  */
  54 function pager_example_page() {
  55   // we are going to output the results in a table with a nice header
  56   $header = array(
  57     array(&#039;data&#039; =&gt; t(&#039;DFID&#039;)),
  58     array(&#039;data&#039; =&gt; t(&#039;Format&#039;)),
  59     array(&#039;data&#039; =&gt; t(&#039;Type&#039;)),
  60   );
  61 
  62   // we are extending the PagerDefault class here
  63   // it has a default of 10 rows per page
  64   // the extend(&#039;PagerDefault&#039;) part here does all the magic.
  65   $query = db_select(&#039;date_formats&#039;, &#039;d&#039;)-&gt;extend(&#039;PagerDefault&#039;);
  66   $query-&gt;fields(&#039;d&#039;, array(&#039;dfid&#039;, &#039;format&#039;, &#039;type&#039;));
  67 
  68   $result = $query
  69     -&gt;limit(10)         // this is where you change the number of rows
  70     -&gt;orderBy(&#039;d.dfid&#039;)
  71     -&gt;execute();
  72 
  73   $rows = array();
  74   foreach ($result as $row) {
  75     // normally we would add some nice formatting to our rows
  76     // but for our purpose we are simply going to add our row
  77     // to the array.
  78     $rows[] = array(&#039;data&#039; =&gt; (array) $row);
  79   }
  80 
  81   // Create a render array ($build) which will be themed as a table with a
  82   // pager.
  83   $build[&#039;pager_table&#039;] = array(
  84     &#039;#theme&#039; =&gt; &#039;table&#039;,
  85     &#039;#header&#039; =&gt; $header,
  86     &#039;#rows&#039; =&gt; $rows,
  87     &#039;#empty&#039; =&gt; t(&#039;There are no date formats found in the db&#039;),
  88   );
  89 
  90   // attach the pager theme
  91   $build[&#039;pager_pager&#039;] = array(&#039;#theme&#039; =&gt; &#039;pager&#039;);
  92 
  93   return $build;
  94 }
  95 /**
  96  * @} End of &quot;defgroup pager_example&quot;.
  97  */</pre>

</div>
<!-- EDIT3 SECTION "pager_example.module" [246-3566] -->
<h2 class="sectionedit4" id="pager_exampletest">pager_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 // $Id$
   3 /**
   4  * @file
   5  * Simpletest case for pager_example module.
   6  */
   7 
   8 /**
   9  * Functionality tests for the pager example module.
  10  *
  11  * @ingroup pager_example
  12  */
  13 class PagerExampleTestCase extends DrupalWebTestCase {
  14 
  15   public static function getInfo() {
  16     return array(
  17       &#039;name&#039; =&gt; &#039;Pager Example&#039;,
  18       &#039;description&#039; =&gt; &#039;Verify the pager functionality&#039;,
  19       &#039;group&#039; =&gt; &#039;Examples&#039;,
  20     );
  21   }
  22 
  23   function setUp() {
  24     // Enable the module.
  25     parent::setUp(&#039;pager_example&#039;);
  26   }
  27 
  28   /**
  29    * Verify the functionality of the example module.
  30    */
  31   function testPagerPage() {
  32     // no need to login for this test
  33     $this-&gt;drupalGet(&#039;examples/pager_example&#039;);
  34     $this-&gt;assertText(&#039;next&#039;, &#039;Found next link&#039;);
  35     $this-&gt;assertText(&#039;last&#039;, &#039;Found last link&#039;);
  36 
  37     // on the first page we shouldn&#039;t see the first
  38     // or previous links
  39     $this-&gt;assertNoText(&#039;first&#039;, &#039;No first link on the first page&#039;);
  40     $this-&gt;assertNoText(&#039;previous&#039;, &#039;No previous link on the first page&#039;);
  41 
  42     // lets go to the second page
  43     $this-&gt;drupalGet(&#039;examples/pager_example&#039;, array(&#039;query&#039; =&gt; array(&#039;page&#039; =&gt; 1)));
  44     $this-&gt;assertText(&#039;next&#039;, &#039;Found next link&#039;);
  45     $this-&gt;assertText(&#039;last&#039;, &#039;Found last link&#039;);
  46 
  47     // on the second page we should also see the first
  48     // and previous links
  49     $this-&gt;assertText(&#039;first&#039;, &#039;Found first link&#039;);
  50     $this-&gt;assertText(&#039;previous&#039;, &#039;Found previous link&#039;);
  51   }
  52 }</pre>

</div>
<!-- EDIT4 SECTION "pager_example.test" [3567-] -->