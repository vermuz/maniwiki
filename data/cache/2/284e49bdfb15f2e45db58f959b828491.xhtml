
<h1 class="sectionedit1" id="vertical_tabs_example">Vertical Tabs Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Vertical Tabs Example" [1-37] -->
<h2 class="sectionedit2" id="vertical_tabs_exampleinfo">vertical_tabs_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Vertical tabs example
   2 description = Show how to use vertical tabs for enhancing user experience.
   3 package = Example modules
   4 core = 7.x</pre>

</div>
<!-- EDIT2 SECTION "vertical_tabs_example.info" [38-252] -->
<h2 class="sectionedit3" id="vertical_tabs_examplejs">vertical_tabs_example.js</h2>
<div class="level2">
<pre class="code">   1 (function ($) {
   2 
   3 /**
   4  * Update the summary for the module&#039;s vertical tab.
   5  */
   6 Drupal.behaviors.vertical_tabs_exampleFieldsetSummaries = {
   7   attach: function (context) {
   8     // Use the fieldset class to identify the vertical tab element
   9     $(&#039;fieldset#edit-vertical-tabs-example&#039;, context).drupalSetSummary(function (context) {
  10       // Depending on the checkbox status, the settings will be customized, so
  11       // update the summary with the custom setting textfield string or a use a
  12       // default string.
  13       if ($(&#039;#edit-vertical-tabs-example-enabled&#039;, context).attr(&#039;checked&#039;)) {
  14         return Drupal.checkPlain($(&#039;#edit-vertical-tabs-example-custom-setting&#039;, context).val());
  15       }
  16       else {
  17         return Drupal.t(&#039;Using default&#039;);
  18       }
  19     });
  20   }
  21 };
  22 
  23 })(jQuery);</pre>

</div>
<!-- EDIT3 SECTION "vertical_tabs_example.js" [253-1207] -->
<h2 class="sectionedit4" id="vertical_tabs_examplemodule">vertical_tabs_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Module file for vertical_tabs_example module.
   6  */
   7 
   8 /**
   9  * @defgroup vertical_tabs_example Example: Vertical Tabs
  10  * @ingroup examples
  11  * @{
  12  * Demonstrates the vertical tabs functionality provided by Drupal 7.
  13  *
  14  * This example does not cover how to save or load a custom setting, and only
  15  * deals with the elements visibility and summary in the tab.
  16  *
  17  * @see vertical_tabs_example.js
  18  */
  19 
  20 /**
  21  * Implements hook_menu for a simple explanation page.
  22  */
  23 function vertical_tabs_example_menu() {
  24   $items[&#039;examples/vertical_tabs&#039;] = array(
  25     &#039;title&#039; =&gt; &#039;Vertical tabs example&#039;,
  26     &#039;description&#039; =&gt; &#039;Shows how vertical tabs can best be supported by a custom module&#039;,
  27     &#039;page callback&#039; =&gt; &#039;_vertical_tabs_example_explanation&#039;,
  28     &#039;access callback&#039; =&gt; TRUE,
  29   );
  30   return $items;
  31 }
  32 
  33 /**
  34  * Implement hook_form_alter().
  35  *
  36  * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
  37  * panels to update the settings description.
  38  *
  39  * @see vertical_tabs_example.js
  40  */
  41 function vertical_tabs_example_form_alter(&amp;$form, $form_state, $form_id) {
  42   // Only include on node add/edit forms.
  43   if (!empty($form[&#039;#node_edit_form&#039;])) {
  44 
  45     // Create a fieldset that will be included in the vertical tab.
  46     $form[&#039;vertical_tabs_example&#039;] = array(
  47       &#039;#type&#039; =&gt; &#039;fieldset&#039;,
  48       &#039;#title&#039; =&gt; t(&#039;Example vertical tab&#039;),
  49       &#039;#collapsible&#039; =&gt; TRUE,
  50       &#039;#collapsed&#039; =&gt; FALSE,
  51       &#039;#tree&#039; =&gt; TRUE,
  52       // Send this tab to the top of the list.
  53       &#039;#weight&#039; =&gt; -99,
  54       // The #group value must match the name of the vertical tabs element.
  55       // In most cases, this is &#039;additional_settings&#039;.
  56       &#039;#group&#039; =&gt; &#039;additional_settings&#039;,
  57       // Vertical tabs provide its most usable appearance when they are used to
  58       // include a summary of the information contained in the fieldset. To do
  59       // this, we attach additional JavaScript to handle changing the summary
  60       // when form settings are changed.
  61       &#039;#attached&#039; =&gt; array(
  62         &#039;js&#039; =&gt; array(
  63           &#039;vertical-tabs&#039; =&gt; drupal_get_path(&#039;module&#039;, &#039;vertical_tabs_example&#039;) . &#039;/vertical_tabs_example.js&#039;,
  64         ),
  65       ),
  66     );
  67 
  68     // The form elements below provide a demonstration of how a fieldset
  69     // summary can be displayed in a collapsed tab.
  70 
  71     // This checkbox is used to show or hide the custom settings form using
  72     // javascript (altering states of a container defined later).
  73     $form[&#039;vertical_tabs_example&#039;][&#039;enabled&#039;] = array(
  74       &#039;#type&#039; =&gt; &#039;checkbox&#039;,
  75       &#039;#title&#039; =&gt; t(&#039;Change this setting&#039;),
  76       &#039;#default_value&#039; =&gt; FALSE,
  77     );
  78 
  79     // This container will be used to store the whole form for our custom
  80     // settings. This way, showing/hiding the form using javascript is easier,
  81     // as only one element should be set visible.
  82     $form[&#039;vertical_tabs_example&#039;][&#039;vertical_tabs_examplecontainer&#039;] = array(
  83       &#039;#type&#039; =&gt; &#039;container&#039;,
  84       &#039;#parents&#039; =&gt; array(&#039;vertical_tabs_example&#039;),
  85       &#039;#states&#039; =&gt; array(
  86         &#039;invisible&#039; =&gt; array(
  87           // If the checkbox is not enabled, show the container.
  88           &#039;input[name=&quot;vertical_tabs_example[enabled]&quot;]&#039; =&gt; array(&#039;checked&#039; =&gt; FALSE),
  89         ),
  90       ),
  91     );
  92 
  93     // The string of this textfield will be shown as summary in the vertical
  94     // tab.
  95     $form[&#039;vertical_tabs_example&#039;][&#039;vertical_tabs_examplecontainer&#039;][&#039;custom_setting&#039;] = array(
  96       &#039;#type&#039; =&gt; &#039;textfield&#039;,
  97       &#039;#title&#039; =&gt; t(&#039;Use this setting instead&#039;),
  98       &#039;#default_value&#039; =&gt; &#039;I am a setting with a summary&#039;,
  99       &#039;#description&#039; =&gt; t(&#039;As you type into this field, the summary will be updated in the tab.&#039;),
 100     );
 101   }
 102 }
 103 
 104 /**
 105  * Simple explanation page.
 106  */
 107 function _vertical_tabs_example_explanation() {
 108   return t(&quot;&lt;p&gt;The Vertical Tabs Example shows how a custom module can add a vertical tab to a node edit form, and support its summary field with JavaScript.&lt;/p&gt;&lt;p&gt;To see the effects of this module, &lt;a href=&#039;!node_add&#039;&gt;add a piece of content&lt;/a&gt; and look at the set of tabs at the bottom. We&#039;ve added one called &#039;Example vertical tab.&#039;&lt;/p&gt;&quot;, array(&#039;!node_add&#039; =&gt; url(&#039;node/add&#039;)));
 109 }
 110 /**
 111  * @} End of &quot;defgroup vertical_tabs_example&quot;.
 112  */</pre>

</div>
<!-- EDIT4 SECTION "vertical_tabs_example.module" [1208-] -->