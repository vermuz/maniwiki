
<h1 class="sectionedit1" id="cron_example">Cron Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Cron Example" [1-28] -->
<h2 class="sectionedit2" id="cron_exampleinfo">cron_example.info</h2>
<div class="level2">
<pre class="code">  1 name = Cron example
   2 description = Demonstrates hook_cron() and related features
   3 package = Example modules
   4 core = 7.x
   5 files[] = cron_example.test</pre>

</div>
<!-- EDIT2 SECTION "cron_example.info" [29-242] -->
<h2 class="sectionedit3" id="cron_examplemodule">cron_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Demonstrates use of the Cron API in Drupal - hook_cron()
   6  */
   7 
   8 /**
   9  * @defgroup cron_example Example: Cron
  10  * @ingroup examples
  11  * @{
  12  * Example using Cron API, including hook_cron() and hook_cron_queue_info().
  13  *
  14  * This example is part of the Examples for Developers Project
  15  * which you can download and experiment with at
  16  * http://drupal.org/project/examples
  17  */
  18 
  19 /**
  20  * Implements hook_menu().
  21  */
  22 function cron_example_menu() {
  23 
  24   $items[&#039;examples/cron_example&#039;] = array(
  25     &#039;title&#039; =&gt; &#039;Cron Example&#039;,
  26     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  27     &#039;page arguments&#039; =&gt; array(&#039;cron_example_form&#039;),
  28     &#039;access callback&#039; =&gt; TRUE,
  29   );
  30 
  31   return $items;
  32 }
  33 
  34 /**
  35  * The form to provide a link to cron.php.
  36  */
  37 function cron_example_form($form, &amp;$form_state) {
  38   $form[&#039;status&#039;] = array(
  39     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
  40     &#039;#title&#039; =&gt; t(&#039;Cron status information&#039;),
  41   );
  42   $form[&#039;status&#039;][&#039;intro&#039;] = array(
  43     &#039;#markup&#039; =&gt; &#039;&lt;div&gt;&#039; . t(&#039;The cron example demonstrates hook_cron() and hook_cron_queue_info() processing. If you have administrative privileges you can run cron from this page and see the results.&#039;) . &#039;&lt;/div&gt;&#039;,
  44   );
  45   $form[&#039;status&#039;][&#039;last&#039;] = array(
  46     &#039;#markup&#039; =&gt; &#039;&lt;div&gt;&#039; . t(&#039;cron_example_cron() will next execute the first time cron runs after %time (%seconds seconds from now)&#039; . &#039;&lt;/div&gt;&#039;,
  47       array(
  48         &#039;%time&#039; =&gt; date_iso8601(variable_get(&#039;cron_example_next_execution&#039;, time())),
  49         &#039;%seconds&#039; =&gt; variable_get(&#039;cron_example_next_execution&#039;, time()) - time(),
  50       )
  51     ),
  52   );
  53 
  54   if (user_access(&#039;administer site configuration&#039;)) {
  55     $form[&#039;cron_run&#039;] = array(
  56       &#039;#type&#039; =&gt; &#039;fieldset&#039;,
  57       &#039;#title&#039; =&gt; t(&#039;Run cron manually&#039;),
  58     );
  59     $form[&#039;cron_run&#039;][&#039;cron_reset&#039;] = array(
  60       &#039;#type&#039; =&gt; &#039;checkbox&#039;,
  61       &#039;#title&#039; =&gt; t(&quot;Run cron_example&#039;s cron regardless of whether interval has expired.&quot;),
  62       &#039;#default_value&#039; =&gt; FALSE,
  63     );
  64     $form[&#039;cron_run&#039;][&#039;cron_trigger&#039;] = array(
  65       &#039;#type&#039; =&gt; &#039;submit&#039;,
  66       &#039;#value&#039; =&gt; t(&#039;Run cron now&#039;),
  67       &#039;#submit&#039; =&gt; array(&#039;cron_example_form_cron_run_submit&#039;),
  68     );
  69   }
  70 
  71   $form[&#039;cron_queue_setup&#039;] = array(
  72     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
  73     &#039;#title&#039; =&gt; t(&#039;Cron queue setup (for hook_cron_queue_info(), etc.)&#039;),
  74   );
  75   $queue_1 = DrupalQueue::get(&#039;cron_example_queue_1&#039;);
  76   $queue_2 = DrupalQueue::get(&#039;cron_example_queue_2&#039;);
  77   $form[&#039;cron_queue_setup&#039;][&#039;current_cron_queue_status&#039;] = array(
  78     &#039;#markup&#039; =&gt; &#039;&lt;div&gt;&#039; . t(&#039;There are currently %queue_1 items in queue 1 and %queue_2 items in queue 2&#039;,
  79       array(
  80         &#039;%queue_1&#039; =&gt; $queue_1-&gt;numberOfItems(),
  81         &#039;%queue_2&#039; =&gt; $queue_2-&gt;numberOfItems(),
  82       )) . &#039;&lt;/div&gt;&#039;,
  83   );
  84   $form[&#039;cron_queue_setup&#039;][&#039;num_items&#039;] = array(
  85     &#039;#type&#039; =&gt; &#039;select&#039;,
  86     &#039;#title&#039; =&gt; t(&#039;Number of items to add to queue&#039;),
  87     &#039;#options&#039; =&gt; drupal_map_assoc(array(1, 5, 10, 100, 1000)),
  88     &#039;#default_value&#039; =&gt; 5,
  89   );
  90   $form[&#039;cron_queue_setup&#039;][&#039;queue&#039;] = array(
  91     &#039;#type&#039; =&gt; &#039;radios&#039;,
  92     &#039;#title&#039; =&gt; t(&#039;Queue to add items to&#039;),
  93     &#039;#options&#039; =&gt; array(
  94       &#039;cron_example_queue_1&#039; =&gt; t(&#039;Queue 1&#039;),
  95       &#039;cron_example_queue_2&#039; =&gt; t(&#039;Queue 2&#039;),
  96     ),
  97     &#039;#default_value&#039; =&gt; &#039;cron_example_queue_1&#039;,
  98   );
  99   $form[&#039;cron_queue_setup&#039;][&#039;submit&#039;] = array(
 100     &#039;#type&#039; =&gt; &#039;submit&#039;,
 101     &#039;#value&#039; =&gt; t(&#039;Add jobs to queue&#039;),
 102     &#039;#submit&#039; =&gt; array(&#039;cron_example_add_jobs_to_queue&#039;),
 103   );
 104 
 105   $form[&#039;configuration&#039;] = array(
 106     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 107     &#039;#title&#039; =&gt; t(&#039;Configuration of cron_example_cron()&#039;),
 108   );
 109   $form[&#039;configuration&#039;][&#039;cron_example_interval&#039;] = array(
 110     &#039;#type&#039; =&gt; &#039;select&#039;,
 111     &#039;#title&#039; =&gt; t(&#039;Cron interval&#039;),
 112     &#039;#description&#039; =&gt; t(&#039;Time after which cron_example_cron will respond to a processing request.&#039;),
 113     &#039;#default_value&#039; =&gt; variable_get(&#039;cron_example_interval&#039;, 60*60),
 114     &#039;#options&#039; =&gt; array(
 115       60 =&gt; t(&#039;1 minute&#039;),
 116       300 =&gt; t(&#039;5 minutes&#039;),
 117       3600 =&gt; t(&#039;1 hour&#039;),
 118       60*60*24 =&gt; t(&#039;1 day&#039;),
 119     ),
 120   );
 121 
 122   return system_settings_form($form);
 123 }
 124 
 125 /**
 126  * Allow user to directly execute cron, optionally forcing it.
 127  */
 128 function cron_example_form_cron_run_submit($form, &amp;$form_state) {
 129   if (!empty($form_state[&#039;values&#039;][&#039;cron_reset&#039;])) {
 130     variable_set(&#039;cron_example_next_execution&#039;, 0);
 131   }
 132 
 133   // We don&#039;t usually use globals in this way. This is used here only to
 134   // make it easy to tell if cron was run by this form.
 135   $GLOBALS[&#039;cron_example_show_status_message&#039;] = TRUE;
 136   if (drupal_cron_run()) {
 137     drupal_set_message(t(&#039;Cron ran successfully.&#039;));
 138   }
 139   else {
 140     drupal_set_message(t(&#039;Cron run failed.&#039;), &#039;error&#039;);
 141   }
 142 }
 143 
 144 /**
 145  * #submit function used to add the items to the queue when signaled by
 146  * the form.
 147  */
 148 function cron_example_add_jobs_to_queue($form, &amp;$form_state) {
 149   $queue = $form_state[&#039;values&#039;][&#039;queue&#039;];
 150   $num_items = $form_state[&#039;values&#039;][&#039;num_items&#039;];
 151 
 152   $queue = DrupalQueue::get($queue);
 153   for ($i=1; $i &lt;= $num_items; $i++) {
 154     $item = new stdClass();
 155     $item-&gt;created = time();
 156     $item-&gt;sequence = $i;
 157     $queue-&gt;createItem($item);
 158   }
 159 }
 160 /**
 161  * Implements hook_cron().
 162  *
 163  * hook_cron() is the traditional (pre-Drupal 7) hook for doing &quot;background&quot;
 164  * processing. It gets called every time the Drupal cron runs and must decide
 165  * what it will do.
 166  *
 167  * In this example, it does a watchdog() call after the time named in
 168  * the variable &#039;cron_example_next_execution&#039; has arrived, and then it
 169  * resets that variable to a time in the future.
 170  */
 171 function cron_example_cron() {
 172   // Default to an hourly interval. Of course, cron has to be running at least
 173   // hourly for this to work.
 174   $interval = variable_get(&#039;cron_example_interval&#039;, 60*60);
 175   // We usually don&#039;t want to act every time cron runs (which could be every
 176   // minute) so keep a time for the next run in a variable.
 177 
 178   if (time() &gt;= variable_get(&#039;cron_example_next_execution&#039;, 0)) {
 179     // This is a silly example of a cron job.
 180     // It just makes it obvious that the job has run without
 181     // making any changes to your database.
 182     watchdog(&#039;cron_example&#039;, &#039;cron_example ran&#039;);
 183     if (!empty($GLOBALS[&#039;cron_example_show_status_message&#039;])) {
 184       drupal_set_message(t(&#039;cron_example executed at %time&#039;, array(&#039;%time&#039; =&gt; date_iso8601(time(0)))));
 185     }
 186     variable_set(&#039;cron_example_next_execution&#039;, time() + $interval);
 187   }
 188 }
 189 
 190 
 191 /**
 192  * Implements hook_cron_queue_info().
 193  *
 194  * hook_cron_queue_info() and family are new since Drupal 7, and allow any
 195  * process to add work to the queue to be acted on when cron runs. Queues are
 196  * described and worker callbacks are provided, and then only the worker
 197  * callback needs to be implemented.
 198  *
 199  * All the details of queue use are done by the cron_queue implementation, so
 200  * one doesn&#039;t need to know much about DrupalQueue().
 201  *
 202  * @see queue_example.module
 203  */
 204 function cron_example_cron_queue_info() {
 205   $queues[&#039;cron_example_queue_1&#039;] = array(
 206     &#039;worker callback&#039; =&gt; &#039;cron_example_queue_1_worker&#039;,
 207     &#039;time&#039; =&gt; 1, // One second max runtime per cron run.
 208   );
 209   $queues[&#039;cron_example_queue_2&#039;] = array(
 210     &#039;worker callback&#039; =&gt; &#039;cron_example_queue_2_worker&#039;,
 211     &#039;time&#039; =&gt; 10,
 212   );
 213   return $queues;
 214 }
 215 
 216 /**
 217  * Simple workers for the two queues.
 218  *
 219  * @param $item
 220  *   Any object to be worked on.
 221  */
 222 function cron_example_queue_1_worker($item) {
 223   cron_example_queue_report_work(1, $item);
 224 }
 225 function cron_example_queue_2_worker($item) {
 226   cron_example_queue_report_work(2, $item);
 227 }
 228 
 229 /**
 230  * Simple reporter for the workers.
 231  *
 232  * @param $worker
 233  *   (integer) worker number
 234  * @param $item
 235  *   (object) the $item which was stored in the cron queue.
 236  */
 237 function cron_example_queue_report_work($worker, $item) {
 238   if (!empty($GLOBALS[&#039;cron_example_show_status_message&#039;])) {
 239     drupal_set_message(t(&#039;Queue @worker worker processed item with sequence @sequence created at @time&#039;, array(&#039;@worker&#039; =&gt; $worker, &#039;@sequence&#039; =&gt; $item-&gt;sequence, &#039;@time&#039; =&gt; date_iso8601($item-&gt;created))));
 240   }
 241   watchdog(&#039;cron_example&#039;, &#039;Queue @worker worker processed item with sequence @sequence created at @time&#039;, array(&#039;@worker&#039; =&gt; $worker, &#039;@sequence&#039; =&gt; $item-&gt;sequence, &#039;@time&#039; =&gt; date_iso8601($item-&gt;created)));
 242 }
 243 
 244 /**
 245  * @} End of &quot;defgroup cron_example&quot;.
 246  */</pre>

</div>
<!-- EDIT3 SECTION "cron_example.module" [243-9636] -->
<h2 class="sectionedit4" id="cron_exampletest">cron_example.test</h2>
<div class="level2">
<pre class="code"> 1 &lt;?php
   2 /**
   3  * @file
   4  * Test case for testing the cron example module.
   5  */
   6 
   7 /**
   8  * @addtogroup cron_example
   9  * @{
  10  */
  11 
  12 /**
  13  * cron_example test class
  14  */
  15 class CronExampleTestCase extends DrupalWebTestCase {
  16   protected $web_user;
  17 
  18   public static function getInfo() {
  19     return array(
  20       &#039;name&#039; =&gt; &#039;Cron example functionality&#039;,
  21       &#039;description&#039; =&gt; &#039;Test the functionality of the Cron Example.&#039;,
  22       &#039;group&#039; =&gt; &#039;Examples&#039;,
  23     );
  24   }
  25 
  26   /**
  27    * Enable modules and create user with specific permissions.
  28    */
  29   function setUp() {
  30     parent::setUp(&#039;cron_example&#039;);
  31     // Create user. Search content permission granted for the search block to
  32     // be shown.
  33     $this-&gt;web_user = $this-&gt;drupalCreateUser(array(&#039;administer site configuration&#039;));
  34     $this-&gt;drupalLogin($this-&gt;web_user);
  35   }
  36 
  37   /**
  38    * Login user, create an example node, and test block functionality through
  39    * the admin and user interfaces.
  40    */
  41   function testCronExampleBasic() {
  42     // Pretend that cron has never been run (even though simpletest seems to
  43     // run it once...)
  44     variable_set(&#039;cron_example_next_execution&#039;, 0);
  45     $this-&gt;drupalGet(&#039;examples/cron_example&#039;);
  46 
  47     // Initial run should cause cron_example_cron() to fire.
  48     $post = array();
  49     $this-&gt;drupalPost(&#039;examples/cron_example&#039;, $post, t(&#039;Run cron now&#039;));
  50     $this-&gt;assertText(t(&#039;cron_example executed at&#039;));
  51 
  52     // Forcing should also cause cron_example_cron() to fire.
  53     $post[&#039;cron_reset&#039;] = TRUE;
  54     $this-&gt;drupalPost(NULL, $post, t(&#039;Run cron now&#039;));
  55     $this-&gt;assertText(t(&#039;cron_example executed at&#039;));
  56 
  57     // But if followed immediately and not forced, it should not fire.
  58     $post[&#039;cron_reset&#039;] = FALSE;
  59     $this-&gt;drupalPost(NULL, $post, t(&#039;Run cron now&#039;));
  60     $this-&gt;assertNoText(t(&#039;cron_example executed at&#039;));
  61 
  62 
  63     $this-&gt;assertText(t(&#039;There are currently 0 items in queue 1 and 0 items in queue 2&#039;));
  64     $post = array(
  65       &#039;num_items&#039; =&gt; 5,
  66       &#039;queue&#039; =&gt; &#039;cron_example_queue_1&#039;,
  67     );
  68     $this-&gt;drupalPost(NULL, $post, t(&#039;Add jobs to queue&#039;));
  69     $this-&gt;assertText(&#039;There are currently 5 items in queue 1 and 0 items in queue 2&#039;);
  70     $post = array(
  71       &#039;num_items&#039; =&gt; 100,
  72       &#039;queue&#039; =&gt; &#039;cron_example_queue_2&#039;,
  73     );
  74     $this-&gt;drupalPost(NULL, $post, t(&#039;Add jobs to queue&#039;));
  75     $this-&gt;assertText(&#039;There are currently 5 items in queue 1 and 100 items in queue 2&#039;);
  76 
  77     $post = array();
  78     $this-&gt;drupalPost(&#039;examples/cron_example&#039;, $post, t(&#039;Run cron now&#039;));
  79     $this-&gt;assertPattern(&#039;/Queue 1 worker processed item with sequence 5 /&#039;);
  80     $this-&gt;assertPattern(&#039;/Queue 2 worker processed item with sequence 100 /&#039;);
  81   }
  82 }
  83 
  84 /**
  85  * @} End of &quot;addtogroup cron_example&quot;.
  86  */</pre>

</div>
<!-- EDIT4 SECTION "cron_example.test" [9637-] -->