
<h1 class="sectionedit1" id="dbting_example">DBting Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "DBting Example" [1-30] -->
<h2 class="sectionedit2" id="dbtng_exampleinfo">dbtng_example.info</h2>
<div class="level2">
<pre class="code">  1 name = DBTNG example
   2 description = An example module showing how use the database API: DBTNG.
   3 package = Example modules
   4 core = 7.x
   5 files[] = dbtng_example.test</pre>

</div>
<!-- EDIT2 SECTION "dbtng_example.info" [31-260] -->
<h2 class="sectionedit3" id="dbtng_exampleinstall">dbtng_example.install</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Install, update and uninstall functions for the dbtng_example module.
   5  */
   6 
   7 /**
   8  * Implements hook_install().
   9  *
  10  * In Drupal 7, there is no need to install schema using this hook, the schema
  11  * is already installed before this hook is called.
  12  *
  13  * We will create a default entry in the database.
  14  *
  15  * @see hook_install()
  16  * @ingroup dbtng_example
  17  */
  18 function dbtng_example_install() {
  19   // Outside of the .install file we would use drupal_write_record() to
  20   // populate the database, but it cannot be used here, so we&#039;ll use
  21   // db_insert().
  22 
  23   // Add a default entry.
  24   $fields = array(
  25     &#039;name&#039;    =&gt; &#039;John&#039;,
  26     &#039;surname&#039; =&gt; &#039;Doe&#039;,
  27     &#039;age&#039;     =&gt; 0,
  28   );
  29   db_insert(&#039;dbtng_example&#039;)
  30     -&gt;fields($fields)
  31     -&gt;execute();
  32 
  33   // Add another entry.
  34   $fields = array(
  35     &#039;name&#039;    =&gt; &#039;John&#039;,
  36     &#039;surname&#039; =&gt; &#039;Roe&#039;,
  37     &#039;age&#039;     =&gt; 100,
  38     &#039;uid&#039;     =&gt; 1,
  39   );
  40   db_insert(&#039;dbtng_example&#039;)
  41     -&gt;fields($fields)
  42     -&gt;execute();
  43 
  44 }
  45 
  46 /**
  47  * Implements hook_uninstall().
  48  *
  49  * As in hook_install, there is no need to uninstall schema, Drupal will do it
  50  * for us.
  51  *
  52  * @see hook_uninstall()
  53  * @ingroup dbtng_example
  54  */
  55 function dbtng_example_uninstall() {
  56   // nothing.
  57 }
  58 
  59 
  60 /**
  61  * Implements hook_schema().
  62  *
  63  * Defines the database tables used by this module.
  64  * Remember that the easiest way to create the code for hook_schema is with
  65  * the @link http://drupal.org/project/schema schema module @endlink
  66  *
  67  * @see hook_schema()
  68  * @ingroup dbtng_example
  69  */
  70 function dbtng_example_schema() {
  71 
  72   $schema[&#039;dbtng_example&#039;] = array(
  73     &#039;description&#039; =&gt; &#039;Stores example person entries for demonstration purposes.&#039;,
  74     &#039;fields&#039; =&gt; array(
  75       &#039;pid&#039;  =&gt; array(
  76         &#039;type&#039; =&gt; &#039;serial&#039;,
  77         &#039;not null&#039; =&gt; TRUE,
  78         &#039;description&#039; =&gt; &#039;Primary Key: Unique person ID.&#039;,
  79       ),
  80       &#039;uid&#039; =&gt; array(
  81         &#039;type&#039; =&gt; &#039;int&#039;,
  82         &#039;not null&#039; =&gt; TRUE,
  83         &#039;default&#039; =&gt; 0,
  84         &#039;description&#039; =&gt; &quot;Creator user&#039;s {users}.uid&quot;,
  85       ),
  86       &#039;name&#039; =&gt; array(
  87         &#039;type&#039; =&gt; &#039;varchar&#039;,
  88         &#039;length&#039; =&gt; 255,
  89         &#039;not null&#039; =&gt; TRUE,
  90         &#039;default&#039; =&gt; &#039;&#039;,
  91         &#039;description&#039; =&gt; &#039;Name of the person.&#039;,
  92       ),
  93       &#039;surname&#039; =&gt; array(
  94         &#039;type&#039; =&gt; &#039;varchar&#039;,
  95         &#039;length&#039; =&gt; 255,
  96         &#039;not null&#039; =&gt; TRUE,
  97         &#039;default&#039; =&gt; &#039;&#039;,
  98         &#039;description&#039; =&gt; &#039;Surname of the person.&#039;,
  99       ),
 100       &#039;age&#039; =&gt; array(
 101         &#039;type&#039; =&gt; &#039;int&#039;,
 102         &#039;not null&#039; =&gt; TRUE,
 103         &#039;default&#039; =&gt; 0,
 104         &#039;size&#039; =&gt; &#039;tiny&#039;,
 105         &#039;description&#039; =&gt; &#039;The age of the person in years.&#039;,
 106       )
 107     ),
 108     &#039;primary key&#039; =&gt; array(&#039;pid&#039;),
 109     &#039;indexes&#039; =&gt; array(
 110       &#039;name&#039;    =&gt; array(&#039;name&#039;),
 111       &#039;surname&#039; =&gt; array(&#039;surname&#039;),
 112       &#039;age&#039;     =&gt; array(&#039;age&#039;),
 113     ),
 114   );
 115 
 116   return $schema;
 117 }</pre>

</div>
<!-- EDIT3 SECTION "dbtng_example.install" [261-3655] -->
<h2 class="sectionedit4" id="dbtng_examplemodule">dbtng_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * This is an example outlining how a module can make use of the new DBTNG
   5  * database API in Drupal 7.
   6  *
   7  * @todo Demonstrate transaction usage.
   8  *
   9  * General documentation is available at
  10  * @link database Database abstraction layer documentation @endlink and
  11  * at @link http://drupal.org/node/310069 @endlink.
  12  */
  13 
  14 /**
  15  * @defgroup dbtng_example Example: Database (DBTNG)
  16  * @ingroup examples
  17  * @{
  18  * Database examples, including DBTNG.
  19  *
  20  * &#039;DBTNG&#039; means &#039;Database: The Next Generation.&#039; Yes, Drupallers are nerds.
  21  *
  22  * General documentation is available at
  23  * @link database.inc database abstraction layer documentation @endlink and
  24  * at @link http://drupal.org/node/310069 Database API @endlink.
  25  *
  26  * The several examples here demonstrate basic database usage.
  27  *
  28  * In Drupal 6, the recommended method to save or update an entry in the
  29  * database was drupal_write_record() or db_query().
  30  *
  31  * In Drupal 7 and forward, the usage of db_query()
  32  * for INSERT, UPDATE, or DELETE is deprecated, because it is
  33  * database-dependent. Instead specific functions are provided to perform these
  34  * operations: db_insert(), db_update(), and db_delete() do the job now.
  35  * (Note that drupal_write_record() is also deprecated.)
  36  *
  37  * db_insert() example:
  38  * @code
  39  *   // INSERT INTO {dbtng_example} (name, surname) VALUES(&#039;John, &#039;Doe&#039;)
  40  *   db_insert(&#039;dbtng_example&#039;)
  41  *     -&gt;fields(array(&#039;name&#039; =&gt; &#039;John&#039;, &#039;surname&#039; =&gt; &#039;Doe&#039;))
  42  *     -&gt;execute();
  43  * @endcode
  44  *
  45  * db_update() example:
  46  * @code
  47  *   // UPDATE {dbtng_example} SET name = &#039;Jane&#039; WHERE name = &#039;John&#039;
  48  *   db_update(&#039;dbtng_example&#039;)
  49  *     -&gt;fields(array(&#039;name&#039; =&gt; &#039;Jane&#039;))
  50  *     -&gt;condition(&#039;name&#039;, &#039;John&#039;)
  51  *     -&gt;execute();
  52  * @endcode
  53  *
  54  * db_delete() example:
  55  * @code
  56  *   // DELETE FROM {dbtng_example} WHERE name = &#039;Jane&#039;
  57  *   db_delete(&#039;dbtng_example&#039;)
  58  *     -&gt;condition(&#039;name&#039;, &#039;Jane&#039;)
  59  *     -&gt;execute();
  60  * @endcode
  61  *
  62  * See @link database Database Abstraction Layer @endlink
  63  * @see db_insert()
  64  * @see db_update()
  65  * @see db_delete()
  66  * @see drupal_write_record()
  67 */
  68 
  69 /**
  70  * Save an entry in the database.
  71  *
  72  * The underlying DBTNG function is db_insert().
  73  *
  74  * In Drupal 6, this would have been:
  75  * @code
  76  *   db_query(
  77  *     &quot;INSERT INTO {dbtng_example} (name, surname, age)
  78  *       VALUES (&#039;%s&#039;, &#039;%s&#039;, &#039;%d&#039;)&quot;,
  79  *     $entry[&#039;name&#039;],
  80  *     $entry[&#039;surname&#039;],
  81  *     $entry[&#039;age&#039;]
  82  *   );
  83  * @endcode
  84  *
  85  * Exception handling is shown in this example. It could be simplified
  86  * without the try/catch blocks, but since an insert will throw an exception
  87  * and terminate your application if the exception is not handled, it is best
  88  * to employ try/catch.
  89  *
  90  * @param $entry
  91  *   An array containing all the fields of the database record.
  92  *
  93  * @see db_insert()
  94  */
  95 function dbtng_example_entry_insert($entry) {
  96   $return_value = NULL;
  97   try {
  98     $return_value = db_insert(&#039;dbtng_example&#039;)
  99                     -&gt;fields($entry)
 100                     -&gt;execute();
 101   }
 102   catch (Exception $e) {
 103     drupal_set_message(t(&#039;db_insert failed. Message = %message, query= %query&#039;,
 104       array(&#039;%message&#039; =&gt; $e-&gt;getMessage(), &#039;%query&#039; =&gt; $e-&gt;query_string)), &#039;error&#039;);
 105   }
 106   return $return_value;
 107 }
 108 
 109 /**
 110  * Update an entry in the database.
 111  *
 112  * The former, deprecated techniques used db_query() or drupal_write_record():
 113  * @code
 114  *  drupal_write_record(&#039;dbtng_example&#039;, $entry, $entry[&#039;pid&#039;]);
 115  * @endcode
 116  *
 117  * @code
 118  *  db_query(
 119  *    &quot;UPDATE {dbtng_example}
 120  *     SET name = &#039;%s&#039;, surname = &#039;%s&#039;, age = &#039;%d&#039;
 121  *     WHERE pid = %d&quot;,
 122  *     $entry[&#039;pid&#039;]
 123  *  );
 124  * @endcode
 125  *
 126  * @param $entry
 127  *   An array containing all the fields of the item to be updated.
 128  *
 129  * @see db_update()
 130  */
 131 function dbtng_example_entry_update($entry) {
 132   try {
 133     // db_update()...-&gt;execute() returns the number of rows updated.
 134     $count = db_update(&#039;dbtng_example&#039;)
 135               -&gt;fields($entry)
 136               -&gt;condition(&#039;pid&#039;, $entry[&#039;pid&#039;])
 137               -&gt;execute();
 138   }
 139   catch (Exception $e) {
 140     drupal_set_message(t(&#039;db_update failed. Message = %message, query= %query&#039;,
 141       array(&#039;%message&#039; =&gt; $e-&gt;getMessage(), &#039;%query&#039; =&gt; $e-&gt;query_string)), &#039;error&#039;);
 142   }
 143   return $count;
 144 }
 145 
 146 /**
 147  * Delete an entry from the database.
 148  *
 149  * The usage of db_query is deprecated except for static queries.
 150  * Formerly, a deletion might have been accomplished like this:
 151  * @code
 152  *  db_query(&quot;DELETE FROM {dbtng_example} WHERE pid = %d&quot;, $entry[&#039;pid]);
 153  * @endcode
 154  *
 155  * @param $entry
 156  *   An array containing at least the person identifier &#039;pid&#039; element of the
 157  *   entry to delete.
 158  *
 159  * @see db_delete()
 160  */
 161 function dbtng_example_entry_delete($entry) {
 162   db_delete(&#039;dbtng_example&#039;)
 163     -&gt;condition(&#039;pid&#039;, $entry[&#039;pid&#039;])
 164     -&gt;execute();
 165 
 166 }
 167 
 168 
 169 /**
 170  * Read from the database using a filter array.
 171  *
 172  * In Drupal 6, the standard function to perform reads was db_query(), and
 173  * for static queries, it still is.
 174  *
 175  * db_query() used an SQL query with placeholders and arguments as parameters.
 176  *
 177  * @code
 178  *  // Old way
 179  *  $query = &quot;SELECT * FROM {dbtng_example} n WHERE n.uid = %d AND name = &#039;%s&#039;&quot;;
 180  *  $result = db_query($query, $uid, $name);
 181  * @endcode
 182  *
 183  * Drupal 7 DBTNG provides an abstracted interface that will work with a wide
 184  * variety of database engines.
 185  *
 186  * db_query() is deprecated except when doing a static query. The following is
 187  * perfectly acceptable in Drupal 7. See
 188  * @link http://drupal.org/node/310072 the handbook page on static queries @endlink
 189  *
 190  * @code
 191  *   // SELECT * FROM {dbtng_example} WHERE uid = 0 AND name = &#039;John&#039;
 192  *   db_query(
 193  *     &quot;SELECT * FROM {dbtng_example} WHERE uid = :uid and name = :name&quot;,
 194  *     array(&#039;:uid&#039; =&gt; 0, &#039;:name&#039; =&gt; &#039;John&#039;)
 195  *   )-&gt;execute();
 196  * @endcode
 197  *
 198  * But for more dynamic queries, Drupal provides the db_select()
 199  * API method, so there are several ways to perform the same SQL query.
 200  * See the @link http://drupal.org/node/310075 handbook page on dynamic queries. @endlink
 201  *
 202  * @code
 203  *   // SELECT * FROM {dbtng_example} WHERE uid = 0 AND name = &#039;John&#039;
 204  *   db_select(&#039;dbtng_example&#039;)
 205  *     -&gt;fields(&#039;dbtng_example&#039;)
 206  *     -&gt;condition(&#039;uid&#039;, 0)
 207  *     -&gt;condition(&#039;name&#039;, &#039;John&#039;)
 208  *     -&gt;execute();
 209  * @endcode
 210  *
 211  * Here is db_select with named placeholders:
 212  * @code
 213  *   // SELECT * FROM {dbtng_example} WHERE uid = 0 AND name = &#039;John&#039;
 214  *   $arguments = array(&#039;:name&#039; =&gt; &#039;John&#039;, &#039;:uid&#039; =&gt; 0);
 215  *   db_select(&#039;dbtng_example&#039;)
 216  *     -&gt;fields(&#039;dbtng_example&#039;)
 217  *     -&gt;where(&#039;uid = :uid AND name = :name&#039;, $arguments)
 218  *     -&gt;execute();
 219  * @endcode
 220  *
 221  * Conditions are stacked and evaluated as AND and OR depending on the type of
 222  * query. For more information, read the conditional queries handbook page at:
 223  * http://drupal.org/node/310086
 224  *
 225  * The condition argument is an &#039;equal&#039; evaluation by default, but this can be
 226  * altered:
 227  * @code
 228  *   // SELECT * FROM {dbtng_example} WHERE age &gt; 18
 229  *   db_select(&#039;dbtng_example&#039;)
 230  *     -&gt;fields(&#039;dbtng_example&#039;)
 231  *     -&gt;condition(&#039;age&#039;, 18, &#039;&gt;&#039;)
 232  *     -&gt;execute();
 233  * @endcode
 234  *
 235  * @param $entry
 236  *   An array containing all the fields used to search the entries in the table.
 237  * @return
 238  *   An object containing the loaded entries if found.
 239  *
 240  * @see db_select()
 241  * @see db_query()
 242  * @see http://drupal.org/node/310072
 243  * @see http://drupal.org/node/310075
 244  *
 245  */
 246 function dbtng_example_entry_load($entry = array()) {
 247   // Read all fields from the dbtng_example table.
 248   $select = db_select(&#039;dbtng_example&#039;, &#039;example&#039;);
 249   $select-&gt;fields(&#039;example&#039;);
 250 
 251   // Add each field and value as a condition to this query.
 252   foreach ($entry as $field =&gt; $value) {
 253     $select-&gt;condition($field, $value);
 254   }
 255   // Return the result in object format.
 256   return $select-&gt;execute()-&gt;fetchAll();
 257 }
 258 
 259 /**
 260  * Render a filtered list of entries in the database.
 261  *
 262  * DBTNG also helps processing queries that return several rows, providing the
 263  * found objects in the same query execution call.
 264  *
 265  * This function queries the database using a JOIN between users table and the
 266  * example entries, to provide the username that created the entry, and creates
 267  * a table with the results, processing each row.
 268  *
 269  * SELECT
 270  *  e.pid as pid, e.name as name, e.surname as surname, e.age as age
 271  *  u.name as username
 272  * FROM
 273  *  {dbtng_example} e
 274  * JOIN
 275  *  users u ON e.uid = u.uid
 276  * WHERE
 277  *  e.name = &#039;John&#039; AND e.age &gt; 18
 278  *
 279  * @see db_select()
 280  * @see http://drupal.org/node/310075
 281  */
 282 function dbtng_example_advanced_list() {
 283   $output = &#039;&#039;;
 284 
 285   $select = db_select(&#039;dbtng_example&#039;, &#039;e&#039;);
 286   // Join the users table, so we can get the entry creator&#039;s username.
 287   $select-&gt;join(&#039;users&#039;, &#039;u&#039;, &#039;e.uid = u.uid&#039;);
 288   // Select these specific fields for the output.
 289   $select-&gt;addField(&#039;e&#039;, &#039;pid&#039;);
 290   $select-&gt;addField(&#039;u&#039;, &#039;name&#039;, &#039;username&#039;);
 291   $select-&gt;addField(&#039;e&#039;, &#039;name&#039;);
 292   $select-&gt;addField(&#039;e&#039;, &#039;surname&#039;);
 293   $select-&gt;addField(&#039;e&#039;, &#039;age&#039;);
 294   // Filter only persons named &quot;John&quot;.
 295   $select-&gt;condition(&#039;e.name&#039;, &#039;John&#039;);
 296   // Filter only persons older than 18 years.
 297   $select-&gt;condition(&#039;e.age&#039;, 18, &#039;&gt;&#039;);
 298   // Make sure we only get items 0-49, for scalability reasons.
 299   $select-&gt;range(0, 50);
 300 
 301   // Now, loop all these entries and show them in a table. Note that there is no
 302   // db_fetch_* object or array function being called here. Also note that the
 303   // following line could have been written as
 304   // $entries = $select-&gt;execute()-&gt;fetchAll() which would return each selected
 305   // record as an object instead of an array.
 306   $entries = $select-&gt;execute()-&gt;fetchAll(PDO::FETCH_ASSOC);
 307   if (!empty($entries)) {
 308     $rows = array();
 309     foreach ($entries as $entry) {
 310       // Sanitize the data before handing it off to the theme layer.
 311       $rows[] = array_map(&#039;check_plain&#039;, $entry);
 312     }
 313     // Make a table for them.
 314     $header = array(t(&#039;Id&#039;), t(&#039;Created by&#039;), t(&#039;Name&#039;), t(&#039;Surname&#039;), t(&#039;Age&#039;));
 315     $output .= theme(&#039;table&#039;, array(&#039;header&#039; =&gt; $header, &#039;rows&#039; =&gt; $rows));
 316   }
 317   else {
 318     drupal_set_message(t(&#039;No entries meet the filter criteria (Name = &quot;John&quot; and Age &gt; 18).&#039;));
 319   }
 320   return $output;
 321 }
 322 
 323 //// Helper functions ////
 324 
 325 /**
 326  * Implements hook_help().
 327  *
 328  * Show some help on each form provided by this module.
 329  */
 330 function dbtng_example_help($path) {
 331   $output = &#039;&#039;;
 332   switch ($path) {
 333     case &#039;examples/dbtng&#039;:
 334       $output = t(&#039;Generate a list of all entries in the database. There is no filter in the query.&#039;);
 335       break;
 336     case &#039;examples/dbtng/advanced&#039;:
 337       $output  = t(&#039;A more complex list of entries in the database.&#039;) . &#039; &#039;;
 338       $output .= t(&#039;Only the entries with name = &quot;John&quot; and age older than 18 years are shown, the username of the person who created the entry is also shown.&#039;);
 339       break;
 340     case &#039;examples/dbtng/update&#039;:
 341       $output = t(&#039;Demonstrates a database update operation.&#039;);
 342       break;
 343     case &#039;examples/dbtng/add&#039;:
 344       $output = t(&#039;Add an entry to the dbtng_example table.&#039;);
 345       break;
 346   }
 347   return $output;
 348 }
 349 
 350 /**
 351  * Implements hook_menu().
 352  *
 353  * Set up calls to drupal_get_form() for all our example cases.
 354  */
 355 function dbtng_example_menu() {
 356   $items = array();
 357 
 358   $items[&#039;examples/dbtng&#039;] = array(
 359     &#039;title&#039; =&gt; &#039;DBTNG Example&#039;,
 360     &#039;page callback&#039; =&gt; &#039;dbtng_example_list&#039;,
 361     &#039;access callback&#039; =&gt; TRUE,
 362   );
 363   $items[&#039;examples/dbtng/list&#039;] = array(
 364     &#039;title&#039; =&gt; &#039;List&#039;,
 365     &#039;type&#039; =&gt; MENU_DEFAULT_LOCAL_TASK,
 366     &#039;weight&#039; =&gt; -10,
 367   );
 368   $items[&#039;examples/dbtng/add&#039;] = array(
 369     &#039;title&#039; =&gt; &#039;Add entry&#039;,
 370     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 371     &#039;page arguments&#039; =&gt; array(&#039;dbtng_example_form_add&#039;),
 372     &#039;access callback&#039; =&gt; TRUE,
 373     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 374     &#039;weight&#039; =&gt; -9,
 375   );
 376   $items[&#039;examples/dbtng/update&#039;] = array(
 377     &#039;title&#039; =&gt; &#039;Update entry&#039;,
 378     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
 379     &#039;page arguments&#039; =&gt; array(&#039;dbtng_example_form_update&#039;),
 380     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 381     &#039;access callback&#039; =&gt; TRUE,
 382     &#039;weight&#039; =&gt; -5,
 383   );
 384   $items[&#039;examples/dbtng/advanced&#039;] = array(
 385     &#039;title&#039; =&gt; &#039;Advanced list&#039;,
 386     &#039;page callback&#039; =&gt; &#039;dbtng_example_advanced_list&#039;,
 387     &#039;access callback&#039; =&gt; TRUE,
 388     &#039;type&#039; =&gt; MENU_LOCAL_TASK,
 389   );
 390 
 391   return $items;
 392 }
 393 
 394 /**
 395  * Render a list of entries in the database.
 396  */
 397 function dbtng_example_list() {
 398   $output = &#039;&#039;;
 399 
 400   // Get all entries in the dbtng_example table.
 401   if ($entries = dbtng_example_entry_load()) {
 402     $rows = array();
 403     foreach ($entries as $entry) {
 404       // Sanitize the data before handing it off to the theme layer.
 405       $rows[] = array_map(&#039;check_plain&#039;, (array) $entry);
 406     }
 407     // Make a table for them.
 408     $header = array(t(&#039;Id&#039;), t(&#039;uid&#039;), t(&#039;Name&#039;), t(&#039;Surname&#039;), t(&#039;Age&#039;));
 409     $output .= theme(&#039;table&#039;, array(&#039;header&#039; =&gt; $header, &#039;rows&#039; =&gt; $rows));
 410   }
 411   else {
 412     drupal_set_message(t(&#039;No entries have been added yet.&#039;));
 413   }
 414   return $output;
 415 }
 416 
 417 /**
 418  * Prepare a simple form to add an entry, with all the interesting fields.
 419  */
 420 function dbtng_example_form_add($form, &amp;$form_state) {
 421   $form = array();
 422 
 423   $form[&#039;add&#039;] = array(
 424     &#039;#type&#039;  =&gt; &#039;fieldset&#039;,
 425     &#039;#title&#039; =&gt; t(&#039;Add a person entry&#039;),
 426   );
 427   $form[&#039;add&#039;][&#039;name&#039;] = array(
 428     &#039;#type&#039;  =&gt; &#039;textfield&#039;,
 429     &#039;#title&#039; =&gt; t(&#039;Name&#039;),
 430     &#039;#size&#039;  =&gt; 15,
 431   );
 432   $form[&#039;add&#039;][&#039;surname&#039;] = array(
 433     &#039;#type&#039;  =&gt; &#039;textfield&#039;,
 434     &#039;#title&#039; =&gt; t(&#039;Surname&#039;),
 435     &#039;#size&#039;  =&gt; 15,
 436   );
 437   $form[&#039;add&#039;][&#039;age&#039;] = array(
 438     &#039;#type&#039;  =&gt; &#039;textfield&#039;,
 439     &#039;#title&#039; =&gt; t(&#039;Age&#039;),
 440     &#039;#size&#039;  =&gt; 5,
 441     &#039;#description&#039; =&gt; t(&quot;Values greater than 127 will cause an exception. Try it - it&#039;s a great example why exception handling is needed with DTBNG.&quot;),
 442   );
 443   $form[&#039;add&#039;][&#039;submit&#039;] = array(
 444     &#039;#type&#039;  =&gt; &#039;submit&#039;,
 445     &#039;#value&#039; =&gt; t(&#039;Add&#039;),
 446   );
 447 
 448   return $form;
 449 }
 450 
 451 /**
 452  * Submit handler for &#039;add entry&#039; form.
 453  */
 454 function dbtng_example_form_add_submit($form, &amp;$form_state) {
 455   global $user;
 456 
 457   // Save the submitted entry.
 458   $entry = array(
 459     &#039;name&#039;    =&gt; $form_state[&#039;values&#039;][&#039;name&#039;],
 460     &#039;surname&#039; =&gt; $form_state[&#039;values&#039;][&#039;surname&#039;],
 461     &#039;age&#039;     =&gt; $form_state[&#039;values&#039;][&#039;age&#039;],
 462     &#039;uid&#039;     =&gt; $user-&gt;uid,
 463   );
 464   $return = dbtng_example_entry_insert($entry);
 465   if ($return) {
 466     drupal_set_message(t(&quot;Created entry @entry&quot;, array(&#039;@entry&#039; =&gt; print_r($entry, TRUE))));
 467   }
 468 }
 469 
 470 /**
 471  * Sample UI to update a record.
 472  */
 473 function dbtng_example_form_update($form, &amp;$form_state) {
 474   $form = array(
 475     &#039;#prefix&#039; =&gt; &#039;&lt;div id=&quot;updateform&quot;&gt;&#039;,
 476     &#039;#suffix&#039; =&gt; &#039;&lt;/div&gt;&#039;,
 477   );
 478 
 479   $entries = dbtng_example_entry_load();
 480   $keyed_entries = array();
 481   if (empty($entries)) {
 482     $form[&#039;no_values&#039;] = array(
 483       &#039;#value&#039; =&gt; t(&quot;No entries exist in the table dbtng_example table.&quot;),
 484     );
 485     return $form;
 486   }
 487 
 488   foreach ($entries as $entry) {
 489     $options[$entry-&gt;pid] = t(&quot;@pid: @name @surname (@age)&quot;, array(&#039;@pid&#039; =&gt; $entry-&gt;pid, &#039;@name&#039; =&gt; $entry-&gt;name, &#039;@surname&#039; =&gt; $entry-&gt;surname, &#039;@age&#039; =&gt; $entry-&gt;age));
 490     $keyed_entries[$entry-&gt;pid] = $entry;
 491   }
 492   $default_entry = !empty($form_state[&#039;values&#039;][&#039;pid&#039;]) ? $keyed_entries[$form_state[&#039;values&#039;][&#039;pid&#039;]] : $entries[0];
 493 
 494   $form_state[&#039;entries&#039;] = $keyed_entries;
 495 
 496   $form[&#039;pid&#039;] = array(
 497     &#039;#type&#039; =&gt; &#039;select&#039;,
 498     &#039;#options&#039; =&gt; $options,
 499     &#039;#title&#039; =&gt; t(&#039;Choose entry to update&#039;),
 500     &#039;#default_value&#039; =&gt; $default_entry-&gt;pid,
 501     &#039;#ajax&#039; =&gt; array(
 502       &#039;wrapper&#039; =&gt; &#039;updateform&#039;,
 503       &#039;callback&#039; =&gt; &#039;dbtng_example_form_update_callback&#039;,
 504     ),
 505   );
 506 
 507   $form[&#039;name&#039;] = array(
 508     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 509     &#039;#title&#039; =&gt; t(&#039;Updated first name&#039;),
 510     &#039;#size&#039; =&gt; 15,
 511     &#039;#default_value&#039; =&gt; $default_entry-&gt;name,
 512   );
 513 
 514   $form[&#039;surname&#039;] = array(
 515     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 516     &#039;#title&#039; =&gt; t(&#039;Updated last name&#039;),
 517     &#039;#size&#039; =&gt; 15,
 518     &#039;#default_value&#039; =&gt; $default_entry-&gt;surname,
 519   );
 520   $form[&#039;age&#039;] = array(
 521     &#039;#type&#039; =&gt; &#039;textfield&#039;,
 522     &#039;#title&#039; =&gt; t(&#039;Updated age&#039;),
 523     &#039;#size&#039; =&gt; 4,
 524     &#039;#default_value&#039; =&gt; $default_entry-&gt;age,
 525     &#039;#description&#039; =&gt; t(&quot;Values greater than 127 will cause an exception&quot;),
 526   );
 527 
 528   $form[&#039;submit&#039;] = array(
 529     &#039;#type&#039; =&gt; &#039;submit&#039;,
 530     &#039;#value&#039; =&gt; t(&#039;Update&#039;),
 531   );
 532   return $form;
 533 }
 534 
 535 /**
 536  * AJAX callback handler for the pid select.
 537  *
 538  * When the pid changes, populates the defaults from the database in the form.
 539  */
 540 function dbtng_example_form_update_callback($form, $form_state) {
 541   $entry = $form_state[&#039;entries&#039;][$form_state[&#039;values&#039;][&#039;pid&#039;]];
 542   // Setting the #value of items is the only way I was able to figure out
 543   // to get replaced defaults on these items. #default_value will not do it
 544   // and shouldn&#039;t.
 545   foreach (array(&#039;name&#039;, &#039;surname&#039;, &#039;age&#039;) as $item) {
 546     $form[$item][&#039;#value&#039;] = $entry-&gt;$item;
 547   }
 548   return $form;
 549 }
 550 
 551 /**
 552  * Submit handler for &#039;update entry&#039; form.
 553  */
 554 function dbtng_example_form_update_submit($form, &amp;$form_state) {
 555   global $user;
 556 
 557   // Save the submitted entry.
 558   $entry = array(
 559     &#039;pid&#039; =&gt; $form_state[&#039;values&#039;][&#039;pid&#039;],
 560     &#039;name&#039; =&gt; $form_state[&#039;values&#039;][&#039;name&#039;],
 561     &#039;surname&#039; =&gt; $form_state[&#039;values&#039;][&#039;surname&#039;],
 562     &#039;age&#039; =&gt; $form_state[&#039;values&#039;][&#039;age&#039;],
 563     &#039;uid&#039; =&gt; $user-&gt;uid,
 564   );
 565   $count = dbtng_example_entry_update($entry);
 566   drupal_set_message(t(&quot;Updated entry @entry (@count row updated)&quot;, array(&#039;@count&#039; =&gt; $count, &#039;@entry&#039; =&gt; print_r($entry, TRUE))));
 567 }
 568 /**
 569  * @} End of &quot;defgroup dbtng_example&quot;.
 570  */</pre>

</div>
<!-- EDIT4 SECTION "dbtng_example.module" [3656-23649] -->
<h2 class="sectionedit5" id="dbtng_exampletest">dbtng_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * SimpleTests for dbtng_example module.
   5  */
   6 
   7 /**
   8  * Default test case for the dbtng_example module.
   9  */
  10 class DBTNGExampleUnitTestCase extends DrupalWebTestCase {
  11 
  12   public static function getInfo() {
  13     return array(
  14       &#039;name&#039; =&gt; &#039;DBTNG example unit and UI tests&#039;,
  15       &#039;description&#039; =&gt; &#039;Various unit tests on the dbtng example module.&#039; ,
  16       &#039;group&#039; =&gt; &#039;Examples&#039;,
  17     );
  18   }
  19 
  20   function setUp() {
  21     parent::setUp(&#039;dbtng_example&#039;);
  22   }
  23 
  24   /**
  25    * Test default module installation, two entries in the database table.
  26    */
  27   function testInstall() {
  28     $result = dbtng_example_entry_load();
  29     $this-&gt;assertEqual(
  30       count($result),
  31       2,
  32       &#039;Found two entries in the table after installing the module.&#039;
  33     );
  34   }
  35 
  36 
  37   /**
  38    * Test the UI.
  39    */
  40   function testUI() {
  41     // Test the basic list.
  42     $this-&gt;drupalGet(&#039;examples/dbtng&#039;);
  43     $this-&gt;assertPattern(&quot;/John[td\/&lt;&gt;\w]+Doe/&quot;, &quot;Text &#039;John Doe&#039; found in table&quot;);
  44 
  45     //Test the add tab.
  46     // Add the new entry.
  47     $this-&gt;drupalPost(&#039;examples/dbtng/add&#039;,
  48       array(&#039;name&#039;  =&gt; &#039;Some&#039;, &#039;surname&#039; =&gt; &#039;Anonymous&#039;, &#039;age&#039; =&gt; 33), t(&#039;Add&#039;));
  49     // Now find the new entry.
  50     $this-&gt;drupalGet(&#039;examples/dbtng&#039;);
  51     $this-&gt;assertPattern(&quot;/Some[td\/&lt;&gt;\w]+Anonymous/&quot;, &quot;Text &#039;Some Anonymous&#039; found in table&quot;);
  52 
  53 
  54     // Try the update tab.
  55     // Find out the pid of our &quot;anonymous&quot; guy.
  56     $result = dbtng_example_entry_load(array(&#039;surname&#039; =&gt; &#039;Anonymous&#039;));
  57     $this-&gt;drupalGet(&quot;examples/dbtng&quot;);
  58     $this-&gt;assertEqual(
  59       count($result),
  60       1,
  61       &#039;Found one entry in the table with surname = &quot;Anonymous&quot;.&#039;
  62     );
  63     $entry = $result[0];
  64     unset($entry-&gt;uid);
  65     $entry-&gt;name = &#039;NewFirstName&#039;;
  66     $this-&gt;drupalPost(&#039;examples/dbtng/update&#039;,
  67       (array)$entry, t(&#039;Update&#039;));
  68     // Now find the new entry.
  69     $this-&gt;drupalGet(&#039;examples/dbtng&#039;);
  70     $this-&gt;assertPattern(&quot;/NewFirstName[td\/&lt;&gt;\w]+Anonymous/&quot;, &quot;Text &#039;NewFirstName Anonymous&#039; found in table&quot;);
  71 
  72     // Try the advanced tab.
  73     $this-&gt;drupalGet(&#039;examples/dbtng/advanced&#039;);
  74     $rows = $this-&gt;xpath(&quot;//*[@id=&#039;block-system-main&#039;]/div/table[1]/tbody/tr&quot;);
  75     $this-&gt;assertEqual(count($rows), 1, &quot;One row found in advanced view&quot;);
  76     $this-&gt;assertFieldByXPath(&quot;//*[@id=&#039;block-system-main&#039;]/div/table[1]/tbody/tr/td[4]&quot;, &quot;Roe&quot;, &quot;Name &#039;Roe&#039; Exists in advanced list&quot;);
  77   }
  78 
  79   /**
  80    * Test several combinations, adding entries, updating and deleting.
  81    */
  82   function testAPIExamples() {
  83     // Create a new entry.
  84     $entry = array(
  85       &#039;name&#039; =&gt; &#039;James&#039;,
  86       &#039;surname&#039; =&gt; &#039;Doe&#039;,
  87       &#039;age&#039; =&gt; 23,
  88     );
  89     dbtng_example_entry_insert($entry);
  90 
  91     // Save another entry
  92     $entry = array(
  93       &#039;name&#039; =&gt; &#039;Jane&#039;,
  94       &#039;surname&#039; =&gt; &#039;NotDoe&#039;,
  95       &#039;age&#039; =&gt; 19,
  96     );
  97     dbtng_example_entry_insert($entry);
  98 
  99     // Verify that 4 records are found in the database
 100     $result = dbtng_example_entry_load();
 101     $this-&gt;assertEqual(
 102       count($result),
 103       4,
 104       &#039;Found a total of four entries in the table after creating two additional entries.&#039;
 105     );
 106 
 107     // Verify 2 of these records have &#039;Doe&#039; as surname
 108     $result = dbtng_example_entry_load(array(&#039;surname&#039; =&gt; &#039;Doe&#039;));
 109     $this-&gt;assertEqual(
 110       count($result),
 111       2,
 112       &#039;Found two entries in the table with surname = &quot;Doe&quot;.&#039;
 113     );
 114 
 115     // Now find our not-Doe entry.
 116     $result = dbtng_example_entry_load(array(&#039;surname&#039; =&gt; &#039;NotDoe&#039;));
 117     $this-&gt;assertEqual(
 118       count($result),
 119       1,
 120       &#039;Found one entry in the table with surname &quot;NotDoe&#039;);
 121     // Our NotDoe will be changed to &quot;NowDoe&quot;.
 122     $entry = $result[0];
 123     $entry-&gt;surname = &quot;NowDoe&quot;;
 124     dbtng_example_entry_update((array)$entry);
 125 
 126     $result = dbtng_example_entry_load(array(&#039;surname&#039; =&gt; &#039;NowDoe&#039;));
 127     $this-&gt;assertEqual(
 128       count($result),
 129       1,
 130       &quot;Found renamed &#039;NowDoe&#039; surname&quot;);
 131 
 132     // Read only John Doe entry.
 133     $result = dbtng_example_entry_load(array(&#039;name&#039; =&gt; &#039;John&#039;, &#039;surname&#039; =&gt; &#039;Doe&#039;));
 134     $this-&gt;assertEqual(
 135       count($result),
 136       1,
 137       &#039;Found one entry for John Doe.&#039;
 138     );
 139     // Get the entry
 140     $entry = (array) end($result);
 141     // Change age to 45
 142     $entry[&#039;age&#039;] = 45;
 143     // Update entry in database
 144     dbtng_example_entry_update((array)$entry);
 145 
 146     // Find entries with age = 45
 147     // Read only John Doe entry.
 148     $result = dbtng_example_entry_load(array(&#039;surname&#039; =&gt; &#039;NowDoe&#039;));
 149     $this-&gt;assertEqual(
 150       count($result),
 151       1,
 152       &#039;Found one entry with surname = Nowdoe.&#039;
 153     );
 154 
 155     // Verify it is Jane NowDoe.
 156     $entry = (array) end($result);
 157     $this-&gt;assertEqual(
 158       $entry[&#039;name&#039;],
 159       &#039;Jane&#039;,
 160       &#039;The name Jane is found in the entry&#039;
 161     );
 162     $this-&gt;assertEqual(
 163       $entry[&#039;surname&#039;],
 164       &#039;NowDoe&#039;,
 165       &#039;The surname NowDoe is found in the entry&#039;
 166     );
 167 
 168     // Delete the entry.
 169     dbtng_example_entry_delete($entry);
 170 
 171     // Verify that now there are only 3 records
 172     $result = dbtng_example_entry_load();
 173     $this-&gt;assertEqual(
 174       count($result),
 175       3,
 176       &#039;Found only three records, a record was deleted.&#039;
 177     );
 178   }
 179 }</pre>

</div>
<!-- EDIT5 SECTION "dbtng_example.test" [23650-] -->