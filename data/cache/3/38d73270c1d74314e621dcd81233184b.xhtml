
<h1 class="sectionedit1" id="cache_example">Cache Example</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Cache Example" [1-29] -->
<h2 class="sectionedit2" id="cache_exampleinfo">cache_example.info</h2>
<div class="level2">
<pre class="code">   1 name = Cache Example
   2 description = An example outlining how to use Cache API.
   3 package = Example modules
   4 core = 7.x
   5 
   6 files[] = cache_example.test</pre>

</div>
<!-- EDIT2 SECTION "cache_example.info" [30-250] -->
<h2 class="sectionedit3" id="cache_examplemodule">cache_example.module</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 
   3 /**
   4  * @file
   5  * Outlines how a module can use the Cache API.
   6  *
   7  * @todo: Demonstrate cache expiration.
   8  */
   9 
  10 /**
  11  * @defgroup cache_example Example: Cache API
  12  * @ingroup examples
  13  * @{
  14  * Outlines how a module can use the Cache API.
  15  *
  16  * Cache API allows us to cache data that is heavy to calculate. As this can
  17  * significantly speed up the Drupal site, it is recommended to use cache
  18  * mechanism when it is appropriate.
  19  *
  20  * Cache in Drupal is very easy to use. This example will search entire Drupal
  21  * folder and display all files. Since this operation includes filesystem it can
  22  * take a while. This list will not change much on production
  23  * websites, so we decide to cache it.
  24  *
  25  * @see cache_get()
  26  * @see cache_set()
  27  * @see cache_clear_all()
  28  */
  29 
  30 /**
  31  * Implements hook_menu().
  32  */
  33 function cache_example_menu() {
  34   $items = array();
  35   $items[&#039;examples/cache_example&#039;] = array(
  36     &#039;title&#039; =&gt; &#039;Cache example&#039;,
  37     &#039;description&#039; =&gt; &#039;Example of Drupal Cache API&#039;,
  38     &#039;page callback&#039; =&gt; &#039;drupal_get_form&#039;,
  39     &#039;page arguments&#039; =&gt; array(&#039;cache_example_page_form&#039;),
  40     &#039;access callback&#039; =&gt; TRUE,
  41   );
  42 
  43   return $items;
  44 }
  45 
  46 /**
  47  * cache_example page/form callback.
  48  *
  49  * Displays a page/form which outlines how Drupal&#039;s cache works.
  50  */
  51 function cache_example_page_form($form, &amp;$form_state) {
  52   // Log execution time.
  53   $start_time = microtime(TRUE);
  54 
  55 
  56    // Try to load the files count from cache. This function will accept two
  57    // arguments:
  58    // - cache object name (cid)
  59    // - cache bin, the (optional) cache bin (most often a database table) where
  60    //   the object is to be saved.
  61    //
  62    // cache_get() returns the cached object or FALSE if object does not exist.
  63   if ($cache = cache_get(&#039;cache_example_files_count&#039;)) {
  64     /*
  65      * Get cached data. Complex data types will be unserialized automatically.
  66      */
  67     $files_count = $cache-&gt;data;
  68   }
  69   else {
  70     // If there was no cached data available we have to search filesystem.
  71     // Recursively get all files from Drupal&#039;s folder.
  72     $files_count = count(file_scan_directory(&#039;.&#039;, &#039;/.*/&#039;));
  73 
  74 
  75     // Since we have recalculated, we now need to store the new data into cache.
  76     // Complex data types will be automatically serialized before being saved
  77     // into cache.
  78     // Here we use the default setting and create an unexpiring cache item.
  79     // See below for an example that creates an expiring cache item.
  80     cache_set(&#039;cache_example_files_count&#039;, $files_count);
  81   }
  82 
  83   $end_time = microtime(TRUE);
  84   $duration = $end_time - $start_time;
  85 
  86 
  87   // Format intro message.
  88   $intro_message = &#039;&lt;p&gt;&#039; . t(&#039;This example will search the entire drupal folder and display a count of the files in it.&#039;) . &#039; &#039;;
  89   $intro_message .= t(&#039;This can take a while, since there are a lot of files to be searched.&#039;) . &#039; &#039;;
  90   $intro_message .= t(&#039;We will search filesystem just once and save output to the cache. We will use cached data for later requests.&#039;) . &#039;&lt;/p&gt;&#039;;
  91   $intro_message .= &#039;&lt;p&gt;&#039; . t(&#039;&lt;a href=&quot;@url&quot;&gt;Reload this page&lt;/a&gt; to see cache in action.&#039;, array(&#039;@url&#039; =&gt; request_uri())) . &#039; &#039;;
  92   $intro_message .= t(&#039;You can use the button below to remove cached data.&#039;) . &#039;&lt;/p&gt;&#039;;
  93 
  94   $form[&#039;file_search&#039;] = array(
  95     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
  96     &#039;#title&#039; =&gt; t(&#039;File search caching&#039;),
  97   );
  98   $form[&#039;file_search&#039;][&#039;introduction&#039;] = array(
  99     &#039;#markup&#039; =&gt; $intro_message,
 100   );
 101 
 102   $color = empty($cache) ? &#039;red&#039; : &#039;green&#039;;
 103   $retrieval = empty($cache) ? t(&#039;calculated by traversing the filesystem&#039;) : t(&#039;retrieved from cache&#039;);
 104 
 105   $form[&#039;file_search&#039;][&#039;statistics&#039;] = array(
 106     &#039;#type&#039; =&gt; &#039;item&#039;,
 107     &#039;#markup&#039; =&gt; t(&#039;%count files exist in this Drupal installation; @retrieval in @time ms. &lt;br/&gt;(Source: &lt;span style=&quot;color:@color;&quot;&gt;@source&lt;/span&gt;)&#039;,
 108       array(
 109         &#039;%count&#039; =&gt; $files_count,
 110         &#039;@retrieval&#039; =&gt; $retrieval,
 111         &#039;@time&#039; =&gt; number_format($duration * 1000, 2),
 112         &#039;@color&#039; =&gt; $color,
 113         &#039;@source&#039; =&gt; empty($cache) ? t(&#039;actual file search&#039;) : t(&#039;cached&#039;),
 114       )
 115     ),
 116   );
 117   $form[&#039;file_search&#039;][&#039;remove_file_count&#039;] = array(
 118     &#039;#type&#039; =&gt; &#039;submit&#039;,
 119     &#039;#submit&#039; =&gt; array(&#039;cache_example_form_expire_files&#039;),
 120     &#039;#value&#039; =&gt; t(&#039;Explicitly remove cached file count&#039;),
 121   );
 122 
 123   $form[&#039;expiration_demo&#039;] = array(
 124     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 125     &#039;#title&#039; =&gt; t(&#039;Cache expiration settings&#039;),
 126   );
 127   $form[&#039;expiration_demo&#039;][&#039;explanation&#039;] = array(
 128     &#039;#markup&#039; =&gt; t(&#039;A cache item can be set as CACHE_PERMANENT, meaning that it will only be removed when explicitly cleared, or it can have an expiration time (a Unix timestamp).&#039;),
 129   );
 130   $expiring_item = cache_get(&#039;cache_example_expiring_item&#039;);
 131   $item_status = $expiring_item ?
 132       t(&#039;Cache item exists and is set to expire at %time&#039;, array(&#039;%time&#039; =&gt; $expiring_item-&gt;data)) :
 133       t(&#039;Cache item does not exist&#039;);
 134   $form[&#039;expiration_demo&#039;][&#039;current_status&#039;] = array(
 135     &#039;#type&#039; =&gt; &#039;item&#039;,
 136     &#039;#title&#039; =&gt; t(&#039;Current status of cache item &quot;cache_example_expiring_item&quot;&#039;),
 137     &#039;#markup&#039; =&gt; $item_status,
 138   );
 139   $form[&#039;expiration_demo&#039;][&#039;expiration&#039;] = array(
 140     &#039;#type&#039; =&gt; &#039;select&#039;,
 141     &#039;#title&#039; =&gt; t(&#039;Time before cache expiration&#039;),
 142     &#039;#options&#039; =&gt; array(
 143       &#039;never_remove&#039; =&gt; t(&#039;CACHE_PERMANENT&#039;),
 144       -10 =&gt; t(&#039;Immediate expiration&#039;),
 145       10 =&gt; t(&#039;10 seconds from form submission&#039;),
 146       60 =&gt; t(&#039;1 minute from form submission&#039;),
 147       300 =&gt; t(&#039;5 minutes from form submission&#039;),
 148     ),
 149     &#039;#default_value&#039; =&gt; -10,
 150     &#039;#description&#039; =&gt; t(&#039;Any cache item can be set to only expire when explicitly cleared, or to expire at a given time.&#039;)
 151   );
 152   $form[&#039;expiration_demo&#039;][&#039;create_cache_item&#039;] = array(
 153     &#039;#type&#039; =&gt; &#039;submit&#039;,
 154     &#039;#value&#039; =&gt; t(&#039;Create a cache item with this expiration&#039;),
 155     &#039;#submit&#039; =&gt; array(&#039;cache_example_form_create_expiring_item&#039;),
 156   );
 157 
 158   $form[&#039;cache_clearing&#039;] = array(
 159     &#039;#type&#039; =&gt; &#039;fieldset&#039;,
 160     &#039;#title&#039; =&gt; t(&#039;Expire and remove options&#039;),
 161     &#039;#description&#039; =&gt; t(&quot;We have APIs to expire cached items and also to just remove them. Unfortunately, they&#039;re all the same API, cache_clear_all&quot;),
 162   );
 163   $form[&#039;cache_clearing&#039;][&#039;cache_clear_type&#039;] = array(
 164     &#039;#type&#039; =&gt; &#039;radios&#039;,
 165     &#039;#title&#039; =&gt; t(&#039;Type of cache clearing to do&#039;),
 166     &#039;#options&#039; =&gt; array(
 167       &#039;expire&#039; =&gt; t(&#039;Remove items from the &quot;cache&quot; bin that have expired&#039;),
 168       &#039;remove_all&#039; =&gt; t(&#039;Remove all items from the &quot;cache&quot; bin regardless of expiration (super-wildcard)&#039;),
 169       &#039;remove_wildcard&#039; =&gt; t(&#039;Remove all items from the &quot;cache&quot; bin that match the pattern &quot;cache_example&quot;&#039;),
 170     ),
 171     &#039;#default_value&#039; =&gt; &#039;expire&#039;,
 172   );
 173   // Submit button to clear cached data.
 174   $form[&#039;cache_clearing&#039;][&#039;clear_expired&#039;] = array(
 175     &#039;#type&#039; =&gt; &#039;submit&#039;,
 176     &#039;#value&#039; =&gt; t(&#039;Clear or expire cache&#039;),
 177     &#039;#submit&#039; =&gt; array(&#039;cache_example_form_cache_clearing&#039;),
 178     &#039;#access&#039; =&gt; user_access(&#039;administer site configuration&#039;),
 179   );
 180   return $form;
 181 }
 182 
 183 /**
 184  * Submit handler that explicitly clears cache_example_files_count from cache.
 185  */
 186 function cache_example_form_expire_files($form, &amp;$form_state) {
 187   // Clear cached data. This function will delete cached object from cache bin.
 188   //
 189   // The first argument is cache id to be deleted. Since we&#039;ve provided it
 190   // explicitly, it will be removed whether or not it has an associated
 191   // expiration time. The second argument (required here) is the cache bin.
 192   // Using cache_clear_all() explicitly in this way
 193   // forces removal of the cached item.
 194   cache_clear_all(&#039;cache_example_files_count&#039;, &#039;cache&#039;);
 195 
 196   // Display message to the user.
 197   drupal_set_message(t(&#039;Cached data key &quot;cache_example_files_count&quot; was cleared.&#039;), &#039;status&#039;);
 198 }
 199 
 200 /**
 201  * Submit handler to create a new cache item with specified expiration.
 202  */
 203 function cache_example_form_create_expiring_item($form, &amp;$form_state) {
 204   $interval = $form_state[&#039;values&#039;][&#039;expiration&#039;];
 205   if ($interval == &#039;never_remove&#039;) {
 206     $expiration = CACHE_PERMANENT;
 207     $expiration_friendly = t(&#039;Never expires&#039;);
 208   }
 209   else {
 210     $expiration = time() + $interval;
 211     $expiration_friendly = format_date($expiration);
 212   }
 213   // Set the expiration to the actual Unix timestamp of the end of the required
 214   // interval.
 215   cache_set(&#039;cache_example_expiring_item&#039;, $expiration_friendly, &#039;cache&#039;, $expiration);
 216   drupal_set_message(t(&#039;cache_example_expiring_item was set to expire at %time&#039;, array(&#039;%time&#039; =&gt; $expiration_friendly)));
 217 }
 218 
 219 /**
 220  * Submit handler to demonstrate the various uses of cache_clear_all().
 221  */
 222 function cache_example_form_cache_clearing($form, &amp;$form_state) {
 223   switch ($form_state[&#039;values&#039;][&#039;cache_clear_type&#039;]) {
 224     case &#039;expire&#039;:
 225       // Here we&#039;ll remove all cache keys in the &#039;cache&#039; bin that have expired.
 226       cache_clear_all(NULL, &#039;cache&#039;);
 227       drupal_set_message(t(&#039;cache_clear_all(NULL, &quot;cache&quot;) was called, removing any expired cache items.&#039;));
 228       break;
 229     case &#039;remove_all&#039;:
 230       // This removes all keys in a bin using a super-wildcard. This
 231       // has nothing to do with expiration. It&#039;s just brute-force removal.
 232       cache_clear_all(&#039;*&#039;, &#039;cache&#039;, TRUE);
 233       drupal_set_message(t(&#039;ALL entries in the &quot;cache&quot; bin were removed with cache_clear_all(&quot;*&quot;, &quot;cache&quot;, TRUE).&#039;));
 234       break;
 235     case &#039;remove_wildcard&#039;:
 236       // We can also explicitly remove all cache items whose cid begins with
 237       // &#039;cache_example&#039; by using a wildcard. This again is brute-force
 238       // removal, not expiration.
 239       cache_clear_all(&#039;cache_example&#039;, &#039;cache&#039;, TRUE);
 240       drupal_set_message(t(&#039;Cache entries whose cid began with &quot;cache_example&quot; in the &quot;cache&quot; bin were removed with cache_clear_all(&quot;cache_example&quot;, &quot;cache&quot;, TRUE).&#039;));
 241       break;
 242   }
 243 }
 244 
 245 /**
 246  * @} End of &quot;defgroup cache_example&quot;.
 247  */</pre>

</div>
<!-- EDIT3 SECTION "cache_example.module" [251-11131] -->
<h2 class="sectionedit4" id="cache_exampletest">cache_example.test</h2>
<div class="level2">
<pre class="code">   1 &lt;?php
   2 /**
   3  * @file
   4  * Test case for testing the cache example module.
   5  */
   6 class CacheExampleTestCase extends DrupalWebTestCase {
   7 
   8   public static function getInfo() {
   9     return array(
  10       &#039;name&#039; =&gt; &#039;Cache example functionality&#039;,
  11       &#039;description&#039; =&gt; &#039;Test the Cache Example module.&#039;,
  12       &#039;group&#039; =&gt; &#039;Examples&#039;,
  13     );
  14   }
  15 
  16   /**
  17    * Enable module.
  18    */
  19   function setUp() {
  20     parent::setUp(&#039;cache_example&#039;);
  21   }
  22 
  23   /**
  24    * Load cache example page and test if displaying uncached version. Reload once again and test
  25    * if displaying cached version. Find reload link and click on it. Clear cache at the end and
  26    * test if displaying uncached version again.
  27    */
  28   function testCacheExampleBasic() {
  29     // We need administrative privileges to clear the cache.
  30     $admin_user = $this-&gt;drupalCreateUser(array(&#039;administer site configuration&#039;));
  31     $this-&gt;drupalLogin($admin_user);
  32 
  33     // Get uncached output of cache example page and assert some things to be sure.
  34     $this-&gt;drupalGet(&#039;examples/cache_example&#039;);
  35     $this-&gt;assertText(&#039;Source: actual file search&#039;);
  36     // Reload the page; the number should be cached.
  37     $this-&gt;drupalGet(&#039;examples/cache_example&#039;);
  38     $this-&gt;assertText(&#039;Source: cached&#039;);
  39 
  40     // Now push the button to remove the count.
  41     $this-&gt;drupalPost(&#039;examples/cache_example&#039;, array(), t(&#039;Explicitly remove cached file count&#039;));
  42     $this-&gt;assertText(&#039;Source: actual file search&#039;);
  43 
  44     // Create a cached item. First make sure it doesn&#039;t already exist.
  45     $this-&gt;assertText(&#039;Cache item does not exist&#039;);
  46     $this-&gt;drupalPost(&#039;examples/cache_example&#039;, array(&#039;expiration&#039; =&gt; -10), t(&#039;Create a cache item with this expiration&#039;));
  47     // We should now have an already-expired item
  48     $this-&gt;assertText(&#039;Cache item exists and is set to expire&#039;);
  49     // Now do the expiration operation
  50     $this-&gt;drupalPost(&#039;examples/cache_example&#039;, array(&#039;cache_clear_type&#039; =&gt; &#039;expire&#039;), t(&#039;Clear or expire cache&#039;));
  51     // And verify that it was removed.
  52     $this-&gt;assertText(&#039;Cache item does not exist&#039;);
  53 
  54     // Create a cached item. This time we&#039;ll make it not expire.
  55     $this-&gt;drupalPost(&#039;examples/cache_example&#039;, array(&#039;expiration&#039; =&gt; &#039;never_remove&#039;), t(&#039;Create a cache item with this expiration&#039;));
  56     // We should now have an never-remove item
  57     $this-&gt;assertText(&#039;Cache item exists and is set to expire at Never expires&#039;);
  58     // Now do the expiration operation
  59     $this-&gt;drupalPost(&#039;examples/cache_example&#039;, array(&#039;cache_clear_type&#039; =&gt; &#039;expire&#039;), t(&#039;Clear or expire cache&#039;));
  60     // And verify that it was not removed.
  61     $this-&gt;assertText(&#039;Cache item exists and is set to expire at Never expires&#039;);
  62     // Now do full removal
  63     $this-&gt;drupalPost(&#039;examples/cache_example&#039;, array(&#039;cache_clear_type&#039; =&gt; &#039;remove_wildcard&#039;), t(&#039;Clear or expire cache&#039;));
  64     // And verify that it was removed.
  65     $this-&gt;assertText(&#039;Cache item does not exist&#039;);
  66   }
  67 
  68 }</pre>

</div>
<!-- EDIT4 SECTION "cache_example.test" [11132-] -->